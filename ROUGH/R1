package com.safepage.security.rules;

import static org.mockito.Mockito.*;

import jakarta.servlet.http.HttpServletRequest;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.springframework.test.util.ReflectionTestUtils;

import com.personalcapital.data.utils.UserFeatureTypeUtils;
import com.safepage.ContextManager;
import com.safepage.RequestContext;
import com.safepage.exception.SafePageException;
import com.safepage.security.fraud.rules.IPClusteringRule;
import com.safepage.security.IPManager;
import com.safepage.user.UserEventManager;
import com.safepage.user.data.EventType;
import com.safepage.user.data.FeatureName;
import com.safepage.user.data.FlaggedIpAddress;
import com.safepage.user.data.SuspicionReasonType;
import com.safepage.user.data.User;
import com.safepage.user.data.UserDao;
import com.safepage.user.data.impl.FlaggedIpAddressImpl;
import com.safepage.user.data.impl.UserImpl;

public class IPClusteringRuleTest {

    private IPClusteringRule iPClusteringRule = new IPClusteringRule();

    private UserDao userDao;
    private UserEventManager userEventManager;
    private UserFeatureTypeUtils userFeatureTypeUtils;
    private IPManager ipManager;

    private static final String TEST_IP_ADDRESS = "235.156.38.71";

    private void setUp() {
        // Mock dependencies
        userDao = mock(UserDao.class);
        userEventManager = mock(UserEventManager.class);
        userFeatureTypeUtils = mock(UserFeatureTypeUtils.class);
        ipManager = mock(IPManager.class);

        // Inject mocks into iPClusteringRule
        ReflectionTestUtils.setField(iPClusteringRule, "userDao", userDao);
        ReflectionTestUtils.setField(iPClusteringRule, "userEventManager", userEventManager);
        ReflectionTestUtils.setField(iPClusteringRule, "userFeatureTypeUtils", userFeatureTypeUtils);
        ReflectionTestUtils.setField(iPClusteringRule, "iPManager", ipManager);

        // Behavior for mocks
        doNothing().when(userEventManager).addUserEvent(any(EventType.class), anyString(), anyString());

        when(userFeatureTypeUtils.isUserFeatureEnabled(anyLong(), any(FeatureName.class)))
            .thenReturn(false) // first call
            .thenReturn(true); // second call

        when(userDao.updateIsSuspicious(any(User.class), any(Boolean.class), any(SuspicionReasonType.class)))
            .thenAnswer(new Answer<User>() {
                public User answer(InvocationOnMock invocation) {
                    Object[] args = invocation.getArguments();
                    User user = (User) args[0];
                    ((UserImpl) user).setSuspicious((Boolean) args[1]);
                    ((UserImpl) user).setSuspicionReason((SuspicionReasonType) args[2]);
                    return user;
                }
            });
    }

    @Test
    public void testValidate() throws SafePageException {
        setUp();
        UserImpl user = new UserImpl();
        user.setId(1L);
        user.setUsername("testuser");

        HttpServletRequest request = mock(org.springframework.mock.web.MockHttpServletRequest.class);
        when(request.getRemoteAddr()).thenReturn(TEST_IP_ADDRESS);
        when(request.getHeader("user-agent")).thenReturn("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5)");
        when(request.getMethod()).thenReturn("POST");

        RequestContext rc = ContextManager.getRequestContext(request, mock(org.springframework.mock.web.MockHttpServletResponse.class), true);
        rc.setAttribute("USER_ATTRIBUTE", user);
        rc.setCurrentDeviceProperties("{\"ip\":\"" + TEST_IP_ADDRESS + "\"}");

        // 1. No flagged IP in cache
        when(ipManager.getIPAddress(TEST_IP_ADDRESS)).thenReturn(null);
        Assertions.assertTrue(iPClusteringRule.validate());

        // 2. IP is flagged but whitelisted
        FlaggedIpAddress ip = new FlaggedIpAddressImpl();
        ip.setIpAddrString(TEST_IP_ADDRESS);
        ip.setSuspicious(true);
        ip.setWhiteListed(true);
        when(ipManager.getIPAddress(TEST_IP_ADDRESS)).thenReturn(ip);
        Assertions.assertTrue(iPClusteringRule.validate());

        // 3. IP is flagged and NOT whitelisted
        ip.setWhiteListed(false);
        when(ipManager.getIPAddress(TEST_IP_ADDRESS)).thenReturn(ip);
        user.setSuspicious(false); // Reset to simulate clean state
        Assertions.assertFalse(iPClusteringRule.validate());
    }

    @AfterAll
    public static void clearUp() {
        // No real cache used here; no cleanup needed
    }
}
