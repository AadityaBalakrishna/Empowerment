package com.empower.epw.aws.kms.config;

import com.amazonaws.services.kms.AWSKMS;
import com.empower.epw.aws.api.kms.EpwKmsService;
import com.empower.epw.sdk.v1.adapter.kms.EpwKmsServiceImpl;
import com.empower.epw.sdk.v2.adapter.kms.EpwKmsServiceV2Impl;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.test.context.TestPropertySource;
import software.amazon.awssdk.services.kms.KmsClient;

import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;

class EpwAwsKmsAutoConfigIT {

    @SpringBootApplication(exclude = DataSourceAutoConfiguration.class)
    static class TestApplication {
    }

    /**
     * SCENARIO 1: Consumer provides their own custom AWSKMS client.
     * Auto-config should pick it up.
     */
    @Nested
    @SpringBootTest(classes = {
        TestApplication.class, ConsumerProvidesClientTest.CustomClientConfig.class
    })
    class ConsumerProvidesClientTest {

        @TestConfiguration
        static class CustomClientConfig {
            @Bean
            public AWSKMS customAwsKmsClient() {
                return mock(AWSKMS.class, "consumerCustomKmsClient");
            }
        }

        @Autowired
        private AWSKMS injectedClient;

        @Autowired
        private EpwKmsServiceImpl serviceImpl;

        @Test
        @Disabled("Uncomment when getAwsKmsClient() is available in service")
        void serviceShouldUseConsumerProvidedClient() {
            // assertSame(injectedClient, serviceImpl.getAwsKmsClient());
        }
    }

    /**
     * SCENARIO 2: Property set to v2, no consumer client — should load v2 adapter.
     */
    @Nested
    @SpringBootTest(classes = TestApplication.class)
    @TestPropertySource(properties = "epw.aws.kms.sdk.version=v2")
    class V2PropertySetTest {

        @Autowired
        private EpwKmsService kmsService;

        @Autowired
        private KmsClient kmsClient;

        @Test
        void shouldUseV2Implementation() {
            assertTrue(kmsService instanceof EpwKmsServiceV2Impl);
        }
    }

    /**
     * SCENARIO 3: No consumer client, no version property — should fall back to default v1.
     */
    @Nested
    @SpringBootTest(classes = TestApplication.class)
    class DefaultV1FallbackTest {

        @Autowired
        private EpwKmsService kmsService;

        @Test
        void shouldUseV1Implementation() {
            assertTrue(kmsService instanceof EpwKmsServiceImpl);
        }
    }
}
