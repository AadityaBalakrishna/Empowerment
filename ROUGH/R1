here we are catching only checked exception, 

catch (Exception ex)

but here 
throw AwsExceptionHandler.handleKMSException(getAwsSdkVersion(), "encryptUsingAWSKey",
					keyId, ex);

throwing KMS custom exception which is unchecked exception ( runtime exception ) not catched in main method above

	public String encryptUsingAWSKey(String plainText, String keyId) throws SafePageException
	{
		if (StringUtils.isEmpty(plainText))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "plainText is required!");
		}
		if (StringUtils.isEmpty(keyId))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "keyId is required!");
		}
		try
		{
			EncryptRequest encryptRequest = new EncryptRequest().withKeyId(keyId)
					.withPlaintext(getByteBuffer(plainText));
			long start = System.currentTimeMillis();
			EncryptResult result = kmsClient.encrypt(encryptRequest);
			if (result != null && result.getCiphertextBlob() != null)
			{
				long end = System.currentTimeMillis();
				logger.info("[{}] encryptData took {} ", getAwsSdkVersion(), end - start);
				return Utils.encodeBase64(result.getCiphertextBlob()
						.array());
			}
			else
			{
				throw AwsExceptionHandler.handleKMSException(getAwsSdkVersion(), "encrypt", keyId,
						new IllegalStateException("EncryptResult or CiphertextBlob is null"));
			}
		}
		catch (DisabledException | KeyUnavailableException | UnsupportedEncodingException ex)
		{
			logger.error(String.format(
					"[%s] encryptUsingAWSKey failed, plainText:%s, keyId:%s, due to:%s",
					getAwsSdkVersion(), plainText, keyId, ex.getMessage()), ex);
			throw AwsExceptionHandler.handleKMSException(getAwsSdkVersion(), "encryptUsingAWSKey",
					keyId, ex);
		}
	}
