import io.micrometer.core.instrument.Metrics;
import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.Signature;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static com.personalcapital.cache.aop.PcapMultiCacheableAdvice.CACHE_EVICTION_FAILURE_METRIC;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class PcapMultiCacheableAdviceTest {
        private PcapMultiCacheableAdvice cacheAdvice;
        private SimpleMeterRegistry meterRegistry;

        @BeforeEach
        void setUp() {
                meterRegistry = new SimpleMeterRegistry();
                Metrics.addRegistry(meterRegistry);
                cacheAdvice = new PcapMultiCacheableAdvice();
        }

        @Test
        void testCacheEvictionFailureMetric() throws Throwable {
                // Mock the ProceedingJoinPoint
                ProceedingJoinPoint pjp = mock(ProceedingJoinPoint.class);

                // Mock the Signature object
                Signature mockSignature = mock(Signature.class);
                when(mockSignature.getName()).thenReturn("testMethod");
                when(pjp.getSignature()).thenReturn(mockSignature);
                when(pjp.getTarget()).thenReturn(this);
                when(pjp.getArgs()).thenReturn(new Object[]{"key1"});

                // Mock toShortString() and toLongString() methods
                when(pjp.toShortString()).thenReturn("FakeJoinPoint");
                when(pjp.toLongString()).thenReturn("FakeJoinPoint Long String");

                // Spy on the actual cacheAdvice instance
                PcapMultiCacheableAdvice spyCacheAdvice = spy(cacheAdvice);

                // Mock the evictFromRedis method to simulate cache eviction failure
                doThrow(new RuntimeException("Cache eviction failure")).when(spyCacheAdvice).evictFromRedis(any(), anyList());

                // Run the method that should trigger the eviction failure
                try {
                        spyCacheAdvice.doMultiCacheable(pjp, null);
                } catch (Exception e) {
                        // Expected failure, we're testing for a failure case
                }

                // Assert that the metric for eviction failure is incremented
                assertEquals(1, meterRegistry.get(CACHE_EVICTION_FAILURE_METRIC).counter().count(),
                                "Cache eviction failure metric should be incremented");

                // Debugging Output
                System.out.println("Cache Eviction Failure Metric Count: " +
                                meterRegistry.get(CACHE_EVICTION_FAILURE_METRIC).counter().count());
        }
}