@Library('jenkins-shared-libraries@master') _
import com.personalcapital.jenkins2.*
import com.personalcapital.jenkins2.build.analyzer.*

def evaluatorFactory = EvaluatorFactory.instance
def pcapBuildManager = PCAPBuildManager.instance
def buildArtifact = pcapBuildManager.getBuildArtifact()
def pipelineUtils = pcapBuildManager.getPipelineUtils()

pipeline
{
    agent {
        label "pcap-maven23"
    }
  options
  {
    disableConcurrentBuilds()
    //Persist artifacts and console output for the specific number of recent Pipeline runs.
    buildDiscarder(logRotator(numToKeepStr: '50'))
    //Prepend all console output generated by the Pipeline run with the time at which the line was emitted.
    timestamps()
    ansiColor('xterm')
    timeout(time: 45, unit: 'MINUTES')
  }
  parameters
  {
    choice(name: 'UNIT_TESTING_MODE', choices: ['maven.test.failure.ignore=true', 'skipTests=false','skipTests=true'], description: 'unit test case modes' )
    choice(name: 'ENVIRONMENT', choices: ['auto','none','devtrunk','qatrunk','devstaging','devstaging1','devstaging2','qastaging','epqa','mgqa','pocdevelop','pocdevops'], description: 'target environment')
    string(name: 'PCAP_RELEASE_VERSION', defaultValue: "", description: 'PCAP version for release branch')
    string(name: 'PCAP_SPRINT_NUMBER', defaultValue: "", description: 'PCAP Sprint Number such as 323')
    booleanParam(name: 'CLEAN_WS', defaultValue: false, description: 'Cleans the workspace at the end of the job.')
    booleanParam(name: 'KEEP_PR_CONTAINER', defaultValue: false, description: 'Whether to keep PR container after API automation to perform manual tests.')
    // delete pcap artifacts for current version from local repo
    choice(name: 'FLUSH_LOCAL_REPO', choices: ['none','pcap'], description: 'Remove all safepage/pcap version for $PROJECT_VERSION from local repo' )
  }
 // triggers 
 // {
     // cron(env.BRANCH_NAME == 'release/2.7' ? 'H H(21-23) * * 1-5' : '')
 // }
  environment
  {
    PCAP_SPRINT_NUMBER="${PCAP_SPRINT_NUMBER}"
    KEEP_PR_CONTAINER="${KEEP_PR_CONTAINER}"
    CLEAN_WS="${CLEAN_WS}"
    UNIT_TESTING_MODE="${UNIT_TESTING_MODE}"
    TEST_CONFIG_HOME="${workspace}"
    ENVIRONMENT=getDefaultEnvironment(params.ENVIRONMENT)
    PCAP_RELEASE_VERSION="${PCAP_RELEASE_VERSION}"
    TARGET_QUOTE_SERVICE_JARNAME="pcap-${env.BRANCH_NAME}-quote-${env.BUILD_NUMBER}-${env.BUILD_ID}.jar"

    // setting projectVersion as per standards
    NORMALIZED_BRANCH_VERSION=buildArtifact.getNormalizedVersion()
    PROJECT_VERSION=buildArtifact.getProjectVersion()
    PCAP_VERSION=pcapBuildManager.getPCAPVersion()
    MAVEN_LOCAL_REPO=pcapBuildManager.localMavenRepo "$HOME" , "pcap-quote" , "${NORMALIZED_BRANCH_VERSION}"
    LINE_COVERAGE_MIN=pcapBuildManager.getCodeCoverageMin("LINE")
    BRANCH_COVERAGE_MIN=pcapBuildManager.getCodeCoverageMin("BRANCH")

    RELEASE_TAG=getGitTag()
    RELEASE_VERSION=getReleaseVersionFromGitTag()
    IMAGE_DOCKER_TAG=getDockerImageId()

    //Staging Job
	QUOTE_STAGING_DEPLOY_JOB=getEksDeployJobPath('quote','staging') // serviceName, env
   	QUOTE_DEVQA_DEPLOY_JOB=getEksDeployJobPath('quote','devqa') // serviceName, env

    //API Tests
    API_BUILD_JOB="/automation/pcap-api-automation/master"
  }
  tools
  {
    nodejs 'nodejs-12.14.0'
    jdk 'openjdk21'
  }

  stages {
    stage('Validate CF') {
      steps {
        container("maven") {
          withAWS(role: "arn:aws:iam::${env.DEV_ACCOUNT_NUM}:role/PcapJenkins2SlaveDevopsMonitor" ) {
            validateCf(this)
          }
        }
      }
    }

    stage('Run PreBuildChecks') {
      steps {
        container("maven") {
          // Ref: https://github.com/personalcapital/pipeline-shared-libraries/blob/master/resources/preBuildChecks.yml
          PreBuildChecks()
        }
      }
    }
	  
    stage('Version') {
      steps {
        container("maven") {
          script {
            echo 'Versioning the modules.....'
            echo sh(script: 'env|sort', returnStdout: true)
            // Ref: https://github.com/personalcapital/pipeline-shared-libraries/blob/master/resources/pcapVersions.yml
              pcapVersions()
          }
        }
      }
    }

    stage('PRBuilder Tests and Optional Tests') {
      steps {
        container("maven") {
          // Ref: https://github.com/personalcapital/pipeline-shared-libraries/blob/master/resources/pcapBuild.yml
          pcapBuild()
        }
      }
    }

   stage('Run PostBuildChecks') {
      steps {
        container("maven") {
          // Ref: https://github.com/personalcapital/pipeline-shared-libraries/blob/master/resources/postBuildChecks.yml
          PostBuildChecks()
        }
      }
    }

    stage('Artifactory Upload && Docker Image Build && EKS Deployment') {
      steps {
        container("maven") {
          script {
              // Ref: https://github.com/personalcapital/pipeline-shared-libraries/blob/master/resources/pcapUpload.yml
              pcapUpload()
          }
        }
      }
    }

    stage('Run postDeployChecks') {
      steps {
        container("maven") {
          // Ref: https://github.com/personalcapital/pipeline-shared-libraries/blob/master/resources/postDeployChecks.yml
          PostDeployChecks()
        }
      }
    }
    stage('Tag the release') {
      steps {
        container("maven") {
          // Ref: https://github.com/personalcapital/pipeline-shared-libraries/blob/master/resources/pcapGitTag.yml
          setGitTag()
        }
      }
    }

    stage('Finish up') {
      steps {
        container("maven") {
          // Ref: https://github.com/personalcapital/pipeline-shared-libraries/blob/master/resources/finishUp.yml
          finishUp()
        }
      }
    }
  }
  post {
    failure {
      slackNotify(currentBuild.currentResult,"#jenkins2_alerts")
    }
  }
}


where in the jenkins file should i add the logs?
