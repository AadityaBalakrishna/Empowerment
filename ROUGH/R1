package com.safepage.security.service.impl;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;

import com.empower.epw.aws.api.kms.EpwKmsService;
import com.empower.epw.aws.api.kms.dto.DecryptRequestDTO;
import com.empower.epw.aws.api.kms.dto.EncryptRequestDTO;
import com.empower.epw.aws.api.kms.dto.DecryptResponseDTO;
import com.empower.epw.aws.api.kms.dto.EncryptResponseDTO;
import com.personalcapital.log.PcapLogger;
import com.personalcapital.log.PcapLoggerFactory;
import com.safepage.error.SafePageErrorType;
import com.safepage.exception.SafePageException;
import com.safepage.security.service.KMSService;

public class KMSServiceImpl implements KMSService {

    private static final PcapLogger logger = PcapLoggerFactory.getPcapLogger(KMSServiceImpl.class);

    private final EpwKmsService epwKmsService;

    public KMSServiceImpl(EpwKmsService epwKmsService) {
        this.epwKmsService = epwKmsService;
        logger.info("Initialized KMSServiceImpl with EpwKmsService: {}", epwKmsService.getClass().getSimpleName());
    }

    @Override
    public String encryptUsingAWSKey(String plainText, String keyId) throws SafePageException {
        if (StringUtils.isEmpty(plainText)) {
            throw new SafePageException(SafePageErrorType.INVALID_INPUT, "plainText is required!");
        }
        if (StringUtils.isEmpty(keyId)) {
            throw new SafePageException(SafePageErrorType.INVALID_INPUT, "keyId is required!");
        }

        try {
            long start = System.currentTimeMillis();
            EncryptRequestDTO request = new EncryptRequestDTO(plainText, keyId);
            EncryptResponseDTO response = epwKmsService.encrypt(request);
            long end = System.currentTimeMillis();
            logger.info("encryptUsingAWSKey took {} ms", (end - start));
            return response != null ? response.getEncrypted() : null;
        } catch (Exception ex) {
            logger.error("Failed to encryptUsingAWSKey, plainText:{}, keyId:{}, due to:{}",
                    plainText, keyId, ExceptionUtils.getMessage(ex), ex);
            return null;
        }
    }

    @Override
    public String decryptUsingAWSKey(String cipherText) throws SafePageException {
        if (StringUtils.isEmpty(cipherText)) {
            throw new SafePageException(SafePageErrorType.INVALID_INPUT, "cipherText is required!");
        }

        try {
            long start = System.currentTimeMillis();
            DecryptRequestDTO request = new DecryptRequestDTO(cipherText);
            DecryptResponseDTO response = epwKmsService.decrypt(request);
            long end = System.currentTimeMillis();
            logger.info("decryptUsingAWSKey took {} ms", (end - start));
            return response != null ? response.getDecrypted() : null;
        } catch (Exception ex) {
            logger.error("Failed to decryptUsingAWSKey, cipherText:{}, due to:{}",
                    cipherText, ExceptionUtils.getMessage(ex), ex);
            return null;
        }
    }
}
