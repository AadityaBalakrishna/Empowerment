let's review the task requirements again:
For each invocation of the pcapcacheble send a custom metric to datadog that captures following info
The class on which the caching happened
the method in which the caching happens 
outcome of the caching (success/failure)
The metric will be of type counter.
This is also a great opportunity to learn about observability and specifically the metrics part of it. SLOW DOWN and make sure you understand what you are doing!

this means, there is only one metric, and it has different tages it is capturing right? like the class, the method and the outcome of the caching, let me provide you the example of one other task:
package com.empower.epw.cstmr.sdi.service;

import org.springframework.stereotype.Service;

import com.empower.ihub.candh.common.Metadata;
import com.personalcapital.log.PcapLogger;
import com.personalcapital.log.PcapLoggerFactory;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Metrics;

@Service
public class MetricsService
{
	private static final PcapLogger logger = PcapLoggerFactory.getPcapLogger(MetricsService.class);
	private static final String ENTITY_TYPE = "entity_type";
	private static final String OPERATION = "operation";
	private static final String SOURCE = "source";
	private static final String METRICS_NAME = "epw.cstmr.sdi.event";

	public void incrementSuccess(Metadata metadata)
	{
		logger.debug(
				"Incrementing incrementSuccess metric for entity type: {}, operation: {}, source: {}",
				metadata.getEntityType()
						.name(),
				metadata.getOperation()
						.name(),
				metadata.getSource()
						.name(),
				metadata.getTraceId(), metadata.getSpanId());

		Counter updateCounterSuccess = Metrics.counter(METRICS_NAME, ENTITY_TYPE,
				metadata.getEntityType()
						.name(),
				OPERATION, metadata.getOperation()
						.name(),
				SOURCE, metadata.getSource()
						.name(),
				"result", "success");
		updateCounterSuccess.increment();
	}

	public void incrementFailureForAltIds(Metadata metadata)
	{
		logger.debug(
				"Incrementing incrementFailureForAltIds metric for entity type: {}, operation: {}, source: {}",
				metadata.getEntityType()
						.name(),
				metadata.getOperation()
						.name(),
				metadata.getSource()
						.name(),
				metadata.getTraceId(), metadata.getSpanId());
		Counter updateCounterAltIdsEmpty = Metrics.counter(METRICS_NAME, ENTITY_TYPE,
				metadata.getEntityType()
						.name(),
				OPERATION, metadata.getOperation()
						.name(),
				SOURCE, metadata.getSource()
						.name(),
				"problem", "no-alt-ids");
		updateCounterAltIdsEmpty.increment();
	}

	public void incrementFailureForPersonaEmpty(Metadata metadata)
	{
		logger.debug(
				"Incrementing incrementFailureForPersonaEmpty metric for entity type: {}, operation: {}, source: {}",
				metadata.getEntityType()
						.name(),
				metadata.getOperation()
						.name(),
				metadata.getSource()
						.name(),
				metadata.getTraceId(), metadata.getSpanId());
		Counter updateCounterForPersonaEmpty = Metrics.counter(METRICS_NAME, ENTITY_TYPE,
				metadata.getEntityType()
						.name(),
				OPERATION, metadata.getOperation()
						.name(),
				SOURCE, metadata.getSource()
						.name(),
				"problem", "no-persona");
		updateCounterForPersonaEmpty.increment();
	}

}
see the task description:
Scenarios that we want metrics for:

Address-UPDATE event processed successfully.
DD metric name: epw.cstmr.sdi.event
DD tags: {entity_type:address}, {operation:update}, {source:EASY/REDWOOD}(Want to track the source-system it came from), {result:success}
Address-UPDATE event contains zero entries in the alt_ids array (regardless of whether it is processed successfully or not).
DD metric name: epw.cstmr.sdi.event
DD tags: {entity_type:telephone}, {operation:update}, {source:EASY/REDWOOD} (Want to track the source-system it came from), {problem:no-alt-ids}
Address-UPDATE event can't be processed because related_alt_ids.persona array is empty OR a Persona record cannot be found using an entries in the related_alt_ids.persona array.
DD metric name: epw.cstmr.sdi.event
DD tags: {entity_type:address}, {operation:update}, {source:EASY/REDWOOD} (Want to track the source-system it came from), {problem:no-persona}

TODO

Use MetricsService to increment the counter for these scenarios in your Service/SinkTask layer.
Add BDD tests where applicable to test. Use this pipeline to test -https://pcapeks-jenkins.pcapcloud.com/job/automation/job/PLAT/job/cstmr-bdd/.  Use @TestSpecific tag to test any specific scenario
The code cannot be tested from local, please merge to release branch to test from devtrunk 
Verify the metrics in databog similar to -like this
