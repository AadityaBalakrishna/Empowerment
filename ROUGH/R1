package com.mypersonal.aexpconfig;

import com.mypersonal.aexpconfig.service.DemoService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.core.env.Environment;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(
        properties = {
                "spring.cloud.config.enabled=false",
                "my.custom.value=HelloFromTest"
        })
class LocalProfileTests {

    @Autowired
    private DemoService demoService;

    @Autowired
    private Environment environment;

    @Test
    void testCustomValueFromLocalProfile() {
        assertThat(demoService.getCustomValue())
                .isEqualTo("HelloFromTest");
    }

    @Test
    void testSpringCloudConfigDisabledInLocal() {
        assertThat(environment.getProperty("spring.cloud.config.enabled"))
                .isEqualTo("false");
    }
}

package com.mypersonal.aexpconfig;

import com.mypersonal.aexpconfig.service.DemoService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.core.env.Environment;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(
        properties = {
                "aws.account=dev",
                "identity.stage=devstaging",
                "identity.parentStage=devparent",
                "spring.cloud.config.enabled=true",
                "my.custom.value=FromConfigStoreSimulation"
        })
class ConfigStoreProfileTests {

    @Autowired
    private DemoService demoService;

    @Autowired
    private Environment environment;

    @Test
    void testCustomValueFromConfigStoreSimulation() {
        assertThat(demoService.getCustomValue())
                .isEqualTo("FromConfigStoreSimulation");
    }

    @Test
    void testAwsPropertiesInjected() {
        assertThat(environment.getProperty("aws.account")).isEqualTo("dev");
        assertThat(environment.getProperty("identity.stage")).isEqualTo("devstaging");
        assertThat(environment.getProperty("identity.parentStage")).isEqualTo("devparent");
    }

    @Test
    void testSpringCloudConfigEnabled() {
        assertThat(environment.getProperty("spring.cloud.config.enabled"))
                .isEqualTo("true");
    }
}


package com.mypersonal.aexpconfig;

import com.mypersonal.aexpconfig.service.DemoService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(
        properties = {
                "spring.cloud.config.enabled=false"
                // Notice: no my.custom.value set here
        })
class DefaultValueTests {

    @Autowired
    private DemoService demoService;

    @Test
    void testFallbackDefaultValue() {
        assertThat(demoService.getCustomValue()).isEqualTo("default-value");
    }
}
