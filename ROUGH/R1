package com.personalcapital.profile;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.personalcapital.profile.data.Person;
import com.personalcapital.profile.data.PersonDao;
import com.personalcapital.user.data.UserInfo;
import com.personalcapital.user.data.util.UserDataUtils;
import com.safepage.user.data.User;
import com.safepage.user.data.UserDao;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class TargetPortfolioAccuracyCalculatorTest {

    private static final String USER_NAME = "testqa+test@personalcapital.com";

    private UserDao userDao;
    private UserDataUtils userDataUtils;
    private PersonDao personDao;
    private TargetPortfolioAccuracyCalculator targetPortfolioAccuracyCalculator;

    private User mockUser;
    private UserInfo mockUserInfo;
    private Person mockPerson;

    @BeforeEach
    public void setup() {
        userDao = mock(UserDao.class);
        userDataUtils = mock(UserDataUtils.class);
        personDao = mock(PersonDao.class);
        targetPortfolioAccuracyCalculator = mock(TargetPortfolioAccuracyCalculator.class);

        mockUser = mock(User.class);
        mockUserInfo = mock(UserInfo.class);
        mockPerson = mock(Person.class);

        when(userDao.getUserAssociatedWithEmail(USER_NAME)).thenReturn(mockUser);
        when(userDataUtils.getUserInfoForUser(mockUser)).thenReturn(mockUserInfo);
        when(personDao.getSelfPersonForUser(mockUser)).thenReturn(mockPerson);
        when(targetPortfolioAccuracyCalculator.calculateTargetPortfolioCompletion(
                mockUser, mockPerson, mockUserInfo, false)).thenReturn(0.85);
        when(targetPortfolioAccuracyCalculator.calculateTargetPortfolioCompletion(
                mockUser, mockPerson, mockUserInfo, true)).thenReturn(0.75);
    }

    @Test
    public void testCalculateTargetPortfolioCompletionForCloseToRetirement() {
        User user = userDao.getUserAssociatedWithEmail(USER_NAME);
        assertNotNull(user);

        UserInfo userInfo = userDataUtils.getUserInfoForUser(user);
        assertNotNull(userInfo);

        Person person = personDao.getSelfPersonForUser(user);
        assertNotNull(person);

        Double portfolioCompletion = targetPortfolioAccuracyCalculator
                .calculateTargetPortfolioCompletion(user, person, userInfo, false);

        assertNotNull(portfolioCompletion);
        assertEquals(0.85, portfolioCompletion);
    }

    @Test
    public void testCalculateTargetPortfolioCompletionForNotCloseToRetirement() {
        User user = userDao.getUserAssociatedWithEmail(USER_NAME);
        UserInfo userInfo = userDataUtils.getUserInfoForUser(user);
        Person person = personDao.getSelfPersonForUser(user);

        Double portfolioCompletion = targetPortfolioAccuracyCalculator
                .calculateTargetPortfolioCompletion(user, person, userInfo, true);

        assertNotNull(portfolioCompletion);
        assertEquals(0.75, portfolioCompletion);
    }
}