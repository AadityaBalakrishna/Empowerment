# aexp-config-poc

This repository is a small POC showing how `epw-starter-config-store` (a Spring Cloud Config Client wrapper) is wired into a Spring Boot app.

## What this project contains

* `AexpConfigApplication` — main Spring Boot application. Imports the starter auto-configuration.
* `DemoService` — reads `app.message` via `@Value`.
* Controllers:

  * `HelloController` — `/hello` returns value from `DemoService`.
  * `ConfigStoreInfoController` — `/config-store/info` and `/config-store/debug` expose `ConfigClientProperties`.
  * `StarterBeanController` — lists beans that reference the starter auto-configuration (helpful for debugging).
* `DebugRunner` — small startup runner that prints whether `configClientProperties` is present.
* Tests demonstrating various scenarios (local vs config-store) and unit tests for the starter's behavior.

---

## Key fixes & recommendations applied

1. **Tests updated** so they don't fail when the config-store starter requires `aws.account` and `identity.stage`. Tests either:

   * explicitly provide the required properties when `spring.cloud.config.enabled=true`, or
   * disable the config store (`spring.cloud.config.enabled=false`) for local tests.

2. **`StarterBeanController` improved** to avoid `getBeanDefinition` `NullPointerException` and to reliably detect beans related to the starter by checking bean **types** and bean class names rather than `resourceDescription`.

3. **`ConfigStoreBeanTests` changed** to provide required properties (or use `ApplicationContextRunner`) so they run reliably in CI and local.

4. **Commons Logging conflict**: added guidance to exclude `commons-logging` from transitive dependencies in `pom.xml` if you observe the `spring-jcl` warning.

5. **`bootstrap-local.properties`** is used to run locally (with `spring.cloud.config.enabled=false`) to avoid the `Unable to infer profiles` startup error.

6. **General guidance**: tests should avoid hitting the real external config server. Use `spring.cloud.config.enabled=false` for unit tests, or use `ApplicationContextRunner` to create focused contexts.

---

## How to run locally (recommended)

1. Use the `local` profile or `bootstrap-local.properties`:

```bash
mvn -Dspring-boot.run.profiles=local spring-boot:run
```

This disables the remote config store and uses `app.message` from local properties.

2. Open `http://localhost:8081/hello` (app uses port 8081 by default in these properties) to verify.

---

## Running tests

```
mvn test
```

Notes:

* Unit tests that assert `EpwConfigServiceBootstrapConfiguration` behavior now use `ApplicationContextRunner` where appropriate.
* Integration-style `@SpringBootTest` tests set `spring.cloud.config.enabled=false` unless explicitly testing config-store behavior and then they provide `aws.account` and `identity.stage`.

---

## Important code snippets to paste/replace

### 1) `pom.xml` (commons-logging exclusion guidance)

If you see the `spring-jcl`/commons-logging message, add exclusions where needed, for example:

```xml
<!-- Example: exclude commons-logging from a transitive dependency -->
<dependency>
  <groupId>some.group</groupId>
  <artifactId>some-artifact</artifactId>
  <version>1.2.3</version>
  <exclusions>
    <exclusion>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
    </exclusion>
  </exclusions>
</dependency>
```

Or globally ensure Spring's `spring-jcl` is used (Spring Boot usually handles this).

---

## Notes and troubleshooting

* If you enable config-store (`spring.cloud.config.enabled=true`), you must provide `aws.account` and `identity.stage`. Otherwise the starter throws `IllegalStateException` at startup.
* The starter chooses the external URL by default when `pcsvc.server.useLocalEKSUrl` is not set (because `Boolean.parseBoolean(null)` returns `false`).
* If you need tests that assert the config server URI or profile values, prefer `ApplicationContextRunner` tests to keep them focused and avoid starting the full app.

---

If you'd like, I can now:

* apply the exact code changes (I can provide full file contents you can paste), or
* produce a patch/zip with corrected files.

Tell me how you'd like the fixes delivered (pasteable files inline, or a downloadable zip patch).
