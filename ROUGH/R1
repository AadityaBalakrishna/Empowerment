package com.personalcapital.cache.aop;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.Signature;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;

import com.personalcapital.cache.annotation.PcapMultiCacheable;
import java.util.Collections;

@ExtendWith(MockitoExtension.class)
class ExceptionTest {

    @Mock
    private ProceedingJoinPoint mockPjp;

    @Mock
    private Signature mockSignature;

    @Mock
    private PcapMultiCacheable mockAnnotation;

    @InjectMocks
    @Spy // Spy to track method calls while executing real logic
    private PcapMultiCacheableAdvice cacheAdvice;

    @BeforeEach
    void setUp() {
        // Mock method signature to avoid NullPointerException
        when(mockPjp.getSignature()).thenReturn(mockSignature);
        when(mockSignature.getName()).thenReturn("testMethod");

        // Mock class name retrieval
        when(mockPjp.getTarget()).thenReturn(this);
    }

    @Test
    void testCacheFailureAndEvictionFailureMetrics() throws Throwable {
        // First call throws an exception (triggers cache_failure)
        // Second call returns an empty collection (to allow eviction logic to proceed)
        when(mockPjp.proceed())
            .thenThrow(new RuntimeException("Cache retrieval failed"))  // First call fails
            .thenReturn(Collections.emptyList());  // Second call returns a valid response

        // Execute the method and expect an exception
        assertThrows(RuntimeException.class, () -> cacheAdvice.doMultiCacheable(mockPjp, mockAnnotation));

        // Verify that "failure" metric was logged exactly once
        verify(cacheAdvice, times(1)).publishCacheMetrics(mockPjp, "failure");

        // Verify that "eviction_failure" metric was logged exactly once
        verify(cacheAdvice, times(1)).publishCacheMetrics(mockPjp, "eviction_failure");
    }
}
