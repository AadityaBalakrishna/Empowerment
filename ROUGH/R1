package com.empower.epw.aws.a3.config;

import com.amazonaws.auth.AWSCredentialsProvider;
import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.empower.epw.aws.api.s3.EpwS3Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.util.StringUtils;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.presigner.S3Presigner;

@Configuration
public class EpwS3AutoConfig
{

	private static final Logger logger = LoggerFactory.getLogger(EpwS3AutoConfig.class);
	private static final String DEFAULT_AWS_REGION = "us-west-2";

	public static final String AWS_REGION_KEY = "aws.region";
	public static final String AWS_PROFILE = "aws.profile";

	/**
	 * Creates the single, shared S3Client bean for the application using AWS SDK v2.
	 *
	 * @return A configured S3Client instance.
	 */
	@Bean("epwAwsS3Client")
	@ConditionalOnProperty(name = "epw.aws.s3.sdk-version", havingValue = "v2")
	public S3Client s3Client()
	{
		String awsProfile = System.getProperty(AWS_PROFILE);
		software.amazon.awssdk.auth.credentials.AwsCredentialsProvider credentialsProvider;
		if (StringUtils.hasText(awsProfile))
		{
			logger.info("s: {}", awsProfile);
			credentialsProvider = software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider
					.builder()
					.profileName(awsProfile)
					.build();
		}
		else
		{
			logger.info("Using default AWS credentials provider chain for SDK v2.");
			credentialsProvider = software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider
					.create();
		}

		String awsRegion = System.getProperty(AWS_REGION_KEY, DEFAULT_AWS_REGION);
		logger.info("Creating S3Client for AWS SDK v2 with region: {}", awsRegion);
		return S3Client.builder()
				.credentialsProvider(credentialsProvider)
				.region(software.amazon.awssdk.regions.Region.of(awsRegion))
				.build();
	}

	/**
	 * Creates the single, shared S3Presigner bean for the application using AWS SDK v2.
	 *
	 * @return A configured S3Presigner instance.
	 */
	@Bean("epwS3Presigner")
	@ConditionalOnProperty(name = "epw.aws.s3.sdk-version", havingValue = "v2")
	public S3Presigner s3Presigner()
	{
		logger.info("Creating S3Presigner for AWS SDK v2.");
		return S3Presigner.builder()
				.build();
	}

	/**
	 * Creates the primary EpwS3Service bean using the AWS SDK v2 implementation.
	 *
	 * @param amazonS3Client
	 *            The shared AWS SDK v2 client.
	 * @param s3Presigner
	 *            The S3Presigner for generating pre-signed URLs.
	 * @return The EpwS3ServiceImpl instance for AWS SDK v2.
	 */
	@Bean(name = "epwS3Service")
	@ConditionalOnProperty(name = "epw.aws.s3.sdk-version", havingValue = "v2")
	public com.empower.epw.aws.v2.s3.EpwS3ServiceImpl awsS3ServiceV2(
			@Qualifier("epwAwsS3Client") S3Client amazonS3Client,
			@Qualifier("epwS3Presigner") S3Presigner s3Presigner)
	{
		logger.info("Creating EpwS3Service bean for AWS SDK v2.");
		return new com.empower.epw.aws.v2.s3.EpwS3ServiceImpl(amazonS3Client, s3Presigner);
	}

	/**
	 * Creates the single, shared AmazonS3 client bean for the application using AWS SDK v1.
	 *
	 * @return A configured AmazonS3 instance.
	 */
	@Bean("epwAmazonS3Client")
	@ConditionalOnProperty(name = "epw.aws.s3.sdk-version", havingValue = "v1", matchIfMissing = true)
	public AmazonS3 amazonS3Client()
	{
		String awsRegion = System.getProperty(AWS_REGION_KEY, DEFAULT_AWS_REGION);
		String awsProfile = System.getProperty(AWS_PROFILE);
		AWSCredentialsProvider credentialsProvider;
		if (StringUtils.hasText(awsProfile))
		{
			logger.info("Using AWS profile for AWS SDK v1: {}", awsProfile);
			credentialsProvider = new ProfileCredentialsProvider(awsProfile);
		}
		else
		{
			logger.info("Using default AWS credentials provider chain.");
			credentialsProvider = DefaultAWSCredentialsProviderChain.getInstance();
		}
		logger.info("Creating AmazonS3 client with region for AWS SDK v1: {}", awsRegion);
		return AmazonS3ClientBuilder.standard()
				.withCredentials(credentialsProvider)
				.withRegion(awsRegion)
				.build();
	}

	/**
	 * Creates the primary EpwS3Service bean using the AWS SDK v1 implementation.
	 *
	 * @param amazonS3Client
	 *            The shared AWS SDK v1 client.
	 * @return The EpwS3ServiceImpl instance.
	 */
	@Bean(name = "epwS3Service")
	@ConditionalOnProperty(name = "epw.aws.s3.sdk-version", havingValue = "v1", matchIfMissing = true)
	public EpwS3Service awsS3ServiceV1(@Qualifier("epwAmazonS3Client") AmazonS3 amazonS3Client)
	{
		logger.info("Creating EpwS3Service bean for AWS SDK v1.");
		return new com.empower.epw.aws.v1.s3.EpwS3ServiceImpl(amazonS3Client);
	}

}

can you use EpwS3AutoConfig as the template to refactor my autoconfig:
package com.empower.epw.aws.kms.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.util.StringUtils;

import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.services.kms.AWSKMS;
import com.amazonaws.services.kms.AWSKMSClientBuilder;
import com.empower.epw.aws.api.kms.EpwKmsService;
import software.amazon.awssdk.services.kms.KmsClient;

@Configuration
public class EpwKmsAutoConfig {

	private static final Logger logger = LoggerFactory.getLogger(EpwKmsAutoConfig.class);

	@Value("${aws.region:us-west-2}")
	private String awsRegion;

	@Value("${aws.profile:}")
	private String awsProfile;

	/**
     * AWS SDK v2 credentials provider bean.
	 */
	@Bean
	@ConditionalOnProperty(name = "epw.aws.kms.sdk-version", havingValue = "v2")
	@ConditionalOnMissingBean(software.amazon.awssdk.auth.credentials.AwsCredentialsProvider.class)
	public software.amazon.awssdk.auth.credentials.AwsCredentialsProvider awsCredentialsProviderV2() {
		if (StringUtils.hasText(awsProfile)) {
			logger.info("[KMS v2] Using AWS profile: {}", awsProfile);
			return software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider.builder()
					.profileName(awsProfile)
					.build();
		} else {
			logger.info("[KMS v2] Using DefaultCredentialsProvider.");
			return software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider.create();
		}
	}

	/**
	 * AWS SDK v1 credentials provider bean.
	 */
	@Bean
	@ConditionalOnProperty(name = "epw.aws.kms.sdk-version", havingValue = "v1", matchIfMissing = true)
	@ConditionalOnMissingBean(com.amazonaws.auth.AWSCredentialsProvider.class)
	public com.amazonaws.auth.AWSCredentialsProvider awsCredentialsProviderV1() {
		if (StringUtils.hasText(awsProfile)) {
			logger.info("[KMS v1] Using AWS profile: {}", awsProfile);
			return new ProfileCredentialsProvider(awsProfile);
		} else {
			logger.info("[KMS v1] Using DefaultAWSCredentialsProviderChain.");
			return DefaultAWSCredentialsProviderChain.getInstance();
		}
	}

	/**
	 * AWS SDK v2 KMS Client
	 */
	@Bean(name = "kmsClientV2")
	@ConditionalOnProperty(name = "epw.aws.kms.sdk-version", havingValue = "v2")
	@ConditionalOnMissingBean(KmsClient.class)
	public KmsClient kmsClient(software.amazon.awssdk.auth.credentials.AwsCredentialsProvider credentialsProvider) {
		logger.info("[KMS v2] Creating KmsClient with region: {}", awsRegion);
		return KmsClient.builder()
				.credentialsProvider(credentialsProvider)
				.region(software.amazon.awssdk.regions.Region.of(awsRegion))
				.build();
	}

	/**
	 * AWS SDK v1 KMS Client
	 */
	@Bean(name = "kmsClientV1")
	@ConditionalOnProperty(name = "epw.aws.kms.sdk-version", havingValue = "v1", matchIfMissing = true)
	@ConditionalOnMissingBean(AWSKMS.class)
	public AWSKMS awsKmsClient(com.amazonaws.auth.AWSCredentialsProvider credentialsProvider) {
		logger.info("KMS v1] Creating AWSKMS client with region: {}", awsRegion);
		return AWSKMSClientBuilder.standard()
				.withCredentials(credentialsProvider)
				.withRegion(awsRegion)
				.build();
	}

	@Bean
	@Primary
	@ConditionalOnProperty(name = "epw.aws.kms.sdk-version", havingValue = "v1", matchIfMissing = true)
	public EpwKmsService epwKmsServiceV1(AWSKMS awsKmsClient) {
		logger.info("[KMS v1] Using EpwKmsServiceImpl (SDK v1).");
		return new com.empower.epw.aws.v1.kms.EpwKmsServiceImpl(awsKmsClient);
	}

	@Bean
	@Primary
	@ConditionalOnProperty(name = "epw.aws.kms.sdk-version", havingValue = "v2")
	public EpwKmsService epwKmsServiceV2(KmsClient kmsClient) {
		logger.info("[KMS v2] Using EpwKmsServiceImpl (SDK v2).");
		return new com.empower.epw.aws.v2.kms.EpwKmsServiceImpl(kmsClient);
	}
}
