package com.personalcapital.cache.aop;

import java.util.Arrays;

import io.micrometer.core.instrument.Metrics;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.Signature;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.MockedStatic;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class PcapMultiCacheableAdviceTest
{
	private PcapMultiCacheableAdvice cacheAdvice;
	private SimpleMeterRegistry meterRegistry;

	@BeforeEach
	void setUp()
	{
		meterRegistry = new SimpleMeterRegistry();
		Metrics.addRegistry(meterRegistry);
		cacheAdvice = new PcapMultiCacheableAdvice();
	}

	@Test
	void testRecordCachingMetric()
	{
		ProceedingJoinPoint pjp = mock(ProceedingJoinPoint.class);
		Signature mockSignature = mock(Signature.class);

		PcapMultiCacheableAdvice advice = new PcapMultiCacheableAdvice();
		when(pjp.getTarget()).thenReturn(advice);
		when(pjp.getSignature()).thenReturn(mockSignature);
		when(pjp.getSignature()
				.getName()).thenReturn("testMethod");

		try (MockedStatic<Metrics> mockedMetrics = mockStatic(Metrics.class))
		{
			Counter mockCounter = mock(Counter.class);
			mockedMetrics.when(() -> Metrics.counter(anyString(), any(String[].class)))
					.thenReturn(mockCounter);
			cacheAdvice.publishCacheMetrics(pjp, "miss");

			ArgumentCaptor<String> metricName = ArgumentCaptor.forClass(String.class);
			ArgumentCaptor<String[]> tagsSenttoDatadog = ArgumentCaptor.forClass(String[].class);

			mockedMetrics.verify(
					() -> Metrics.counter(metricName.capture(), tagsSenttoDatadog.capture()));

			assertEquals("pcap.cache.event", metricName.getValue());
			verify(mockCounter, times(1)).increment();

			System.out.println("Metric Captured Successfully: " + metricName.getValue());
			System.out.println("Captured Tags: " + Arrays.toString(tagsSenttoDatadog.getValue()));
		}
	}
}

can you add this new exception case testing in the same test class, and simplyfy the test class
