new impl:
package com.empower.epw.aws.api.kms;

import com.empower.epw.aws.api.kms.dto.DecryptRequestDTO;
import com.empower.epw.aws.api.kms.dto.DecryptResponseDTO;
import com.empower.epw.aws.api.kms.dto.DescribeKeyResponseDTO;
import com.empower.epw.aws.api.kms.dto.EncryptRequestDTO;
import com.empower.epw.aws.api.kms.dto.EncryptResponseDTO;
import com.empower.epw.aws.api.kms.dto.ListAliasesResponseDTO;
import com.safepage.exception.SafePageException;

/**
 * {@code EpwKmsService} provides an abstraction over AWS Key Management Service (KMS) operations,
 * supporting encryption, decryption, key description, and alias listing.
 *
 * <p>Implementations of this interface (e.g., using AWS SDK v1 or v2) allow consumers
 * to securely manage cryptographic keys and perform key-related operations in a version-agnostic way.
 */
public interface EpwKmsService {

	/**
	 * Encrypts the given plaintext using the specified KMS key.
	 *
	 * @param request the encryption request containing plaintext and keyId
	 * @return a response containing the Base64-encoded ciphertext
	 * @throws SafePageException if the request is invalid or encryption fails
	 */
	EncryptResponseDTO encrypt(EncryptRequestDTO request) throws SafePageException;

	/**
	 * Decrypts the given ciphertext using KMS.
	 *
	 * @param request the decryption request containing the Base64-encoded ciphertext
	 * @return a response containing the decrypted plaintext string
	 * @throws SafePageException if the request is invalid or decryption fails
	 */
	DecryptResponseDTO decrypt(DecryptRequestDTO request) throws SafePageException;

	/**
	 * Describes a KMS key using its keyId or alias.
	 *
	 * @param keyId the keyId or alias to describe
	 * @return metadata and status information about the KMS key
	 * @throws SafePageException if the key cannot be found or described
	 */
	DescribeKeyResponseDTO describeKey(String keyId) throws SafePageException;

	/**
	 * Lists all KMS key aliases in the current AWS region.
	 *
	 * @return a response containing a list of key aliases and their associated key IDs
	 * @throws SafePageException if alias listing fails
	 */
	ListAliasesResponseDTO listAliases() throws SafePageException;

	String getAwsSdkVersion();
}

old impl:
package com.safepage.security.service;

import com.amazonaws.services.kms.model.DescribeKeyResult;
import com.amazonaws.services.kms.model.ListAliasesResult;
import com.safepage.exception.SafePageException;

/**
 * Using AWS KMS to store our Master Key, which is called "Customer master key (CMK)". This class
 * will be used to Encrypt/Decrypt System Secondary keys (in db) under customer master key.
 * 
 * @author dizadi
 * @since 01/28/2019
 */
public interface KMSService
{
	/**
	 * The Encrypt operation is designed to encrypt data keys, but it is not frequently used.
	 * 
	 * @param plainDataKey
	 * @return
	 */
	public String encryptUsingAWSKey(String plainText, String keyId) throws SafePageException;

	/**
	 * To decrypt data keys
	 * 
	 * @param cipheredDataKey
	 * @return
	 */
	public String decryptUsingAWSKey(String cipherText) throws SafePageException;

	public ListAliasesResult getKeyAliases(String awsCmkKeyAlias);

	public DescribeKeyResult describeKey(String awsCmkKeyAlias);
}


any changes in this that could break the flow? also why can't i use the same encryptUsingAWSKey and decryptUsingAWSKey method for both the AWS SDK KMS v1 impl of this service and AWS SDK KMS v2 impl of this service instead of creating those DTOs
