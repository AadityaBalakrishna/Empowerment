@Test
void testPublishCacheMetrics_DataMismatch() throws Throwable {
    ProceedingJoinPoint pjp = mockProceedingJoinPoint();
    PcapMultiCacheableAdvice spyAdvice = spy(cacheAdvice);

    // ✅ Simulate a scenario where the database returns fewer/more elements than expected
    List<String> cacheKeys = Arrays.asList("key1", "key2", "key3");  // Expected keys in cache
    List<String> dbResults = Arrays.asList("key1", "key2");  // DB returns fewer elements (Mismatch!)

    when(pjp.proceed()).thenReturn(dbResults); // Simulate DB returning incorrect data

    try (MockedStatic<Metrics> mockedMetrics = mockStatic(Metrics.class)) {
        Counter mockCounter = mock(Counter.class);
        mockedMetrics.when(() -> Metrics.counter(anyString(), any(String[].class))).thenReturn(mockCounter);

        try {
            spyAdvice.doMultiCacheable(pjp, mockPcapMultiCacheable());
        } catch (Exception ignored) { }

        // ✅ Verify that `publishCacheMetrics` logs "data_mismatch"
        verify(spyAdvice, times(1)).publishCacheMetrics(eq(pjp), eq("data_mismatch"));
        verify(mockCounter, times(1)).increment();
        verifyMetricsLogging(mockedMetrics, "data_mismatch");
    }
}
