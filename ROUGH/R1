package com.personalcapital.cache.aop;

import com.personalcapital.cache.annotation.PcapMultiCacheable;
import com.personalcapital.cache.annotation.RedisType;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Metrics;
import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.Signature;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.redisson.api.RBucket;
import org.redisson.api.RedissonClient;

import java.util.Arrays;
import java.util.Collections;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class PcapMultiCacheableAdviceMetricsTest {

    private PcapMultiCacheableAdvice cacheAdvice;
    private SimpleMeterRegistry meterRegistry;
    private RedissonClient redissonClient;
    private RBucket<Object> mockBucket;
    private PcapMultiCacheable mockAnnotation;

    @BeforeEach
    void setUp() {
        meterRegistry = new SimpleMeterRegistry();
        Metrics.addRegistry(meterRegistry);
        cacheAdvice = new PcapMultiCacheableAdvice();

        redissonClient = mock(RedissonClient.class);
        mockBucket = mock(RBucket.class);
        when(redissonClient.getBucket(anyString())).thenReturn(mockBucket);

        // Mock the annotation
        mockAnnotation = mock(PcapMultiCacheable.class);
        when(mockAnnotation.value()).thenReturn("testCache");
        when(mockAnnotation.keys()).thenReturn(new int[]{0});
        when(mockAnnotation.keyPrefix()).thenReturn("prefix");
        when(mockAnnotation.redisType()).thenReturn(RedisType.SIMPLE);
    }

    @Test
    void testCacheHitMetricThroughDoMultiCacheable() throws Throwable {
        ProceedingJoinPoint pjp = mockProceedingJoinPoint();
        when(mockBucket.get()).thenReturn("cachedValue"); // Simulate cache hit

        try (MockedStatic<Metrics> mockedMetrics = Mockito.mockStatic(Metrics.class)) {
            Counter mockCounter = mock(Counter.class);
            mockedMetrics.when(() -> Metrics.counter(anyString(), any(String[].class))).thenReturn(mockCounter);

            Object result = cacheAdvice.doMultiCacheable(pjp, mockAnnotation);

            assertNotNull(result);
            assertEquals("cachedValue", result); // Ensures cache hit returns correct data

            mockedMetrics.verify(() -> Metrics.counter("pcap.cache.event", "class", "PcapMultiCacheableAdvice",
                    "method", "testMethod", "outcome", "hit"), times(1));

            verify(mockCounter, times(1)).increment();
        }
    }

    private ProceedingJoinPoint mockProceedingJoinPoint() {
        ProceedingJoinPoint pjp = mock(ProceedingJoinPoint.class);
        Signature mockSignature = mock(Signature.class);
        when(pjp.getTarget()).thenReturn(cacheAdvice);
        when(pjp.getSignature()).thenReturn(mockSignature);
        when(mockSignature.getName()).thenReturn("testMethod");
        when(pjp.getArgs()).thenReturn(new Object[]{Collections.singletonList("key1")});
        return pjp;
    }
}
