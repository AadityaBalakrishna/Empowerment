package com.safepage.security.service.impl;

import com.empower.epw.aws.api.kms.EpwKmsService;
import com.empower.epw.aws.api.kms.exception.KMSOperationException;
import com.safepage.exception.SafePageException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class KMSServiceImplTest {

    private KMSServiceImpl kmsService;
    private EpwKmsService mockEpwKmsService;

    @BeforeEach
    void setUp() {
        mockEpwKmsService = mock(EpwKmsService.class);
        kmsService = new KMSServiceImpl(mockEpwKmsService);
    }

    // ---------- ENCRYPT ----------

    @Test
    void testEncryptUsingAWSKey_Success() throws SafePageException {
        String plainText = "hello";
        String keyId = "testKeyId";
        String expectedCipherText = "cipherText123";

        when(mockEpwKmsService.encryptUsingAWSKey(plainText, keyId)).thenReturn(expectedCipherText);

        String result = kmsService.encryptUsingAWSKey(plainText, keyId);

        assertEquals(expectedCipherText, result);
        verify(mockEpwKmsService, times(1)).encryptUsingAWSKey(plainText, keyId);
    }

    @Test
    void testEncryptUsingAWSKey_InvalidPlainText() {
        SafePageException ex = assertThrows(SafePageException.class,
                () -> kmsService.encryptUsingAWSKey("", "keyId"));

        assertEquals("plainText is required!", ex.getMessage());
        verifyNoInteractions(mockEpwKmsService);
    }

    @Test
    void testEncryptUsingAWSKey_InvalidKeyId() {
        SafePageException ex = assertThrows(SafePageException.class,
                () -> kmsService.encryptUsingAWSKey("hello", ""));

        assertEquals("keyId is required!", ex.getMessage());
        verifyNoInteractions(mockEpwKmsService);
    }

    @Test
    void testEncryptUsingAWSKey_ExceptionFromDelegate_ReturnsNull() throws SafePageException {
        when(mockEpwKmsService.encryptUsingAWSKey("hello", "keyId"))
                .thenThrow(new KMSOperationException("boom", new RuntimeException()));

        String result = kmsService.encryptUsingAWSKey("hello", "keyId");

        assertNull(result);
        verify(mockEpwKmsService, times(1)).encryptUsingAWSKey("hello", "keyId");
    }

    // ---------- DECRYPT ----------

    @Test
    void testDecryptUsingAWSKey_Success() throws SafePageException {
        when(mockEpwKmsService.decryptUsingAWSKey("cipherText123")).thenReturn("hello");

        String result = kmsService.decryptUsingAWSKey("cipherText123");

        assertEquals("hello", result);
        verify(mockEpwKmsService, times(1)).decryptUsingAWSKey("cipherText123");
    }

    @Test
    void testDecryptUsingAWSKey_InvalidCipherText() {
        SafePageException ex = assertThrows(SafePageException.class,
                () -> kmsService.decryptUsingAWSKey(""));

        assertEquals("cipherText is required!", ex.getMessage());
        verifyNoInteractions(mockEpwKmsService);
    }

    @Test
    void testDecryptUsingAWSKey_ExceptionFromDelegate_ReturnsNull() throws SafePageException {
        when(mockEpwKmsService.decryptUsingAWSKey("cipherText123"))
                .thenThrow(new KMSOperationException("boom", new RuntimeException()));

        String result = kmsService.decryptUsingAWSKey("cipherText123");

        assertNull(result);
        verify(mockEpwKmsService, times(1)).decryptUsingAWSKey("cipherText123");
    }

    // ---------- DESCRIBE KEY ----------

    @Test
    void testDescribeKey_Success() {
        String keyId = "testKeyId";
        String expected = "KeyMetadata";

        when(mockEpwKmsService.describeKey(keyId)).thenReturn(expected);

        String result = kmsService.describeKey(keyId);

        assertEquals(expected, result);
        verify(mockEpwKmsService, times(1)).describeKey(keyId);
    }

    @Test
    void testDescribeKey_ExceptionFromDelegate_ReturnsNull() {
        when(mockEpwKmsService.describeKey("testKeyId"))
                .thenThrow(new KMSOperationException("boom", new RuntimeException()));

        String result = kmsService.describeKey("testKeyId");

        assertNull(result);
        verify(mockEpwKmsService, times(1)).describeKey("testKeyId");
    }

    // ---------- GET KEY ALIASES ----------

    @Test
    void testGetKeyAliases_Success() {
        String expected = "alias/my-key";

        when(mockEpwKmsService.getKeyAliases()).thenReturn(expected);

        String result = kmsService.getKeyAliases();

        assertEquals(expected, result);
        verify(mockEpwKmsService, times(1)).getKeyAliases();
    }

    @Test
    void testGetKeyAliases_ExceptionFromDelegate_ReturnsNull() {
        when(mockEpwKmsService.getKeyAliases())
                .thenThrow(new KMSOperationException("boom", new RuntimeException()));

        String result = kmsService.getKeyAliases();

        assertNull(result);
        verify(mockEpwKmsService, times(1)).getKeyAliases();
    }
}
