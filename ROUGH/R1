package com.empower.epw.service.account.grpc;

import java.util.Date;
import java.util.EnumSet;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.empower.account.service.BaseProcessServiceIntegrationTest;
import com.empower.epw.account.common.dto.account.AccountDTO;
import com.personalcapital.user.data.AggregatedUserTransaction;
import com.personalcapital.user.data.impl.AccountNumberData;
import com.personalcapital.user.data.impl.AccountRoutingNumberData;
import com.safepage.user.data.Account;
import com.safepage.user.data.SiteCredentials;
import com.safepage.user.data.UserProduct;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertTrue;

@ExtendWith(SpringExtension.class)
public class AccountGrpcBatchProcessServiceIntegrationTest extends BaseProcessServiceIntegrationTest
{
	private static final String[] IGNORED_ENTITY_FIELDS = new String[]
	{
			"id", "siteInstructionsString", "instructionsJSON",
			// objects
			"accountDetailsFactory", "jsonedDetail", "lastCalculatedBalanceDate"
	};

	@Test
	public void getAccount_whenUserAccountExist_invokeAccountGRPCService()
	{
		Account actualAccount = accountBatchProcessService.getAccount(userAccountGrpc.getId());
		assertThat(actualAccount).usingRecursiveComparison()
				.ignoringFields(IGNORED_ENTITY_FIELDS)
				.isEqualTo(account);
	}

	@Test
	public void getAccounts_whenUserAccountExist_invokeAccountGRPCService()
	{
		List<Account> actualAccounts = accountBatchProcessService
				.getAccounts(List.of(userAccountGrpc.getId()));
		checkOnAccountList(actualAccounts, account);
	}

	@Test
	public void getAccountByUserIds_whenUserAccountExist_invokeAccountGRPCService()
	{
		List<Account> actualAccounts = accountBatchProcessService
				.getAccountByUserIds(List.of(userId));
		checkOnAccountList(actualAccounts, account);
	}

	@Test
	public void getUserAccountsIncludingClosedByUserIds_whenUserAccountExist_invokeAccountGRPCService()
	{
		List<Account> actualAccounts = accountBatchProcessService
				.getUserAccountsIncludingClosedByUserIds(List.of(userId),
						EnumSet.of(productGrpc.getType()));
		assertThat(actualAccounts.size()).isGreaterThan(0);
		checkOnAccountList(actualAccounts, account);

	}

	@Test
	public void getAccountsIncludingCloseAndLasModified_whenUserAccountExist_invokeAccountGRPCService()
	{
		List<Account> actualAccounts = accountBatchProcessService
				.getAccountsIncludingCloseAndLasModified(List.of(userId),
						userAccountGrpc.getUpdatedDate());

		assertThat(actualAccounts.size()).isGreaterThan(0);
		checkOnAccountList(actualAccounts, account);
	}

	@Test
	public void validateAdditionalAttributes_encryptionAndDecryption()
	{
		Account actualAccount = accountBatchProcessService.getAccount(userAccountGrpc.getId());
		actualAccount.setAdditionalAttributes("AdditionalAttributes", user);
		assertThat(actualAccount.getAdditionalAttributes(user)).isEqualTo("AdditionalAttributes");
	}

	@Test
	public void validateRawCredentials_encryptionAndDecryption()
	{
		AccountDTO actualAccount = (AccountDTO) accountBatchProcessService
				.getAccount(userAccountGrpc.getId());
		SiteCredentials siteCredentials = new SiteCredentials();
		siteCredentials.put("credentials", "123456");
		actualAccount.setRawCredentials(siteCredentials, user);
		SiteCredentials actualRawCredentials = actualAccount.getRawCredentials(user);
		assertThat(actualRawCredentials.get("credentials"))
				.isEqualTo(siteCredentials.get("credentials"));
	}

	@Test
	public void validatePershingAccountNumber_encryptionAndDecryption()
	{
		AccountDTO actualAccount = (AccountDTO) accountBatchProcessService
				.getAccount(userAccountGrpc.getId());
		actualAccount.setPershingAccountNumber("3100-4200-2100", user);
		String pershingAccountNumber = actualAccount.getPershingAccountNumber(user);
		assertThat(pershingAccountNumber).isEqualTo("3100-4200-2100");
	}

	@Test
	public void validateAccountRoutingNumberData_encryptionAndDecryption()
	{
		AccountDTO actualAccount = (AccountDTO) accountBatchProcessService
				.getAccount(userAccountGrpc.getId());
		AccountRoutingNumberData accountRoutingNumberData = new AccountRoutingNumberData();
		accountRoutingNumberData.setName("EPW Account");
		accountRoutingNumberData.setSource("yodlee");
		actualAccount.saveAccountRoutingNumberData(user, accountRoutingNumberData);
		AccountRoutingNumberData actualData = actualAccount.getAccountRoutingNumberData(user);
		assertThat(actualData).usingRecursiveComparison()
				.ignoringFields("lastUpdated")
				.isEqualTo(accountRoutingNumberData);
	}

	@Test
	public void getAdvisoryFeeBaseHeaders_whenValidUserId_returnAggregatedUserTransaction()
	{
		List<Long> userIds = List.of(userId);
		Date toDate = new Date();
		List<AggregatedUserTransaction> aggregatedUserTransactions = accountBatchProcessService
				.getAdvisoryFeeBaseHeaders(userIds, toDate);
		assertThat(aggregatedUserTransactions).isNotEmpty();
	}

	public static void checkOnAccountList(List<Account> accounts, Account account)
	{
		boolean checked = false;
		for (Account accountExpected : accounts)
		{
			if (accountExpected.getUserAccountId()
					.equals(account.getUserAccountId()))
			{
				assertThat(accountExpected).isEqualTo(account);
				checked = true;
			}

		}

		assertTrue(checked);
	}
}

this is the test class that is failling completely
