following the template of what exists already in readme file, can you write one for me for , #### Bean Selection Priority for KMS Service?

#### Bean Selection Priority for S3 Service
1. **SDK Version-Specific Beans**

- When epw.aws.s3.sdk-version=v2:
    - Creates SDK v2 beans (S3Client, S3Presigner).
    - Creates EpwS3ServiceImpl for v2.
- When not set or epw.aws.s3.sdk-version=v1:
    - Creates SDK v1 beans (AmazonS3).
    - Creates EpwS3ServiceImpl for v1.
2. **Qualifier Usage**
- Uses `@Qualifier` annotations to differentiate between SDK v1 and v2 beans.
- Explicitly uses @Qualifier to inject the correct beans:
    - @Qualifier("epwAwsS3Client") for the AWS SDK v2 S3 client.
    - @Qualifier("epwS3Presigner") for the AWS SDK v2 presigner.
    - @Qualifier("epwAmazonS3Client") for the AWS SDK v1 S3 client.

#### Bean Selection Priority for SQS
1. **Consumer-Defined Beans (Highest Priority)**
   If application defines its own beans with @Bean, they take precedence

2. **SDK Version-Specific Beans (Medium Priority)**
   - When `epw.aws.sqs.sdk-version=v2` :
     - Creates SDK v2 beans (`SQSClient`, `SQSAsyncClient`)
     - Creates `EpwSQSServiceAsyncImpl` and `EpwSQSServiceAsyncImpl` for v2
   - When not set or `epw.aws.sqs.sdk-version=v1` :
      - Creates SDK v1 beans (`AmazonSQS`, `AmazonSQSAsync`)
      - Creates `EpwSQSServiceImpl` and `EpwSQSServiceAsyncImpl` for v1 
3. **Default Fallback (Lowest Priority)**
   - If no property set, defaults to SDK v1

#### Following beans are created irrespective of v1 or v2
 - `ThreadPoolExecutor` bean is required for `SQSAsyncClient` or `AmazonSQSAsync` bean regardless of the AWS SDK version.


here the code:
package com.empower.epw.aws.kms.config;

import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.services.kms.AWSKMS;
import com.amazonaws.services.kms.AWSKMSClientBuilder;
import com.empower.epw.aws.api.kms.EpwKmsService;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.autoconfigure.condition.*;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.util.StringUtils;

import software.amazon.awssdk.services.kms.KmsClient;

/**
 * Auto-configuration for AWS KMS clients and services.
 *
 * <p>This configuration class provides beans for AWS Key Management Service (KMS) clients
 * and services, supporting both AWS SDK v1 and v2. The desired SDK version can be specified
 * using the property {@code epw.aws.kms.sdk-version}. If no version is specified, the v1
 * implementation is used by default.</p>
 *
 * <p>Beans are conditionally created based on the specified SDK version, and credentials
 * are configured using either the AWS profile or the default credentials provider chain.</p>
 */
@Configuration
public class EpwKmsAutoConfig {

	private static final Logger logger = LoggerFactory.getLogger(EpwKmsAutoConfig.class);
	private static final String DEFAULT_AWS_REGION = "us-west-2";

	public static final String AWS_REGION_KEY = "aws.region";
	public static final String AWS_PROFILE = "aws.profile";

	/**
	 * Creates a KMS client for AWS SDK v2.
	 *
	 * <p>This bean is created only if the property {@code epw.aws.kms.sdk-version} is set to {@code v2}.
	 * The client is configured with credentials from either the specified AWS profile or the default
	 * credentials provider chain, and the region is determined from the {@code aws.region} property.</p>
	 *
	 * @return A configured {@link KmsClient} instance for AWS SDK v2.
	 */
	@Bean("epwKmsClient")
	@ConditionalOnProperty(name = "epw.aws.kms.sdk-version", havingValue = "v2")
	@ConditionalOnMissingBean(KmsClient.class)
	public KmsClient kmsClient(){
		String awsProfile = System.getProperty(AWS_PROFILE);
		software.amazon.awssdk.auth.credentials.AwsCredentialsProvider credentialsProvider;
		if (StringUtils.hasText(awsProfile)){
			logger.info("Using AWS profile for AWS SDK v2: {}", awsProfile);
			credentialsProvider = software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider
					.builder()
					.profileName(awsProfile)
					.build();
		}
		else {
			logger.info("Using default AWS credentials provider chain for SDK v2.");
			credentialsProvider = software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider
					.create();
		}

		String awsRegion = System.getProperty(AWS_REGION_KEY, DEFAULT_AWS_REGION);
		logger.info("Creating KmsClient for AWS SDK v2 with region: {}", awsRegion);
		return KmsClient.builder()
				.credentialsProvider(credentialsProvider)
				.region(software.amazon.awssdk.regions.Region.of(awsRegion))
				.build();
	}

	/**
	 * Creates the primary EpwKmsService bean using the AWS SDK v2 implementation.
	 *
	 * @param kmsClient The shared AWS SDK v2 client.
	 * @return The EpwKmsServiceImpl instance for AWS SDK v2.
	 */
	@Bean(name = "epwKmsService")
	@Primary
	@ConditionalOnProperty(name = "epw.aws.kms.sdk-version", havingValue = "v2")
	public EpwKmsService epwKmsServiceV2(KmsClient kmsClient) {
		logger.info("Creating EpwKmsServiceImpl bean for AWS SDK v2");
		return new com.empower.epw.aws.v2.kms.EpwKmsServiceImpl(kmsClient);
	}

	/**
	 * Creates an AWS KMS client for AWS SDK v1.
	 *
	 * <p>This bean is created only if the property {@code epw.aws.kms.sdk-version} is set to {@code v1}
	 * or is not specified. The client is configured with credentials from either the specified AWS profile
	 * or the default credentials provider chain, and the region is determined from the {@code aws.region} property.</p>
	 *
	 * @return A configured {@link AWSKMS} instance for AWS SDK v1.
	 */
	@Bean(name = "epwAWSKMSClient")
	@ConditionalOnProperty(name = "epw.aws.kms.sdk-version", havingValue = "v1", matchIfMissing = true)
	@ConditionalOnMissingBean(AWSKMS.class)
	public AWSKMS awsKmsClient() {
		String awsRegion = System.getProperty(AWS_REGION_KEY, DEFAULT_AWS_REGION);
		String awsProfile = System.getProperty(AWS_PROFILE);
		com.amazonaws.auth.AWSCredentialsProvider credentialsProvider;
		if (StringUtils.hasText(awsProfile)) {
			logger.info("Using AWS profile for AWS SDK v1: {}", awsProfile);
			credentialsProvider = new ProfileCredentialsProvider(awsProfile);
		} else {
			logger.info("Using default AWS credentials provider chain.");
			credentialsProvider = DefaultAWSCredentialsProviderChain.getInstance();
		}
		logger.info("Creating AWSKMS client with region for AWS SDK v1: {}", awsRegion);
		return AWSKMSClientBuilder.standard()
				.withCredentials(credentialsProvider)
				.withRegion(awsRegion)
				.build();
	}

	/**
	 * Creates the primary EpwKmsService bean using the AWS SDK v1 implementation.
	 *
	 * @param awsKmsClient The shared AWS SDK v1 client.
	 * @return The EpwKmsServiceImpl instance for AWS SDK v1.
	 */
	@Bean(name = "epwKmsService")
	@Primary
	@ConditionalOnProperty(name = "epw.aws.kms.sdk-version", havingValue = "v1", matchIfMissing = true)
	public EpwKmsService epwKmsServiceV1(AWSKMS awsKmsClient) {
		logger.info("Creating EpwKmsService bean for AWS SDK v1.");
		return new com.empower.epw.aws.v1.kms.EpwKmsServiceImpl(awsKmsClient);
	}
}

