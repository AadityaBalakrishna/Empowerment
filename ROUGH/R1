package com.personalcapital.cache.aop;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.List;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.aspectj.lang.ProceedingJoinPoint;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit5.PowerMockExtension;
import org.powermock.reflect.Whitebox;

import com.personalcapital.cache.annotation.RedisType;
import com.personalcapital.cache.aop.support.CacheKeyProvider;
import com.personalcapital.log.PcapLogger;
import com.personalcapital.log.PcapLoggerFactory;

@ExtendWith(PowerMockExtension.class)  // Enable PowerMockito
@PrepareForTest({PcapMultiCacheableAdvice.class, PcapLoggerFactory.class})  // Prepare class for modification
class ExceptionTest {

    @Mock
    private ProceedingJoinPoint mockPjp;

    @Mock
    private CacheKeyProvider mockCacheKeyProvider;

    @Mock
    private PcapLogger mockLogger;  // Mocking the logger

    @InjectMocks
    private PcapMultiCacheableAdvice advice;

    @BeforeEach
    void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);

        // Replace the static final logger with our mock
        Whitebox.setInternalState(PcapMultiCacheableAdvice.class, "logger", mockLogger);
    }

    @Test
    void testEvictionFailureLogsProperly() throws Throwable {
        // Mock values
        RedisType redisType = RedisType.DEFAULT;
        List<String> keys = List.of("testKey1", "testKey2");

        when(mockPjp.toShortString()).thenReturn("sampleMethod()");

        // Spy on the actual advice instance
        PcapMultiCacheableAdvice spyAdvice = spy(advice);

        // Force evictFromRedis to throw an exception
        doThrow(new RuntimeException("Forced eviction failure")).when(spyAdvice).evictFromRedis(redisType, keys);

        try {
            spyAdvice.evictFromRedis(redisType, keys);
        } catch (Exception ex) {
            // Verify that the exception was logged
            verify(mockLogger, times(1)).info(eq("Eviction on caching failure failed on {}, due to: {}, stacktrace: {}"),
                    eq("sampleMethod()"), eq(ex.getMessage()), any(String.class));

            // Ensure metric is published
            spyAdvice.publishCacheMetrics(mockPjp, "eviction_failure");
        }
    }
}
