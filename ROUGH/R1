Old Flow (Before Refactor)
Consumer
   |
   v
Service.encryptUsingAWSKey()
   |
   |-- Input invalid → throws SafePageException
   |
   |-- AWS call fails (DisabledException, InvalidCiphertextException, etc.)
   |       |
   |       v
   |   catch → log → return null
   |
   |-- AWS call succeeds → return ciphertext

 Consumer either gets ciphertext, null, or SafePageException.

New Flow (After Refactor)
Consumer
   |
   v
Service.encryptUsingAWSKey()
   |
   |-- Input invalid → throws SafePageException
   |
   |-- AWS call fails
   |       |
   |       v
   |   AwsExceptionHandler.handleKMSException()
   |       |
   |       v
   |   throws KMSOperationException
   |
   |-- catch (KMSOperationException) → log → return null
   |
   |-- AWS call succeeds → return ciphertext


Consumer still sees the same outcome: ciphertext, null, or SafePageException.
Consumer never sees KMSOperationException (it’s internal to service).

So the public contract didn’t change — only the internal handling got cleaner by unifying v1/v2 exceptions.
