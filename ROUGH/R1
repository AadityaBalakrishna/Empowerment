package com.empower.epw.crm.gateway.sqs;

import static org.awaitility.Awaitility.await;
import static java.util.concurrent.TimeUnit.SECONDS;

import io.awspring.cloud.sqs.operations.SqsTemplate;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.util.TestPropertyValues;
import org.springframework.context.ApplicationContextInitializer;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.test.context.ContextConfiguration;
import org.testcontainers.containers.LocalStackContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import org.testcontainers.utility.DockerImageName;

import java.util.concurrent.atomic.AtomicBoolean;

@Testcontainers
@SpringBootTest
@ContextConfiguration(initializers = CrmGatewayMessageListenerIT.Initializer.class)
class CrmGatewayMessageListenerIT {

    private static final String QUEUE_NAME = "crm-gateway-dryrun-queue";

    @Container
    static LocalStackContainer localStack = new LocalStackContainer(DockerImageName.parse("localstack/localstack:3.5"))
            .withServices(LocalStackContainer.Service.SQS);

    @Autowired
    private SqsTemplate sqsTemplate;

    @Autowired
    private CrmGatewayMessageListener listener;

    private static final AtomicBoolean messageProcessed = new AtomicBoolean(false);

    @BeforeAll
    static void beforeAll() {
        System.setProperty("aws.region", "us-east-1");
        System.setProperty("spring.cloud.aws.region.static", "us-east-1");
        System.setProperty("spring.cloud.aws.sqs.endpoint", localStack.getEndpointOverride(LocalStackContainer.Service.SQS).toString());
    }

    @BeforeEach
    void setUp() {
        // Create queue in LocalStack
        localStack.execInContainer("awslocal", "sqs", "create-queue", "--queue-name", QUEUE_NAME);
    }

    @Test
    void testDryRunQueueMessageConsumption() {
        // Send a message
        String messageBody = "{\"test\": \"hello world\"}";
        sqsTemplate.send(QUEUE_NAME, messageBody);

        // Wait and verify it got processed (logically, you can mock or capture via log appender)
        await().atMost(10, SECONDS).untilTrue(messageProcessed);
    }

    // Mock a marker inside listener for test visibility
    // In actual code, you can wire in a spy bean or use application events to confirm
    static class TestListener extends CrmGatewayMessageListener {
        @Override
        protected void processMessage(String type, String message) {
            super.processMessage(type, message);
            messageProcessed.set(true);
        }
    }

    static class Initializer implements ApplicationContextInitializer<ConfigurableApplicationContext> {
        @Override
        public void initialize(ConfigurableApplicationContext context) {
            String sqsEndpoint = localStack.getEndpointOverride(LocalStackContainer.Service.SQS).toString();

            TestPropertyValues.of(
                    "aws.region=us-east-1",
                    "spring.cloud.aws.region.static=us-east-1",
                    "spring.cloud.aws.sqs.endpoint=" + sqsEndpoint,
                    "crm.gateway.sqs.queue.dryrun=" + QUEUE_NAME,
                    "crm-gateway.sqs.retry.max-attempts=3",
                    "crm-gateway.sqs.retry.backoff-delay=1000"
            ).applyTo(context.getEnvironment());
        }
    }
}
