    like this :
@Override
    public void purgeQueue(String queueUrl) throws SQSOperationException {
        PurgeQueueRequest purgeQueueRequest = new PurgeQueueRequest(queueUrl);
        try {
            this.amazonSQS.purgeQueue(purgeQueueRequest);
            logger.info("{} Successfully purged queue with URL: {}", AWS_SDK_V1, queueUrl);
        } catch (Exception ex) {
            throw AwsExceptionHandler.handleSQSException("purgeQueue", "queueUrl", queueUrl, ex);
        }
    }

    @Override
    public SQSSendMessageResponse sendMessage(SQSSendMessageRequest sqsSendMessageRequest) throws SQSOperationException {
        SendMessageRequest sendMessageRequest = buildSendMessageRequest(sqsSendMessageRequest);

        try {
            SendMessageResult result = this.amazonSQS.sendMessage(sendMessageRequest);
            logger.info("{} Successfully sent message to the queue URL: {}", AWS_SDK_V1,
                    sqsSendMessageRequest.getQueueUrl());
            return SQSSendMessageResponse.builder()
                    .messageId(result.getMessageId())
                    .mD5OfMessageBody(result.getMD5OfMessageBody())
                    .sequenceNumber(result.getSequenceNumber())
                    .build();
        } catch (Exception ex) {
            throw AwsExceptionHandler.handleSQSException("sendMessage", "queueUrl", sqsSendMessageRequest.getQueueUrl()
                    , ex);
        }
    }

or :
	@Override
	public void deleteFile(String bucketName, String key)
	{
		validateS3Inputs(bucketName, key);
		try
		{
			amazonS3.deleteObject(bucketName, key);
			logger.info("[AWS SDK v1] Successfully deleted file from bucket: {}, key: {}",
					bucketName, key);
		}
		catch (AmazonClientException e)
		{
			throw handleS3Exception("Failed to delete file.", bucketName, key, e);
		}
	}

	@Override
	public List<String> listFiles(String bucketName, String folderName)
	{
		validateS3Inputs(bucketName, folderName);
		try
		{
			ListObjectsV2Request request = new ListObjectsV2Request().withBucketName(bucketName)
					.withPrefix(folderName);
			ListObjectsV2Result result = this.amazonS3.listObjectsV2(request);
			logger.info("[AWS SDK v1] Successfully listed {} files in bucket: {}, folder: {}",
					result.getKeyCount(), bucketName, folderName);
			return result.getObjectSummaries()
					.stream()
					.map(S3ObjectSummary::getKey)
					.collect(Collectors.toList());
		}
		catch (AmazonClientException e)
		{
			throw handleS3Exception("Failed to list files.", bucketName, folderName, e);
		}
	}
