package com.personalcapital.cache.aop;

import com.personalcapital.cache.annotation.PcapMultiCacheable;
import com.personalcapital.cache.annotation.RedisType;
import com.personalcapital.cache.aop.support.CacheAdviceHelper;
import com.personalcapital.cache.aop.support.CacheKeyProvider;
import com.personalcapital.cache.utils.CacheConstants;
import com.personalcapital.log.PcapLogger;
import com.personalcapital.log.PcapLoggerFactory;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Metrics;
import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.Signature;
import org.junit.jupiter.api.*;
import org.mockito.*;
import org.redisson.api.RBucket;
import org.redisson.api.RedissonClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;

import java.util.*;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@SpringJUnitConfig(locations =
{
		"classpath:cachePushAdviceTest-Context.xml"
})
public class PcapMultiCacheableAdviceMetricsTest
{

	@InjectMocks
	@Spy
	@Autowired
	private PcapMultiCacheableAdvice cacheAdvice;

	private SimpleMeterRegistry meterRegistry;
	private PcapMultiCacheable mockAnnotation;

	@Autowired
	@Qualifier(CacheConstants.REDISSON_REGULAR)
	private RedissonClient redissonClient;

	private static final PcapLogger logger = PcapLoggerFactory
			.getPcapLogger(PcapMultiCacheableAdviceMetricsTest.class);
	private static MockedStatic<CacheAdviceHelper> mockedCacheAdviceHelper;

	@BeforeAll
	static void initMockedStatic()
	{
		mockedCacheAdviceHelper = mockStatic(CacheAdviceHelper.class);
	}

	@BeforeEach
	void setUp() throws NoSuchMethodException
	{
		MockitoAnnotations.openMocks(this);
		meterRegistry = new SimpleMeterRegistry();
		Metrics.addRegistry(meterRegistry);

		redissonClient = mock(RedissonClient.class);
		RBucket<Object> mockBucket = mock(RBucket.class);
		doReturn(redissonClient).when(cacheAdvice)
				.getRedisson(RedisType.GEN);
		when(redissonClient.getBucket(anyString())).thenReturn(mockBucket);

		mockAnnotation = mock(PcapMultiCacheable.class);
		when(mockAnnotation.value()).thenReturn("testCache");
		when(mockAnnotation.keys()).thenReturn(new int[]
		{
				0
		});
		when(mockAnnotation.keyPrefix()).thenReturn("prefix");
		when(mockAnnotation.redisType()).thenReturn(RedisType.GEN);
		when(mockAnnotation.keyProvider()).thenAnswer(invocation -> DummyCacheKeyProvider.class);

		mockedCacheAdviceHelper
				.when(() -> CacheAdviceHelper.getMethod(any(ProceedingJoinPoint.class)))
				.thenReturn(DummyClass.class.getMethod("dummyMethod"));
	}

	@Test
	void testCacheMissAndDataMismatchMetric() throws Throwable
	{
		when(redissonClient.getBucket(anyString())
				.get()).thenReturn(null);
		when(mockProceedingJoinPoint().proceed())
				.thenReturn(Collections.singletonList("dbFetchedValue"));

		executeAndVerifyMetrics("miss", "data_mismatch");
	}

	@Test
	void testCacheHitMetric() throws Throwable
	{
		when(redissonClient.getBucket(anyString())
				.get()).thenReturn("cachedValue");

		executeAndVerifyMetrics("hit");
	}

	@Test
	void testCacheFailureAndDataMismatchMetric() throws Throwable
	{
		mockedCacheAdviceHelper
				.when(() -> CacheAdviceHelper.getMethod(any(ProceedingJoinPoint.class)))
				.thenReturn(DummyClass.class.getMethod("failingDummyMethod"));

		when(mockProceedingJoinPoint().proceed()).thenThrow(new RuntimeException("Forced Failure"));
		executeAndVerifyMetrics("failure", "data_mismatch");
	}

	@Test
	void testCacheMissAndDataStoreMetric() throws Throwable {
		ProceedingJoinPoint pjp = mockProceedingJoinPoint();
		try (MockedStatic<Metrics> mockedMetrics = mockStatic(Metrics.class)) {
			Counter mockCounter = mock(Counter.class);
			mockedMetrics.when(() -> Metrics.counter(anyString(), any(String[].class)))
					.thenReturn(mockCounter);

			when(redissonClient.getBucket(anyString()).get()).thenReturn(null);

			List<String> expectedDbValues = List.of("dbFetchedValue");
			when(pjp.proceed(any())).thenReturn(expectedDbValues);

			RBucket<Object> mockBucket = mock(RBucket.class);
			when(redissonClient.getBucket(anyString())).thenReturn(mockBucket);
			doNothing().when(mockBucket).set(any(), anyLong(), any());

			Object result = cacheAdvice.doMultiCacheable(pjp, mockAnnotation);
			ArgumentCaptor<String> outcomeCaptor = ArgumentCaptor.forClass(String.class);

			assertNotNull(result);
			assertEquals(expectedDbValues, result);

			mockedMetrics.verify(() -> Metrics.counter(eq("pcap.cache.event"), eq("class"),
					eq("PcapMultiCacheableAdvice"), eq("method"), eq("dummyMethod"), eq("outcome"),
					outcomeCaptor.capture()), atLeastOnce());

			List<String> capturedMetrics = outcomeCaptor.getAllValues();
			logger.info("Captured Metrics: {}", capturedMetrics);
			System.out.println(capturedMetrics);
			assertTrue(capturedMetrics.contains("store"));
			verify(mockCounter, atLeastOnce()).increment();
		}
	}

	private void executeAndVerifyMetrics(String... expectedMetrics) throws Throwable
	{
		ProceedingJoinPoint pjp = mockProceedingJoinPoint();
		try (MockedStatic<Metrics> mockedMetrics = mockStatic(Metrics.class))
		{
			Counter mockCounter = mock(Counter.class);
			mockedMetrics.when(() -> Metrics.counter(anyString(), any(String[].class)))
					.thenReturn(mockCounter);

			Object result = cacheAdvice.doMultiCacheable(pjp, mockAnnotation);
			ArgumentCaptor<String> outcomeCaptor = ArgumentCaptor.forClass(String.class);

			assertNotNull(result);
			mockedMetrics.verify(() -> Metrics.counter(eq("pcap.cache.event"), eq("class"),
					eq("PcapMultiCacheableAdvice"), eq("method"), eq("dummyMethod"), eq("outcome"),
					outcomeCaptor.capture()), atLeastOnce());

			List<String> capturedMetrics = outcomeCaptor.getAllValues();
			logger.info("Captured Metrics: {}", capturedMetrics);

			for (String expectedMetric : expectedMetrics)
			{
				assertTrue(capturedMetrics.contains(expectedMetric),
						"Expected metric not found: " + expectedMetric);
			}
			verify(mockCounter, atLeastOnce()).increment();
		}
	}

	private ProceedingJoinPoint mockProceedingJoinPoint() throws Throwable
	{
		ProceedingJoinPoint pjp = mock(ProceedingJoinPoint.class);
		Signature mockSignature = mock(Signature.class);
		when(pjp.getTarget()).thenReturn(cacheAdvice);
		when(pjp.getSignature()).thenReturn(mockSignature);
		when(mockSignature.getName()).thenReturn("dummyMethod");
		when(pjp.getArgs()).thenReturn(new Object[]
		{
				Collections.singletonList("key1")
		});
		when(pjp.proceed()).thenReturn(Collections.singletonList("dbFetchedValue"));
		return pjp;
	}

	public static class DummyClass
	{
		public static Collection<String> dummyMethod()
		{
			return Collections.emptyList();
		}

		public void failingDummyMethod()
		{
			throw new RuntimeException("Forced Failure");
		}
	}

	public static class DummyCacheKeyProvider implements CacheKeyProvider
	{
		@Override
		public Object getKeyField(Object value)
		{
			return value != null ? value.toString() : "null";
		}
	}

	@AfterAll
	static void releaseMockedStatic()
	{
		if (mockedCacheAdviceHelper != null)
		{
			mockedCacheAdviceHelper.close();
			mockedCacheAdviceHelper = null;
		}
	}

	@AfterEach
	void cleanRedis()
	{
		if (redissonClient != null)
		{
			redissonClient.shutdown();
		}
	}
}

change testCacheMissAndDataStoreMetric like the rest of them
