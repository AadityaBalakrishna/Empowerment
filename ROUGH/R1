package com.empower.epw.aws.kms.config;

import com.amazonaws.services.kms.AWSKMS;
import com.amazonaws.services.kms.AWSKMSClientBuilder;
import com.empower.epw.aws.api.kms.EpwKmsService;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.condition.*;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.util.StringUtils;

import software.amazon.awssdk.services.kms.KmsClient;

@Configuration
public class EpwKmsAutoConfig
{

	private static final Logger logger = LoggerFactory.getLogger(EpwKmsAutoConfig.class);
	private static final String DEFAULT_AWS_REGION = "us-west-2";
	public static final String AWS_REGION_KEY = "aws.region";
	public static final String AWS_PROFILE = "aws.profile";

	@Bean("epwKmsClient")
	@ConditionalOnProperty(name = "epw.aws.kms.sdk-version", havingValue = "v2")
	public KmsClient kmsClient()
	{
		String awsProfile = System.getProperty(AWS_PROFILE);
		software.amazon.awssdk.auth.credentials.AwsCredentialsProvider credentialsProvider;
		if (StringUtils.hasText(awsProfile))
		{
			logger.info("Using AWS profile for AWS SDK v2: {}", awsProfile);
			credentialsProvider = software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider
					.builder()
					.profileName(awsProfile)
					.build();
		}
		else
		{
			logger.info("Using default AWS credentials provider chain for SDK v2.");
			credentialsProvider = software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider
					.create();
		}

		String awsRegion = System.getProperty(AWS_REGION_KEY, DEFAULT_AWS_REGION);
		logger.info("Creating KmsClient for AWS SDK v2 with region: {}", awsRegion);
		return KmsClient.builder()
				.credentialsProvider(credentialsProvider)
				.region(software.amazon.awssdk.regions.Region.of(awsRegion))
				.build();
	}

	@Bean(name = "epwKmsService")
	@ConditionalOnProperty(name = "epw.aws.kms.sdk-version", havingValue = "v2")
	public EpwKmsService epwKmsServiceV2(@Qualifier("epwKmsClient") KmsClient kmsClient)
	{
		logger.info("Creating EpwKmsServiceImpl bean for AWS SDK v2");
		return new com.empower.epw.aws.v2.kms.EpwKmsServiceImpl(kmsClient);
	}
	@Bean(name = "epwAWSKMSClient")
	@ConditionalOnProperty(name = "epw.aws.kms.sdk-version", havingValue = "v1", matchIfMissing = true)
	public AWSKMS awsKmsClient()
	{
		String awsRegion = System.getProperty(AWS_REGION_KEY, DEFAULT_AWS_REGION);
		String awsProfile = System.getProperty(AWS_PROFILE);
		com.amazonaws.auth.AWSCredentialsProvider credentialsProvider;
		if (StringUtils.hasText(awsProfile))
		{
			logger.info("Using AWS profile for AWS SDK v1: {}", awsProfile);
			credentialsProvider = new com.amazonaws.auth.profile.ProfileCredentialsProvider(
					awsProfile);
		}
		else
		{
			logger.info("Using default AWS credentials provider chain.");
			credentialsProvider = com.amazonaws.auth.DefaultAWSCredentialsProviderChain
					.getInstance();
		}
		logger.info("Creating AWSKMS client with region for AWS SDK v1: {}", awsRegion);
		return AWSKMSClientBuilder.standard()
				.withCredentials(credentialsProvider)
				.withRegion(awsRegion)
				.build();
	}
	@Bean(name = "epwKmsService")
	@ConditionalOnProperty(name = "epw.aws.kms.sdk-version", havingValue = "v1", matchIfMissing = true)
	public EpwKmsService epwKmsServiceV1(@Qualifier("epwAWSKMSClient") AWSKMS awsKmsClient)
	{
		logger.info("Creating EpwKmsService bean for AWS SDK v1.");
		return new com.empower.epw.aws.v1.kms.EpwKmsServiceImpl(awsKmsClient);
	}
}

new impl:
package com.empower.epw.aws.v1.kms;

import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.stream.Collectors;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.springframework.stereotype.Service;

import com.amazonaws.services.kms.AWSKMS;
import com.amazonaws.services.kms.model.DecryptRequest;
import com.amazonaws.services.kms.model.DecryptResult;
import com.amazonaws.services.kms.model.DescribeKeyRequest;
import com.amazonaws.services.kms.model.DescribeKeyResult;
import com.amazonaws.services.kms.model.DisabledException;
import com.amazonaws.services.kms.model.EncryptRequest;
import com.amazonaws.services.kms.model.EncryptResult;
import com.amazonaws.services.kms.model.InvalidCiphertextException;
import com.amazonaws.services.kms.model.KeyUnavailableException;
import com.amazonaws.services.kms.model.ListAliasesRequest;
import com.amazonaws.services.kms.model.ListAliasesResult;
import com.empower.epw.aws.api.kms.dto.DescribeKeyResponseDTO;
import com.empower.epw.aws.api.kms.dto.ListAliasesResponseDTO;
import com.empower.epw.aws.v1.kms.util.AwsExceptionHandler;
import com.personalcapital.log.PcapLogger;
import com.personalcapital.log.PcapLoggerFactory;
import com.safepage.error.SafePageErrorType;
import com.safepage.exception.SafePageException;
import com.empower.epw.aws.api.kms.EpwKmsService;
import com.safepage.util.Utils;

@Service
public class EpwKmsServiceImpl implements EpwKmsService
{

	private static final PcapLogger logger = PcapLoggerFactory
			.getPcapLogger(EpwKmsServiceImpl.class);
	private static final Charset charset = StandardCharsets.UTF_8;

	private final AWSKMS kmsClient;

	public EpwKmsServiceImpl(AWSKMS kmsClient)
	{
		this.kmsClient = kmsClient;
	}

	/**
	 * Encrypt data key (system secondary key) under AWS CMK Key using IAM role to access the key
	 * AWS CMK
	 *
	 * @throws SafePageException
	 */
	@Override
	// @Retryable(value =
	// {
	// Exception.class
	// }, maxAttempts = 3, backoff = @Backoff(delay = 1000))
	public String encryptUsingAWSKey(String plainText, String keyId) throws SafePageException
	{
		if (StringUtils.isEmpty(plainText))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "plainText is required!");
		}
		if (StringUtils.isEmpty(keyId))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "keyId is required!");
		}
		try
		{
			EncryptRequest encryptRequest = new EncryptRequest().withKeyId(keyId)
					.withPlaintext(getByteBuffer(plainText));
			long start = System.currentTimeMillis();
			EncryptResult result = kmsClient.encrypt(encryptRequest);
			if (result != null && result.getCiphertextBlob() != null)
			{
				long end = System.currentTimeMillis();
				logger.info("[{}] encryptData took {} ", getAwsSdkVersion(), end - start);
				return Utils.encodeBase64(result.getCiphertextBlob()
						.array());
			}
			else
			{
				logger.error("[{}] encryptUsingAWSKey failed, EncryptResult is null for keyId: {}",
						getAwsSdkVersion(), keyId);
				throw AwsExceptionHandler.handleKMSException("encrypt", keyId,
						new IllegalStateException("EncryptResult or CiphertextBlob is null"));
			}
		}
		catch (DisabledException | KeyUnavailableException | UnsupportedEncodingException ex)
		{
			logger.error("[{}] Failed to encrypt, plainText:{}, keyId:{}, due to:{}",
					getAwsSdkVersion(), plainText, keyId, ExceptionUtils.getMessage(ex), ex);
			throw AwsExceptionHandler.handleKMSException("encrypt", keyId, ex);
		}
	}

	/**
	 * Decrypt encrypted data key under AWS CMK Key using IAM role to access the key
	 */
	@Override
	// @Retryable(value =
	// {
	// Exception.class
	// }, maxAttempts = 3, backoff = @Backoff(delay = 1000))
	public String decryptUsingAWSKey(String cipherText) throws SafePageException
	{
		if (StringUtils.isEmpty(cipherText))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "cipherText is required!");
		}
		try
		{
			byte[] decodedCipherText = Utils.decodeBase64(cipherText);
			DecryptRequest decryptRequest = new DecryptRequest()
					.withCiphertextBlob(ByteBuffer.wrap(decodedCipherText));
			long start = System.currentTimeMillis();
			DecryptResult result = kmsClient.decrypt(decryptRequest);
			long end = System.currentTimeMillis();
			logger.info("[{}] decryptData took {}", getAwsSdkVersion(), end - start);
			ByteBuffer plainTextBlob = result.getPlaintext();
			return getString(plainTextBlob);
		}
		catch (KeyUnavailableException kue)
		{
			// The request was rejected because the specified CMK was not available. The request can
			// be retried.
			logger.error(
					"[{}] Failed to decryptUsingAWSKey(KeyUnavailableException), cipherText:{}, due to:{}",
					getAwsSdkVersion(), cipherText, ExceptionUtils.getMessage(kue), kue);
		}
		catch (InvalidCiphertextException ice)
		{
			// The request was rejected because the specified ciphertext, or additional
			// authenticated data incorporated
			// into the ciphertext, such as the encryption context, is corrupted, missing, or
			// otherwise invalid.
			logger.error(
					"[{}] Failed to decryptUsingAWSKey(InvalidCiphertextException), cipherText:{}, due to:{}",
					getAwsSdkVersion(), cipherText, ExceptionUtils.getMessage(ice), ice);
		}
		catch (DisabledException de)
		{
			logger.error(
					"[{}] Failed to decryptUsingAWSKey(DisabledException), cipherText:{}, due to:{}",
					getAwsSdkVersion(), cipherText, ExceptionUtils.getMessage(de), de);
		}
		catch (Exception ex)
		{
			logger.error("[{}] Failed to decryptUsingAWSKey, cipherText:{}, due to:{}",
					getAwsSdkVersion(), cipherText, ExceptionUtils.getMessage(ex), ex);
		}
		return null;
	}

	@Override
	@Deprecated
	public ListAliasesResponseDTO listAliases() throws SafePageException
	{
		try
		{
			ListAliasesResult result = kmsClient
					.listAliases(new ListAliasesRequest().withLimit(100));
			List<ListAliasesResponseDTO.AliasEntry> aliasEntries = result.getAliases()
					.stream()
					.map(alias -> new ListAliasesResponseDTO.AliasEntry(alias.getAliasName(),
							alias.getTargetKeyId()))
					.collect(Collectors.toList());
			return new ListAliasesResponseDTO(aliasEntries);
		}
		catch (Exception ex)
		{
			logger.error("[{}] Failed to listAliases, due to:{}", getAwsSdkVersion(),
					ExceptionUtils.getMessage(ex), ex);
			return new ListAliasesResponseDTO();
		}
	}

	@Override
	@Deprecated
	public DescribeKeyResponseDTO describeKey(String keyId) throws SafePageException
	{
		try
		{
			DescribeKeyResult result = kmsClient
					.describeKey(new DescribeKeyRequest().withKeyId(keyId));

			return new DescribeKeyResponseDTO(result.getKeyMetadata()
					.getKeyId(),
					result.getKeyMetadata()
							.getArn(),
					result.getKeyMetadata()
							.getKeyState()
							.toString(),
					result.getKeyMetadata()
							.getEnabled());
		}
		catch (Exception ex)
		{
			logger.error("[{}] Failed to describeKey, keyId:{}, due to:{}", getAwsSdkVersion(),
					keyId, ExceptionUtils.getMessage(ex), ex);
			return new DescribeKeyResponseDTO();
		}
	}

	@Override
	public String getAwsSdkVersion()
	{
		return "AWS SDK v1";
	}

	/**
	 * Converts a String to a ByteBuffer using the specified charset.
	 *
	 * @param string
	 *            the String to convert
	 * @return the ByteBuffer representation of the String
	 */
	public static ByteBuffer getByteBuffer(String string)
	{
		return ByteBuffer.wrap(string.getBytes(charset));
	}

	/**
	 * Converts a ByteBuffer to a String using the specified charset.
	 *
	 * @param byteBuffer
	 *            the ByteBuffer to convert
	 * @return the String representation of the ByteBuffer
	 */
	public static String getString(ByteBuffer byteBuffer)
	{
		byte[] byteArray = new byte[byteBuffer.remaining()];
		byteBuffer.get(byteArray);
		return new String(byteArray, charset);
	}
}

old impl which delegates to the new service
//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package com.empower.epw.aws.api.kms;

import com.empower.epw.aws.api.kms.dto.DescribeKeyResponseDTO;
import com.empower.epw.aws.api.kms.dto.ListAliasesResponseDTO;
import com.safepage.exception.SafePageException;

public interface EpwKmsService {
    String encryptUsingAWSKey(String var1, String var2) throws SafePageException;

    String decryptUsingAWSKey(String var1) throws SafePageException;

    DescribeKeyResponseDTO describeKey(String var1) throws SafePageException;

    ListAliasesResponseDTO listAliases() throws SafePageException;

    String getAwsSdkVersion();
}
 and impl

package com.safepage.security.service.impl;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.empower.epw.aws.api.kms.dto.DescribeKeyResponseDTO;
import com.empower.epw.aws.api.kms.dto.ListAliasesResponseDTO;
import com.personalcapital.log.PcapLogger;
import com.personalcapital.log.PcapLoggerFactory;
import com.safepage.error.SafePageErrorType;
import com.safepage.exception.SafePageException;
import com.empower.epw.aws.api.kms.EpwKmsService;
import com.safepage.security.service.KMSService;

/**
 * @author dizadi
 */
public class KMSServiceImpl implements KMSService
{
	private static final PcapLogger logger = PcapLoggerFactory.getPcapLogger(KMSServiceImpl.class);

	private final EpwKmsService epwKmsService;

	@Autowired
	public KMSServiceImpl(EpwKmsService epwKmsService)
	{
		this.epwKmsService = epwKmsService;
	}

	/**
	 * Encrypt data key (system secondary key) under AWS CMK Key using IAM role to access the key
	 * AWS CMK
	 *
	 * @throws SafePageException
	 */
	@Override
	// @Retryable(value =
	// {
	// Exception.class
	// }, maxAttempts = 3, backoff = @Backoff(delay = 1000))
	public String encryptUsingAWSKey(String plainText, String keyId) throws SafePageException
	{
		if (StringUtils.isEmpty(plainText))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "plainText is required!");
		}
		if (StringUtils.isEmpty(keyId))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "keyId is required!");
		}

		String cipherText = epwKmsService.encryptUsingAWSKey(plainText, keyId);

		if (StringUtils.isEmpty(cipherText))
		{
			logger.error("KMS encryption returned null or empty ciphertext.");
			return null;
		}
		return cipherText;
	}

	/**
	 * Decrypt encrypted data key under AWS CMK Key using IAM role to access the key
	 */
	@Override
	// @Retryable(value =
	// {
	// Exception.class
	// }, maxAttempts = 3, backoff = @Backoff(delay = 1000))
	public String decryptUsingAWSKey(String cipherText) throws SafePageException
	{
		if (StringUtils.isEmpty(cipherText))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "cipherText is required!");
		}

		String plaintext = epwKmsService.decryptUsingAWSKey(cipherText);

		if (StringUtils.isEmpty(plaintext))
		{
			logger.error("KMS decryption returned null or empty plaintext.");
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "Decryption failed.");
		}

		return plaintext;
	}

	/**
	 * Create a new customer master key. <br>
	 * Customer master key (CMK) is designed to encrypt and decrypt data keys (System Secondary
	 * Key). CMK cannot be used to encrypt/decrypt data more than 4 KB (4096 bytes) of data.
	 */
	// public void createCMK()
	// {
	// String desc = "PCAP Master Key for encrypting system secondary keys";
	// CreateKeyRequest req = new CreateKeyRequest().withDescription(desc);
	// CreateKeyResult result = getKMSClient().createKey(req);
	// }

	@Override
	@Deprecated
	public DescribeKeyResponseDTO describeKey(String keyId)throws SafePageException
	{
		return epwKmsService.describeKey(keyId);
	}

	@Override
	@Deprecated
	public ListAliasesResponseDTO getKeyAliases(String keyId) throws SafePageException
	{
		return epwKmsService.listAliases();
	}
}
