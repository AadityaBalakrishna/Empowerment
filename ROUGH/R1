@Test
void testCacheEvictionFailureMetricThroughDoMultiCacheable() throws Throwable {
    ProceedingJoinPoint pjp = mockProceedingJoinPoint();

    try (MockedStatic<Metrics> mockedMetrics = Mockito.mockStatic(Metrics.class)) {
        Counter mockCounter = mock(Counter.class);
        mockedMetrics.when(() -> Metrics.counter(anyString(), any(String[].class)))
                .thenReturn(mockCounter);

        // ✅ Simulate Cache Failure
        when(redissonClient.getBucket(anyString()).get()).thenThrow(new RuntimeException("Cache read error"));

        // ✅ Mock `evictFromRedis` to fail
        RedissonClient mockRedisson = mock(RedissonClient.class);
        when(cacheAdvice.getRedisson(any())).thenReturn(mockRedisson);
        when(mockRedisson.getKeys()).thenThrow(new RuntimeException("Redis eviction failed"));

        Object result = cacheAdvice.doMultiCacheable(pjp, mockAnnotation);
        ArgumentCaptor<String> outcomeCaptor = ArgumentCaptor.forClass(String.class);

        assertNotNull(result);
        
        mockedMetrics.verify(() -> Metrics.counter(
                        eq("pcap.cache.event"), eq("class"), eq("PcapMultiCacheableAdvice"),
                        eq("method"), eq("dummyMethod"), eq("outcome"), outcomeCaptor.capture()),
                atLeastOnce());

        List<String> capturedMetrics = outcomeCaptor.getAllValues();
        logger.info("Captured Metrics: {}", capturedMetrics);

        // ✅ Ensure "eviction_failure" is recorded
        assertTrue(capturedMetrics.contains("eviction_failure"),
                "Expected 'eviction_failure' metric but got: " + capturedMetrics);

        verify(mockCounter, atLeastOnce()).increment();
    }
}
