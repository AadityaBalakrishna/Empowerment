package com.safepage.security.data;

import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.transaction.annotation.Transactional;

import com.safepage.json.JSONHelper;
import com.safepage.security.CryptType;
import com.safepage.security.KeyManager;
import com.safepage.security.data.impl.KeySeedImpl;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

@SpringJUnitConfig(locations = "classpath:sp-security-test.xml")
@Transactional(transactionManager = "spSecuritytransactionManager")
@Rollback
public class KeySeedDaoTest
{
	@Autowired
	private KeySeedDao keySeedDao;

	private KeyManager keyManager;

	@BeforeEach
	public void setup()
	{
		keyManager = Mockito.mock(KeyManager.class);
		ReflectionTestUtils.setField(keySeedDao, "keyManager", keyManager);
	}

	private final String encryptedSystemSecondaryKeySeed = "V2AQICAHgRUiA5dam8Oo8dUaBTEEtfN/rk1OSMyJ5hnLL5z6gjUQFLgEAU/acqQR1NrRkHBbJNAAAAfjB8BgkqhkiG9w0BBwagbzBtAgEAMGgGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQM3z/yrwslew/EQh4IAgEQgDvh8X+tNDw8ACFB6Rdw60DmQOLUnDfzGsarPjXR2vLqCAu2vjalXm4fu4z9Kv5Tjswco/5gPyPNa7HV+Q==";
	private final String encryptedUserPrimaryKeySeed = "V2AAcnLteiTyI855gkqTkeTYNLemuzpsAPnatyk8/cSxaik8XbpmTTbdJSKqCTYJvige";

	private KeySeed createKeySeed(KeySeedType type, String encryptedKeySeed)
	{
		KeySeed keySeed = new KeySeedImpl();
		keySeed.setValue(encryptedKeySeed);
		keySeed.setName("UU");
		keySeed.setType(type);
		keySeed.setDefaultKey(false);
		return keySeed;
	}

	@Test
	public void testGetKeySeedById()
	{
		KeySeed KeySeed = keySeedDao.getKeySeedById(1l);
		assertNotNull(KeySeed, "keySeed can't be null");
	}

	@Test
	public void getDefaultSystemSecondaryKeySeed_whenSystemPrimaryKeyMigratedToAWS_systemKeySeedSourceIsAws()
	{
		when(keyManager.isSystmePrimaryKeyMigratedToAWS()).thenReturn(true);
		KeySeed systemKeySeed = keySeedDao.getDefaultSystemSecondaryKeySeed();
		assertNotNull(systemKeySeed);
		assertTrue(systemKeySeed.isDefaultKey());
		assertNotNull(systemKeySeed.getSource());
		assertTrue(systemKeySeed.getSource()
				.equals(KeySource.AWS));
	}

	@Test
	public void getDefaultSystemSecondaryKeySeed_whenSystemPrimaryKeyNotMigratedToAWS_systemKeySeedSourceIsKeystore()
	{
		when(keyManager.isSystmePrimaryKeyMigratedToAWS()).thenReturn(false);
		KeySeed systemKeySeed = keySeedDao.getDefaultSystemSecondaryKeySeed();
		assertNotNull(systemKeySeed);
		assertTrue(systemKeySeed.isDefaultKey());
		assertTrue((systemKeySeed.getSource() == null || systemKeySeed.getSource()
				.equals(KeySource.KEYSTORE)));
	}

	@Test
	public void testGetDefaultUserKeySeed()
	{
		KeySeed userKeySeed = keySeedDao.getDefaultUserKeySeed(1l);

		assertNotNull(userKeySeed);
		assertTrue(userKeySeed.isDefaultKey());
	}

	@Test
	public void testGetSystemSecondaryKeySeedList()
	{
		List<KeySeed> keySeedList = keySeedDao.getSystemSecondaryKeySeeds();
		assertTrue(keySeedList.size() >= 1);
	}

	@Test
	public void testGetUserKeySeedList()
	{
		Long userId = 1l;
		KeySeed keySeed = createKeySeed(KeySeedType.USER_PRIMARY, encryptedUserPrimaryKeySeed);
		keySeed.setUserId(userId);
		keySeed.setName("-U");
		keySeed.setDefaultKey(false);
		keySeedDao.addKeySeed(keySeed);

		List<KeySeed> keySeedList = keySeedDao.getUserKeySeeds(userId);
		assertTrue(keySeedList.size() >= 1);
	}

	@Test
	public void testUpdateDefaultKey()
	{
		KeySeed keySeed = createKeySeed(KeySeedType.USER_PRIMARY, encryptedUserPrimaryKeySeed);
		Long userId = 1l;
		keySeed.setUserId(userId);
		keySeedDao.addKeySeed(keySeed);
		keySeed = keySeedDao.getKeySeedByName(keySeed.getName(), KeySeedType.USER_PRIMARY, userId);
		KeySeed defaultUserKey = keySeedDao.getDefaultUserKeySeed(userId);
		assertNotNull(defaultUserKey);
		keySeedDao.updateDefaultKey(false, defaultUserKey.getId());
		keySeedDao.updateDefaultKey(true, keySeed.getId());
		keySeed = keySeedDao.getKeySeedById(keySeed.getId());
		assertTrue(keySeed.isDefaultKey());
		assertTrue(CryptType.V5.equals(keySeed.getEncryptionVersion()));
	}

	@Test
	public void testRemove()
	{
		KeySeed keySeed = createKeySeed(KeySeedType.USER_PRIMARY, encryptedUserPrimaryKeySeed);
		Long userId = 1l;
		keySeed.setUserId(userId);
		keySeedDao.addKeySeed(keySeed);
		keySeed = keySeedDao.getKeySeedByName(keySeed.getName(), KeySeedType.USER_PRIMARY, userId);
		keySeedDao.removeKeySeed(keySeed);
		keySeed = keySeedDao.getKeySeedByName(keySeed.getName(), KeySeedType.USER_PRIMARY, userId);
		assertNull(keySeed);
	}

	@Test
	public void testAddUserKey()
	{
		Long userId = 1l;
		KeySeed keySeed = createKeySeed(KeySeedType.USER_PRIMARY, encryptedUserPrimaryKeySeed);
		keySeed.setUserId(userId);
		keySeed.setName("-U");

		// Add new keySeed
		keySeedDao.addKeySeed(keySeed);

		// Find it by Name
		keySeed = keySeedDao.getKeySeedByName(keySeed.getName(), KeySeedType.USER_PRIMARY, userId);
		assertNotNull(keySeed);
		assertTrue(CryptType.V5.equals(keySeed.getEncryptionVersion()));
	}

	@Test
	public void testAddSystemSecondaryKey()
	{
		KeySeed keySeed = createKeySeed(KeySeedType.SYSTEM_SECONDARY,
				encryptedSystemSecondaryKeySeed);
		keySeed.setName("NewSS");

		// Add new System Secondary KeySeed
		keySeedDao.addKeySeed(keySeed);

		// Find it by Name
		keySeed = keySeedDao.getKeySeedByName(keySeed.getName(), KeySeedType.SYSTEM_SECONDARY,
				null);
		assertNotNull(keySeed);
		assertTrue(CryptType.V4.equals(keySeed.getEncryptionVersion()));
	}

	@Test
	public void testUpdateKeyseedStatusAndDetail()
	{
		Long userId = 1l;
		KeySeed keySeed = createKeySeed(KeySeedType.USER_PRIMARY, encryptedUserPrimaryKeySeed);
		keySeed.setUserId(userId);
		keySeed.setName("-U");
		keySeedDao.addKeySeed(keySeed);

		keySeed = keySeedDao.getKeySeedByName(keySeed.getName(), KeySeedType.USER_PRIMARY, userId);
		assertNotNull(keySeed, "keySeed can't be null");

		keySeedDao.updateKeySeedStatus(KeySeedStatus.CREATED, keySeed);
		keySeed = keySeedDao.getKeySeedByName(keySeed.getName(), KeySeedType.USER_PRIMARY, userId);

		assertTrue(keySeed.getStatus()
				.equals(KeySeedStatus.CREATED));

		KeyStatusDetail detail = new KeyStatusDetail();
		detail.setBillPaymentMigrated(true);

		keySeedDao.updateKeySeedDetail(JSONHelper.toString(detail), keySeed);
		keySeed = keySeedDao.getKeySeedByName(keySeed.getName(), KeySeedType.USER_PRIMARY, userId);

		assertNotNull(keySeed.getDetail());
		detail = (KeyStatusDetail) JSONHelper.toObject(keySeed.getDetail(), KeyStatusDetail.class);
		assertTrue(detail.isBillPaymentMigrated());
	}

	@Test
	public void testGetLastCreatedUserKey()
	{
		Long userId = 1l;
		KeySeed keySeed = createKeySeed(KeySeedType.USER_PRIMARY, encryptedUserPrimaryKeySeed);
		keySeed.setUserId(userId);
		keySeed.setName("-U");
		keySeed.setStatus(KeySeedStatus.CREATED);
		keySeedDao.addKeySeed(keySeed);

		keySeed = keySeedDao.getKeySeedByName(keySeed.getName(), KeySeedType.USER_PRIMARY, userId);
		assertNotNull(keySeed, "keySeed can't be null");

		// KeySeed keySeed2 = createKeySeed(KeySeedType.USER_PRIMARY);
		// keySeed2.setUserId(userId);
		// keySeed2.setName("-D");
		// keySeed2.setStatus(KeySeedStatus.CREATED);
		// keySeedDao.addKeySeed(keySeed2);

		KeySeed lastCreatedKey = keySeedDao.getLastCreatedUserKey(userId);
		assertNotNull(lastCreatedKey, "keySeed can't be null");
	}

	@Test
	public void testGetSystemSecondaryKeySeedByNameAndType()
	{
		List<KeySeed> keySeedList = keySeedDao.getSystemSecondaryKeySeedByName("AA");
		assertTrue(keySeedList.size() >= 1);
	}

	@Test
	public void testUpdateKeySeedValueAndStatus()
	{
		KeySeed keySeed = createKeySeed(KeySeedType.SYSTEM_SECONDARY,
				encryptedSystemSecondaryKeySeed);
		keySeedDao.addKeySeed(keySeed);

		keySeed = keySeedDao.getKeySeedByName(keySeed.getName(), KeySeedType.SYSTEM_SECONDARY,
				null);
		assertNotNull(keySeed, "keySeed can't be null");

		KeySeed newKeySeed = new KeySeedImpl();
		newKeySeed.setId(keySeed.getId());
		newKeySeed.setStatus(KeySeedStatus.MRKENCRYPTED);
		newKeySeed.setValue("V2NewEncryptedKeySeedValue");

		boolean isUpdated = keySeedDao.updateKeySeedValueAndStatus(newKeySeed);
		assertTrue(isUpdated);

		keySeed = keySeedDao.getKeySeedByName(keySeed.getName(), KeySeedType.SYSTEM_SECONDARY,
				null);

		assertEquals(keySeed.getStatus(), newKeySeed.getStatus());
		assertEquals(keySeed.getValue(), newKeySeed.getValue());
	}

}
