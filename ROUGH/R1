package com.safepage.user;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.lang.BooleanUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.transaction.annotation.Transactional;

import com.personalcapital.profile.ProfileService;
import com.personalcapital.profile.data.PersonDao;
import com.personalcapital.profile.data.Relationship;
import com.personalcapital.profile.data.UserPersonDao;
import com.personalcapital.profile.data.UserPersonRole;
import com.personalcapital.profile.data.impl.PersonImpl;
import com.personalcapital.profile.data.impl.UserPersonImpl;
import com.personalcapital.user.data.util.UserDataUtils;
import com.safepage.exception.SafePageException;
import com.safepage.user.data.Account;
import com.safepage.user.data.User;
import com.safepage.user.data.UserAccountHelper;
import com.safepage.util.BaseUtils;

@Rollback
@SpringJUnitConfig(locations =
{
		"classpath*:pcap-credentials-test.xml", "classpath*:account-api-client.xml",
})
@Transactional(value = "spTran")
public class UserDeletionServiceTest
{
	@Autowired
	private UserDataUtils userDataUtils;

	@Autowired
	private PersonDao personDao;

	@Autowired
	private UserPersonDao userPersonDao;

	@Autowired
	private ProfileService profileService;

	@Autowired
	private UserAccountHelper userAccountHelper;

	@Test
	public void testIsActivePCCUser_WithNoUserAccounts() throws SafePageException
	{
		User user = createTransientTestUser();
		UserAccountHelper mockUserAccountHelper = mock(UserAccountHelper.class);
		when(mockUserAccountHelper.getUserAccounts(any(User.class)))
				.thenReturn(Collections.emptyList());
		ReflectionTestUtils.setField(userDataUtils, "userAccountHelper", mockUserAccountHelper);
		Assertions.assertFalse(userDataUtils.isActivePCCUser(user));
		ReflectionTestUtils.setField(userDataUtils, "userAccountHelper", userAccountHelper);

	}

	@Test
	public void testIsActivePCCUser_WithDeletedOnusBank() throws SafePageException
	{
		User user = createTransientTestUser();
		UserAccountHelper mockUserAccountHelper = mock(UserAccountHelper.class);

		Account mockAccount2 = mock(Account.class);
		when(mockAccount2.getIsOnusBank()).thenReturn(true);
		when(mockAccount2.getAccountDeletedDate()).thenReturn(new Date());
		Account mockAccount3 = mock(Account.class);
		when(mockAccount3.getIsOnusBank()).thenReturn(false);
		when(mockUserAccountHelper.getUserAccounts(any(User.class)))
				.thenReturn(Arrays.asList(mockAccount2, mockAccount3));
		ReflectionTestUtils.setField(userDataUtils, "userAccountHelper", mockUserAccountHelper);
		Assertions.assertFalse(userDataUtils.isActivePCCUser(user));
		ReflectionTestUtils.setField(userDataUtils, "userAccountHelper", userAccountHelper);
	}

	@Test
	public void testIsActivePCCUser_WithActiveOnusBank() throws SafePageException
	{

		User user = createTransientTestUser();
		UserAccountHelper mockUserAccountHelper = mock(UserAccountHelper.class);

		Account mockAccount2 = mock(Account.class);
		when(mockAccount2.getIsOnusBank()).thenReturn(true);
		when(mockAccount2.getClosedDate()).thenReturn(null);
		when(mockAccount2.getAccountNumber()).thenReturn("1234");
		when(mockAccount2.getAccountRoutingNumber()).thenReturn("8909");
		Account mockAccount3 = mock(Account.class);
		when(mockAccount3.getIsOnusBank()).thenReturn(false);
		when(mockUserAccountHelper.getUserAccounts(any(User.class)))
				.thenReturn(Arrays.asList(mockAccount2, mockAccount3));
		ReflectionTestUtils.setField(userDataUtils, "userAccountHelper", mockUserAccountHelper);
		Assertions.assertTrue(userDataUtils.isActivePCCUser(user));
		ReflectionTestUtils.setField(userDataUtils, "userAccountHelper", userAccountHelper);
	}

	@Test
	public void testOldTerminatedUser() throws SafePageException
	{
		User user = createTransientTestUser();
		user.setMyVestHouseholdId("odfnoj8wefinsndc");
		user.setOnusTerminationDate(new Date());
		Map<String, Object> userEventLog = new HashMap<>();
		boolean oldTerminatedClient = BooleanUtils
				.isTrue(profileService.isOldTerminatedClient(user, userEventLog));
		assertFalse(oldTerminatedClient);
		assertFalse(userEventLog.isEmpty());

		Calendar c = Calendar.getInstance();
		c.set(Calendar.YEAR, c.get(Calendar.YEAR) - 5);
		user.setOnusTerminationDate(c.getTime());
		userEventLog.clear();
		oldTerminatedClient = BooleanUtils
				.isTrue(profileService.isOldTerminatedClient(user, userEventLog));
		assertFalse(oldTerminatedClient);
		assertFalse(userEventLog.isEmpty());

		c = Calendar.getInstance();
		c.set(Calendar.YEAR, c.get(Calendar.YEAR) - 6);
		user.setOnusTerminationDate(c.getTime());
		userEventLog.clear();
		assertTrue(BooleanUtils.isTrue(profileService.isOldTerminatedClient(user, userEventLog)));
		assertFalse(userEventLog.isEmpty());
	}

	@Test
	public void testIsAnyUserPersonEnrollingOrEnrolled() throws SafePageException
	{
		User user = createTransientTestUser();

		PersonImpl person = new PersonImpl();
		person.setRelationship(Relationship.SELF);
		person.setIsClientAgreementSigned(true);
		personDao.save(person);
		assertTrue(person.getId() > 0);

		// Create UserPerson
		UserPersonImpl userPerson = new UserPersonImpl();
		userPerson.setUserId(user.getId());
		userPerson.setRole(UserPersonRole.SELF);
		userPerson.setPersonId(person.getId());
		userPerson.setPersonGuid(person.getPersonGuid());
		userPersonDao.saveUserPerson(userPerson);
		assertTrue(userPerson.getId() > 0);

		assertTrue(BooleanUtils.isTrue(profileService.isAnyUserPersonEnrollingOrEnrolled(user)));

	}

	private User createTransientTestUser() throws SafePageException
	{
		String randomUUID = UUID.randomUUID()
				.toString();
		if (randomUUID.length() > 5)
		{
			randomUUID = randomUUID.substring(0, 5);
		}
		String userName = "utu" + randomUUID + hashCode() * System.currentTimeMillis();
		return userDataUtils.createUser(userName);
	}

	@Test
	public void testGetAllUserPersonIdListByUser() throws SafePageException
	{
		User user = createTransientTestUser();
		PersonImpl person = new PersonImpl();
		personDao.save(person);
		assertTrue(user.getId() > 0);
		assertTrue(person.getId() > 0);

		UserPersonImpl userPerson = new UserPersonImpl();
		userPerson.setUserId(user.getId());
		userPerson.setRole(UserPersonRole.SELF);
		userPerson.setPersonId(person.getId());
		userPerson.setPersonGuid(person.getPersonGuid());
		userPersonDao.saveUserPerson(userPerson);
		assertTrue(userPerson.getId() > 0);

		profileService.removePersons(user);

		List<Long> userPersonIds = userPersonDao.getAllUserPersonIdListByUser(user);
		assertFalse(BaseUtils.isEmpty(userPersonIds));
		assertEquals(1, userPersonIds.size());
		assertEquals(userPerson.getId()
				.longValue(),
				userPersonIds.getFirst()
						.longValue());

	}

}


please help me make this test class independent of xml file
