@Test
void testPublishCacheMetrics_DataMismatch() throws Throwable {
    ProceedingJoinPoint pjp = mockProceedingJoinPoint();
    PcapMultiCacheableAdvice spyAdvice = spy(cacheAdvice);

    // ✅ Spy on getCollectionResult() to force a data mismatch
    doReturn(Arrays.asList("wrongData")).when(spyAdvice).getCollectionResult(any(), any(), any());

    when(pjp.proceed()).thenReturn(Arrays.asList("key1", "key2")); // Simulate DB returning incorrect data

    try (MockedStatic<Metrics> mockedMetrics = mockStatic(Metrics.class)) {
        Counter mockCounter = mock(Counter.class);
        mockedMetrics.when(() -> Metrics.counter(anyString(), any(String[].class))).thenReturn(mockCounter);

        try {
            spyAdvice.doMultiCacheable(pjp, mockPcapMultiCacheable());
        } catch (Exception ignored) { }

        // ✅ Verify that `publishCacheMetrics` logs "data_mismatch"
        verify(spyAdvice, times(1)).publishCacheMetrics(eq(pjp), eq("data_mismatch"));
        verify(mockCounter, times(1)).increment();
        verifyMetricsLogging(mockedMetrics, "data_mismatch");
    }
}
