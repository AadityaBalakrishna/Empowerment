@Service
public class EpwKmsServiceImpl implements EpwKmsService
{

	private static final PcapLogger logger = PcapLoggerFactory
			.getPcapLogger(EpwKmsServiceImpl.class);
	private static final Charset charset = StandardCharsets.UTF_8;

	private final AWSKMS kmsClient;

	public EpwKmsServiceImpl(AWSKMS kmsClient)
	{
		this.kmsClient = kmsClient;
	}

	/**
	 * Encrypt data key (system secondary key) under AWS CMK Key using IAM role to access the key
	 * AWS CMK
	 *
	 * @throws SafePageException
	 */
	@Override
	// @Retryable(value =
	// {
	// Exception.class
	// }, maxAttempts = 3, backoff = @Backoff(delay = 1000))
	public String encryptUsingAWSKey(String plainText, String keyId) throws SafePageException
	{
		if (StringUtils.isEmpty(plainText))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "plainText is required!");
		}
		if (StringUtils.isEmpty(keyId))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "keyId is required!");
		}
		try
		{
			EncryptRequest encryptRequest = new EncryptRequest().withKeyId(keyId)
					.withPlaintext(getByteBuffer(plainText));
			long start = System.currentTimeMillis();
			EncryptResult result = kmsClient.encrypt(encryptRequest);
			if (result != null && result.getCiphertextBlob() != null)
			{
				long end = System.currentTimeMillis();
				logger.info("[{}] encryptData took {} ", getAwsSdkVersion(), (end - start));
				return Utils.encodeBase64(result.getCiphertextBlob().array());
			} else {
				logger.error("[{}] encryptUsingAWSKey failed, EncryptResult is null for keyId: {}", getAwsSdkVersion(),keyId);
				throw AwsExceptionHandler.handleKMSException("encrypt", keyId, new IllegalStateException("EncryptResult or CiphertextBlob is null"));
			}
		}
		catch (DisabledException | KeyUnavailableException | UnsupportedEncodingException ex)
		{
			logger.error(
					"[{}] Failed to encrypt, plainText:{}, keyId:{}, due to:{}", getAwsSdkVersion(),
					plainText, keyId, ExceptionUtils.getMessage(ex), ex);
			throw AwsExceptionHandler.handleKMSException("encrypt", keyId, ex);
		}
	}

public interface EpwKmsService {

	/**
	 * Encrypts a plaintext string using an AWS KMS key identified by its keyId.
	 *
	 * @param plainText the plaintext string to encrypt
	 * @param keyId the identifier of the KMS key to use for encryption
	 * @return the encrypted ciphertext as a string
	 * @throws SafePageException if encryption fails or the key cannot be accessed
	 */
	public String encryptUsingAWSKey(String plainText, String keyId) throws SafePageException;

	/**
	 * Decrypts a ciphertext string using the default AWS KMS key.
	 *
	 * @param cipherText the encrypted string to decrypt
	 * @return the decrypted plaintext string
	 * @throws SafePageException if decryption fails or the key cannot be accessed
	 */
	public String decryptUsingAWSKey(String cipherText) throws SafePageException;

	/**
	 * Describes a KMS key using its keyId or alias.
	 *
	 * @param keyId the keyId or alias to describe
	 * @return metadata and status information about the KMS key
	 * @throws SafePageException if the key cannot be found or described
	 */
	DescribeKeyResponseDTO describeKey(String keyId) throws SafePageException;

	/**
	 * Lists all KMS key aliases in the current AWS region.
	 *
	 * @return a response containing a list of key aliases and their associated key IDs
	 * @throws SafePageException if alias listing fails
	 */
	ListAliasesResponseDTO listAliases() throws SafePageException;

	/**
	 * Returns the version of the AWS SDK being used by this service.
	 *
	 * @return the AWS SDK version as a string
	 */
	String getAwsSdkVersion();
}

Old KMSServiceImpl:
public class KMSServiceImpl implements KMSService
{
	private AWSKMS kmsClient = null;
	private static PcapLogger logger = PcapLoggerFactory.getPcapLogger(KMSServiceImpl.class);

	private static Charset charset = StandardCharsets.UTF_8;

	private AWSKMS getKMSClient()
	{
		if (kmsClient == null)
		{
			AWSCredentialsManager awsCredentialsManager = new AWSCredentialsManager();
			kmsClient = (AWSKMS) awsCredentialsManager
					.getClientBuilderWithCredentials(AWSKMSClient.builder())
					.build();
		}
		return kmsClient;
	}

	// private constructor
	private KMSServiceImpl()
	{
		/*
		 * 1. can only be initialized using inner static class on first access.
		 */
		logger.info("Initialized the KMSServiceImpl");
	}

	/*
	 * Bill Pugh Singleton creation using static inner class, thread safe and no synchronized block
	 */
	private static class KMSServiceHolder
	{
		private static final KMSService INSTANCE = new KMSServiceImpl();
	}

	public static KMSService getInstance()
	{
		/*
		 * only when someone calls the method, this class gets loaded and creates the Singleton
		 * class instance
		 */
		return KMSServiceHolder.INSTANCE;

	}

	/**
	 * Encrypt data key (system secondary key) under AWS CMK Key using IAM role to access the key
	 * AWS CMK
	 * 
	 * @throws SafePageException
	 */
	@Override
	// @Retryable(value =
	// {
	// Exception.class
	// }, maxAttempts = 3, backoff = @Backoff(delay = 1000))
	public String encryptUsingAWSKey(String plainText, String keyId) throws SafePageException
	{
		if (StringUtils.isEmpty(plainText))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "plainText is required!");
		}
		if (StringUtils.isEmpty(keyId))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "keyId is required!");
		}
		try
		{
			EncryptRequest encryptRequest = new EncryptRequest().withKeyId(keyId)
					.withPlaintext(getByteBuffer(plainText));
			long start = System.currentTimeMillis();
			EncryptResult result = getKMSClient().encrypt(encryptRequest);
			if (result != null && result.getCiphertextBlob() != null)
			{
				long end = System.currentTimeMillis();
				logger.info("encryptData took {} " + (end - start));
				return Utils.encodeBase64(result.getCiphertextBlob()
						.array());
			}
			logger.error("encryptUsingAWSKey failed, EncryptResult is null!");
			return null;
		}
		catch (DisabledException de)
		{
			logger.error(
					"Failed to encryptUsingAWSKey(DisabledException), plainText:{}, keyId:{}, due to:{}",
					plainText, keyId, ExceptionUtils.getMessage(de), de);
		}
		catch (KeyUnavailableException kue)
		{
			logger.error(
					"Failed to encryptUsingAWSKey(KeyUnavailableException), plainText:{}, keyId:{}, due to:{}",
					plainText, keyId, ExceptionUtils.getMessage(kue), kue);
		}
		catch (Exception ex)
		{
			logger.error("Failed to encryptUsingAWSKey, plainText:{}, keyId:{}, due to:{}",
					plainText, keyId, ExceptionUtils.getMessage(ex), ex);
		}
		return null;
	}

New:
public class KMSServiceImpl implements KMSService
{
	private static final PcapLogger logger = PcapLoggerFactory.getPcapLogger(KMSServiceImpl.class);

	private final EpwKmsService epwKmsService;

	@Autowired
	public KMSServiceImpl(EpwKmsService epwKmsService)
	{
		this.epwKmsService = epwKmsService;
	}

	/**
	 * Encrypt data key (system secondary key) under AWS CMK Key using IAM role to access the key
	 * AWS CMK
	 *
	 * @throws SafePageException
	 */
	@Override
	// @Retryable(value =
	// {
	// Exception.class
	// }, maxAttempts = 3, backoff = @Backoff(delay = 1000))
	public String encryptUsingAWSKey(String plainText, String keyId) throws SafePageException
	{
		if (StringUtils.isEmpty(plainText))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "plainText is required!");
		}
		if (StringUtils.isEmpty(keyId))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "keyId is required!");
		}

		String cipherText = epwKmsService.encryptUsingAWSKey(plainText, keyId);

		if (StringUtils.isEmpty(cipherText))
		{
			logger.error("KMS encryption returned null or empty ciphertext.");
			return null;
		}
		return cipherText;
	}

cryptengine changes before vs after:
before:
			String result = KMSServiceImpl.getInstance()
					.encryptUsingAWSKey(rawValue, this.getKeyManager()

after:
@Autowired
..
String result = epwKmsService.encryptUsingAWSKey(rawValue, this.getKeyManager()
							.getSystemPrimaryAliasName());private EpwKmsService epwKmsService;
