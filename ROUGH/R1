package com.safepage.security.service.impl;

import com.empower.epw.aws.api.kms.EpwKmsService;
import com.empower.epw.aws.api.kms.dto.DecryptRequestDTO;
import com.empower.epw.aws.api.kms.dto.DecryptResponseDTO;
import com.empower.epw.aws.api.kms.dto.EncryptRequestDTO;
import com.empower.epw.aws.api.kms.dto.EncryptResponseDTO;
import com.personalcapital.log.PcapLogger;
import com.personalcapital.log.PcapLoggerFactory;
import com.safepage.error.SafePageErrorType;
import com.safepage.exception.SafePageException;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class KMSServiceImpl {

    private static final PcapLogger logger = PcapLoggerFactory.getPcapLogger(KMSServiceImpl.class);

    private final EpwKmsService epwKmsService;

    @Autowired
    public KMSServiceImpl(EpwKmsService epwKmsService) {
        this.epwKmsService = epwKmsService;
    }

    public String encryptUsingAWSKey(String plainText, String keyId) throws SafePageException {
        if (StringUtils.isEmpty(plainText)) {
            throw new SafePageException(SafePageErrorType.INVALID_INPUT, "plainText is required!");
        }
        if (StringUtils.isEmpty(keyId)) {
            throw new SafePageException(SafePageErrorType.INVALID_INPUT, "keyId is required!");
        }

        EncryptRequestDTO request = new EncryptRequestDTO(plainText, keyId);
        EncryptResponseDTO response = epwKmsService.encrypt(request);

        if (response == null || StringUtils.isEmpty(response.getCiphertext())) {
            logger.error("KMS encryption returned null or empty ciphertext.");
            throw new SafePageException(SafePageErrorType.KMS_ENCRYPTION_FAILED, "Encryption failed.");
        }

        return response.getCiphertext();
    }

    public String decryptUsingAWSKey(String cipherText) throws SafePageException {
        if (StringUtils.isEmpty(cipherText)) {
            throw new SafePageException(SafePageErrorType.INVALID_INPUT, "cipherText is required!");
        }

        DecryptRequestDTO request = new DecryptRequestDTO(cipherText);
        DecryptResponseDTO response = epwKmsService.decrypt(request);

        if (response == null || StringUtils.isEmpty(response.getPlaintext())) {
            logger.error("KMS decryption returned null or empty plaintext.");
            throw new SafePageException(SafePageErrorType.KMS_DECRYPTION_FAILED, "Decryption failed.");
        }

        return response.getPlaintext();
    }
}
