22:05:21  [ERROR] Tests run: 2, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 6.866 s <<< FAILURE! - in com.personalcapital.profile.TargetPortfolioAccuracyCalculatorTest
22:05:21  [ERROR] com.personalcapital.profile.TargetPortfolioAccuracyCalculatorTest.testCalculateTargetPortfolioCompletionForCloseToRetirement  Time elapsed: 0.002 s  <<< ERROR!
22:05:21  java.lang.IllegalStateException: Failed to load ApplicationContext for [MergedContextConfiguration@2f95761e testClass = com.personalcapital.profile.TargetPortfolioAccuracyCalculatorTest, locations = ["classpath:pcapPlanningApplicationContext.xml"], classes = [], contextInitializerClasses = [], activeProfiles = [], propertySourceDescriptors = [PropertySourceDescriptor[locations=[classpath:application-test-planning.properties], ignoreResourceNotFound=false, name=null, propertySourceFactory=null, encoding=null]], propertySourceProperties = [], contextCustomizers = [org.springframework.test.context.support.DynamicPropertiesContextCustomizer@0], contextLoader = org.springframework.test.context.support.DelegatingSmartContextLoader, parent = null]
22:05:21  Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [sp-data-common.xml]: org.hibernate.boot.registry.selector.StrategyRegistrationProvider: org.hibernate.cache.jcache.internal.StrategyRegistrationProviderImpl not a subtype
22:05:21  Caused by: java.util.ServiceConfigurationError: org.hibernate.boot.registry.selector.StrategyRegistrationProvider: org.hibernate.cache.jcache.internal.StrategyRegistrationProviderImpl not a subtype
22:05:21  
22:05:21  [ERROR] com.personalcapital.profile.TargetPortfolioAccuracyCalculatorTest.testCalculateTargetPortfolioCompletionForNotCloseToRetirement  Time elapsed: 0 s  <<< ERROR!
22:05:21  java.lang.IllegalStateException: ApplicationContext failure threshold (1) exceeded: skipping repeated attempt to load context for [MergedContextConfiguration@2f95761e testClass = com.personalcapital.profile.TargetPortfolioAccuracyCalculatorTest, locations = ["classpath:pcapPlanningApplicationContext.xml"], classes = [], contextInitializerClasses = [], activeProfiles = [], propertySourceDescriptors = [PropertySourceDescriptor[locations=[classpath:application-test-planning.properties], ignoreResourceNotFound=false, name=null, propertySourceFactory=null, encoding=null]], propertySourceProperties = [], contextCustomizers = [org.springframework.test.context.support.DynamicPropertiesContextCustomizer@0], contextLoader = org.springframework.test.context.support.DelegatingSmartContextLoader, parent = null]


code:
package com.personalcapital.profile;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;

import com.personalcapital.log.PcapLogger;
import com.personalcapital.log.PcapLoggerFactory;
import com.personalcapital.profile.data.Person;
import com.personalcapital.profile.data.PersonDao;
import com.personalcapital.user.data.UserInfo;
import com.personalcapital.user.data.util.UserDataUtils;
import com.safepage.user.data.User;
import com.safepage.user.data.UserDao;

/**
 * @author rnukala Date: Sep 6, 2013
 */
@SpringJUnitConfig(locations = "classpath:pcapPlanningApplicationContext.xml")
@TestPropertySource(locations =
{
		"classpath:application-test-planning.properties"
})
public class TargetPortfolioAccuracyCalculatorTest
{
	private static final PcapLogger logger = PcapLoggerFactory
			.getPcapLogger(TargetPortfolioAccuracyCalculatorTest.class);
	private static final String USER_NAME = "testqa+test@personalcapital.com";

	@Autowired
	private UserDao userDao;

	@Autowired
	private UserDataUtils userDataUtils;

	@Autowired
	private PersonDao personDao;

	@Autowired
	private TargetPortfolioAccuracyCalculator targetPortfolioAccuracyCalculator;

	/**
	 * Test case to calculate target portfolio completion for close to retirement
	 */
	@Test
	public void testCalculateTargetPortfolioCompletionForCloseToRetirement()
	{
		User user = userDao.getUserAssociatedWithEmail(USER_NAME);
		try
		{
			UserInfo userInfo = userDataUtils.getUserInfoForUser(user);
			Assertions.assertNotNull(userInfo);
			Person person = personDao.getSelfPersonForUser(user);
			Assertions.assertNotNull(person);
			Double portfolioCompletion = targetPortfolioAccuracyCalculator
					.calculateTargetPortfolioCompletion(user, person, userInfo, false);
			Assertions.assertNotNull(portfolioCompletion);
		}
		catch (Exception e)
		{
			logger.error("Exception while processing the portfolio completion: " + e.getMessage(),
					e);
		}
	}

	/**
	 * Test case to calculate target portfolio completion for not close to retirement
	 */
	@Test
	public void testCalculateTargetPortfolioCompletionForNotCloseToRetirement()
	{
		User user = userDao.getUserAssociatedWithEmail(USER_NAME);
		try
		{
			UserInfo userInfo = userDataUtils.getUserInfoForUser(user);
			Person person = personDao.getSelfPersonForUser(user);
			Double portfolioCompletion = targetPortfolioAccuracyCalculator
					.calculateTargetPortfolioCompletion(user, person, userInfo, true);
			Assertions.assertNotNull(portfolioCompletion);
		}
		catch (Exception e)
		{
			logger.error("Exception while processing the portfolio completion: " + e.getMessage(),
					e);
		}

	}
}
