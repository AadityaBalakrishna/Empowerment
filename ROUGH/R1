package com.safepage.security.service.impl;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;

import com.personalcapital.log.PcapLogger;
import com.personalcapital.log.PcapLoggerFactory;
import com.safepage.error.SafePageErrorType;
import com.safepage.exception.SafePageException;
import com.safepage.security.service.KMSService;
import com.safepage.security.service.KMSServiceV2;
import com.safepage.util.Utils;

import software.amazon.awssdk.core.SdkBytes;
import software.amazon.awssdk.services.kms.KmsClient;
import software.amazon.awssdk.services.kms.model.DecryptRequest;
import software.amazon.awssdk.services.kms.model.DecryptResponse;
import software.amazon.awssdk.services.kms.model.DescribeKeyRequest;
import software.amazon.awssdk.services.kms.model.DescribeKeyResponse;
import software.amazon.awssdk.services.kms.model.DisabledException;
import software.amazon.awssdk.services.kms.model.EncryptRequest;
import software.amazon.awssdk.services.kms.model.EncryptResponse;
import software.amazon.awssdk.services.kms.model.InvalidCiphertextException;
import software.amazon.awssdk.services.kms.model.KeyUnavailableException;
import software.amazon.awssdk.services.kms.model.ListAliasesRequest;
import software.amazon.awssdk.services.kms.model.ListAliasesResponse;

public class KMSServiceV2Impl implements KMSServiceV2
{
	private KmsClient kmsClient = null;
	private static final PcapLogger logger = PcapLoggerFactory.getPcapLogger(KMSServiceV2Impl.class);
	private static final Charset charset = StandardCharsets.UTF_8;

	private KmsClient getKmsClient()
	{
		if (kmsClient == null)
		{
			kmsClient = KmsClient.create(); // Assumes proper default credentials or environment config
		}
		return kmsClient;
	}

	private KMSServiceV2Impl()
	{
		logger.info("Initialized the KMSServiceV2Impl");
	}

	private static class KMSServiceHolder
	{
		private static final KMSService INSTANCE = new KMSServiceV2();
	}

	public static KMSService getInstance()
	{
		return KMSServiceHolder.INSTANCE;
	}

	@Override
	public String encryptUsingAWSKey(String plainText, String keyId) throws SafePageException
	{
		if (StringUtils.isEmpty(plainText))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "plainText is required!");
		}
		if (StringUtils.isEmpty(keyId))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "keyId is required!");
		}
		try
		{
			EncryptRequest encryptRequest = EncryptRequest.builder()
					.keyId(keyId)
					.plaintext(SdkBytes.fromByteBuffer(getByteBuffer(plainText)))
					.build();

			long start = System.currentTimeMillis();
			EncryptResponse result = getKmsClient().encrypt(encryptRequest);
			long end = System.currentTimeMillis();

			if (result != null && result.ciphertextBlob() != null)
			{
				logger.info("encryptData took {} " + (end - start));
				return Utils.encodeBase64(result.ciphertextBlob().asByteArray());
			}

			logger.error("encryptUsingAWSKey failed, EncryptResult is null!");
			return null;
		}
		catch (DisabledException | KeyUnavailableException ex)
		{
			logger.error("Failed to encryptUsingAWSKey, plainText:{}, keyId:{}, due to:{}",
					plainText, keyId, ExceptionUtils.getMessage(ex), ex);
		}
		catch (Exception ex)
		{
			logger.error("Failed to encryptUsingAWSKey, plainText:{}, keyId:{}, due to:{}",
					plainText, keyId, ExceptionUtils.getMessage(ex), ex);
		}
		return null;
	}

	@Override
	public String decryptUsingAWSKey(String cipherText) throws SafePageException
	{
		if (StringUtils.isEmpty(cipherText))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "cipherText is required!");
		}
		try
		{
			byte[] decodedCipherText = Utils.decodeBase64(cipherText);
			DecryptRequest decryptRequest = DecryptRequest.builder()
					.ciphertextBlob(SdkBytes.fromByteArray(decodedCipherText))
					.build();

			long start = System.currentTimeMillis();
			DecryptResponse result = getKmsClient().decrypt(decryptRequest);
			long end = System.currentTimeMillis();
			logger.info("decryptData took {}" + (end - start));

			return getString(result.plaintext().asByteBuffer());
		}
		catch (InvalidCiphertextException | DisabledException | KeyUnavailableException ex)
		{
			logger.error("Failed to decryptUsingAWSKey, cipherText:{}, due to:{}",
					cipherText, ExceptionUtils.getMessage(ex), ex);
		}
		catch (Exception ex)
		{
			logger.error("Failed to decryptUsingAWSKey, cipherText:{}, due to:{}",
					cipherText, ExceptionUtils.getMessage(ex), ex);
		}
		return null;
	}

	public static String getString(ByteBuffer byteBuffer)
	{
		byte[] byteArray = new byte[byteBuffer.remaining()];
		byteBuffer.get(byteArray);
		return new String(byteArray, charset);
	}

	public static ByteBuffer getByteBuffer(String string)
	{
		return ByteBuffer.wrap(string.getBytes(charset));
	}

	@Override
	public DescribeKeyResponse describeKey(String keyId)
	{
		DescribeKeyRequest describeKeyRequest = DescribeKeyRequest.builder().keyId(keyId).build();
		return getKmsClient().describeKey(describeKeyRequest);
	}

	@Override
	public ListAliasesResponse getKeyAliases(String keyId)
	{
		ListAliasesRequest listAliasesRequest = ListAliasesRequest.builder().limit(10).build();
		return getKmsClient().listAliases(listAliasesRequest);
	}
}

Incompatible types. Found: 'com.safepage.security.service.impl.KMSServiceV2Impl', required: 'com.safepage.security.service.KMSService'
