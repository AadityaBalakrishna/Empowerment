package com.safepage.security.service.impl;

import com.amazonaws.services.kms.AWSKMS;
import com.amazonaws.services.kms.model.*;
import com.safepage.exception.SafePageException;
import com.safepage.util.Utils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.nio.ByteBuffer;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;

public class KMSServiceImplTest {

    private KMSServiceImpl kmsService;
    private AWSKMS mockKmsClient;

    @BeforeEach
    void setUp() {
        kmsService = Mockito.spy(new KMSServiceImpl());
        mockKmsClient = Mockito.mock(AWSKMS.class);
        Mockito.doReturn(mockKmsClient).when(kmsService).getKMSClient();
    }

    // -----------------------
    // ENCRYPT TESTS
    // -----------------------

    @Test
    void testEncryptSuccess() throws SafePageException {
        EncryptResult result = new EncryptResult()
                .withCiphertextBlob(ByteBuffer.wrap("encrypted".getBytes()));
        Mockito.when(mockKmsClient.encrypt(any(EncryptRequest.class))).thenReturn(result);

        String encoded = kmsService.encryptUsingAWSKey("plain", "key123");
        assertNotNull(encoded);
    }

    @Test
    void testEncryptMissingPlainText() {
        SafePageException ex = assertThrows(SafePageException.class,
                () -> kmsService.encryptUsingAWSKey(null, "key123"));
        assertTrue(ex.getMessage().contains("plainText is required"));
    }

    @Test
    void testEncryptMissingKeyId() {
        SafePageException ex = assertThrows(SafePageException.class,
                () -> kmsService.encryptUsingAWSKey("plain", ""));
        assertTrue(ex.getMessage().contains("keyId is required"));
    }

    @Test
    void testEncryptDisabledException() {
        Mockito.when(mockKmsClient.encrypt(any())).thenThrow(new DisabledException("disabled"));
        String result = kmsService.encryptUsingAWSKey("plain", "key123");
        assertNull(result);
    }

    @Test
    void testEncryptKeyUnavailableException() {
        Mockito.when(mockKmsClient.encrypt(any())).thenThrow(new KeyUnavailableException("key unavailable"));
        String result = kmsService.encryptUsingAWSKey("plain", "key123");
        assertNull(result);
    }

    @Test
    void testEncryptGenericException() {
        Mockito.when(mockKmsClient.encrypt(any())).thenThrow(new RuntimeException("boom"));
        String result = kmsService.encryptUsingAWSKey("plain", "key123");
        assertNull(result);
    }

    @Test
    void testEncryptNullResult() {
        Mockito.when(mockKmsClient.encrypt(any())).thenReturn(null);
        String result = kmsService.encryptUsingAWSKey("plain", "key123");
        assertNull(result);
    }

    @Test
    void testEncryptNullCiphertextBlob() {
        EncryptResult resultObj = new EncryptResult().withCiphertextBlob(null);
        Mockito.when(mockKmsClient.encrypt(any())).thenReturn(resultObj);
        String result = kmsService.encryptUsingAWSKey("plain", "key123");
        assertNull(result);
    }

    // -----------------------
    // DECRYPT TESTS
    // -----------------------

    @Test
    void testDecryptSuccess() throws SafePageException {
        ByteBuffer plainBuffer = ByteBuffer.wrap("plain".getBytes());
        DecryptResult result = new DecryptResult().withPlaintext(plainBuffer);
        Mockito.when(mockKmsClient.decrypt(any(DecryptRequest.class))).thenReturn(result);

        // We must provide Base64 encoded cipher text
        String cipherText = Utils.encodeBase64("dummyCipher".getBytes());
        String decoded = kmsService.decryptUsingAWSKey(cipherText);
        assertEquals("plain", decoded);
    }

    @Test
    void testDecryptMissingCipherText() {
        SafePageException ex = assertThrows(SafePageException.class,
                () -> kmsService.decryptUsingAWSKey(""));
        assertTrue(ex.getMessage().contains("cipherText is required"));
    }

    @Test
    void testDecryptKeyUnavailableException() {
        Mockito.when(mockKmsClient.decrypt(any())).thenThrow(new KeyUnavailableException("not available"));
        String cipherText = Utils.encodeBase64("dummyCipher".getBytes());
        String result = kmsService.decryptUsingAWSKey(cipherText);
        assertNull(result);
    }

    @Test
    void testDecryptInvalidCiphertextException() {
        Mockito.when(mockKmsClient.decrypt(any())).thenThrow(new InvalidCiphertextException("invalid"));
        String cipherText = Utils.encodeBase64("dummyCipher".getBytes());
        String result = kmsService.decryptUsingAWSKey(cipherText);
        assertNull(result);
    }

    @Test
    void testDecryptDisabledException() {
        Mockito.when(mockKmsClient.decrypt(any())).thenThrow(new DisabledException("disabled"));
        String cipherText = Utils.encodeBase64("dummyCipher".getBytes());
        String result = kmsService.decryptUsingAWSKey(cipherText);
        assertNull(result);
    }

    @Test
    void testDecryptGenericException() {
        Mockito.when(mockKmsClient.decrypt(any())).thenThrow(new RuntimeException("boom"));
        String cipherText = Utils.encodeBase64("dummyCipher".getBytes());
        String result = kmsService.decryptUsingAWSKey(cipherText);
        assertNull(result);
    }
}
