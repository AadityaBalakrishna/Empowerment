
@SpringBootTest( classes = {
        EpwKmsServiceImpl.class,
        EpwKmsServiceImplIntegrationTest.KMSTestConfig.class
})
@Testcontainers
public class EpwKmsServiceImplIntegrationTest {

        private static final String KEY_ALIAS = "alias/app/pcap/pcap/system_primary/v1";
        private static String keyId;

        @Container
        static LocalStackContainer localStack = new LocalStackContainer(
                DockerImageName.parse("localstack/localstack:3.0"))
                .withServices(LocalStackContainer.Service.KMS)
                .withReuse(true);

        @DynamicPropertySource
        static void overrideProperties(DynamicPropertyRegistry registry){
                registry.add("cloud.aws.region.static", localStack::getRegion);
                registry.add("cloud.aws.credentials.access-key", localStack::getAccessKey);
                registry.add("cloud.aws.credentials.secret-key", localStack::getSecretKey);
        }

        @TestConfiguration
        static class KMSTestConfig {
                // Additional test configuration can be added here if needed
                @Bean
                public AWSKMS awskms(){
                        return AWSKMSClientBuilder.standard()
                                .withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(
                                        localStack.getEndpointOverride(LocalStackContainer.Service.KMS).toString(),
                                        localStack.getRegion()))
                                .withCredentials(new AWSStaticCredentialsProvider(
                                        new BasicAWSCredentials(localStack.getAccessKey(), localStack.getSecretKey())))
                                .build();
                }

                @Bean
                public EpwKmsService epwKmsService(AWSKMS awskms) {
                        return new EpwKmsServiceImpl(awskms);
                }
        }

        @Autowired
        private AWSKMS awskms;

        @BeforeEach
        void setUpKmsKeyAlias(){
                if (keyId == null) {
                        CreateKeyResult keyResult = awskms.createKey();
                        keyId = keyResult.getKeyMetadata().getKeyId();

                        awskms.createAlias(new CreateAliasRequest()
                                .withAliasName(KEY_ALIAS)
                                .withTargetKeyId(keyId));
                }
        }
        @Autowired
        private EpwKmsService epwKmsService;

        @Test
        void testEncryptDecryptWithAlias() {
                String plaintext = "hello-localstack-kms";

                // Encrypt
                EncryptRequest encryptRequest = new EncryptRequest()
                        .withKeyId(KEY_ALIAS)
                        .withPlaintext(ByteBuffer.wrap(plaintext.getBytes(StandardCharsets.UTF_8)));

                EncryptResult encryptResult = awskms.encrypt(encryptRequest);
                ByteBuffer ciphertextBlob = encryptResult.getCiphertextBlob();
                assertNotNull(ciphertextBlob);

                // Decrypt
                DecryptRequest decryptRequest = new DecryptRequest()
                        .withCiphertextBlob(ciphertextBlob);

                DecryptResult decryptResult = awskms.decrypt(decryptRequest);
                String decryptedText = StandardCharsets.UTF_8.decode(decryptResult.getPlaintext()).toString();

                assertEquals(plaintext, decryptedText);
        }
}


this is what i have now implement the changes in this, keep the test config and testcontainer logic
