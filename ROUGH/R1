Created by 
Add your avatar Balakrishna, Aaditya, last updated just a moment ago  3 minute read
Objective:-
To migrate the pcap-planning module from the pcap-server repository to the pcap-fp-service repository to improve as part of pcap-server-decomposition task
Current State:-
Repository: pcap-server
Module: com.personalcapital:pcap-planning
It is depending on:
com.personalcapital:pcap-data
com.personalcapital:pcap-common-data
com.personalcapital:pcap-command
com.personalcapital:pcap-service
com.personalcapital:pcap-service-client
com.personalcapital:pcap-core-services
com.personalcapital:pcap-planning-common
com.personalcapital:pcap-test-junit5:test:exclusions=[org.springframework.boot:spring-boot-starter]
com.personalcapital:transaction-api-client:exclusions=[org.springframework.boot:spring-boot-starter]
com.safepage:epw-salesforce-helper
com.safepage:sp-data
com.empower.epw:epw-springockito
org.apache.poi:poi
org.apache.commons:commons-math3
org.springframework.data:spring-data-commons
org.glassfish.jaxb:jaxb-runtime
jakarta.xml.bind:jakarta.xml.bind-api
Consumers:
No modules in pcap-server depend on pcap-planning
15 consumers across all value streams, are listed below (Bottom of the page)
Usage Analysis of pcap-planning module files in pcap-fp-service:-
The src folder of pcap-planning contains a total of 64 classes - 55 non enum classes, and 9 enum classes
29 of these 55 (53%) of the non enum classes are directly consumed in the pcap-fp-service repo modules (pcap-fp-common-service, pcap-fp-manager, pcap-fp-service, pcap-planning-advice, pcap-proposal) and none of them are used in pcap-server.
The classes used:
com.personalcapital.advice.util: HistoricalReturnsCalculator
com.personalcapital.calculator.engine: MonteCarloSimulator
com.personalcapital.calculator.historical: HistoricalReturnsCalculator
com.personalcapital.calculator.seed: AnnualData
com.personalcapital.efficientFrontier: PortfolioAllocationTakeawayType, MonteCarloPortfolioComparisonResult, EfficientFrontierCalculator, ICAllocationTakeawayType
com.personalcapital.investing: StrategyProjectionManager
com.personalcapital.investing.data: MonteCarloPortfolioComparisonResult, PortfolioAllocationTakeawayType, UserPortfolioReturnType, TargetPortfolioComparisonResult, SectorComparisonResult, SectorType, StyleComparisonResult, StyleType, ICAllocationTakeawayType,UserPortfolioAllocationType
com.personalcapital.investing.factResult: HarvestingBenefitFactResult, DataSeriesFactResult, IdleCashFactResult, FundFeeFactResult, TacticalWeightedResult, AssetLocationFactResult, TaxLossHarvestResult
com.personalcapital.investing.helper: StrategySelectionHelper
com.personalcapital.mylife.service: StrategySelectionHelper, EfficientFrontierCalculator
These classes represent core financial planning and investing functionality which aligns with the business logic specific to financial planning
Proposed State:-
Target Repository: pcap-fp-service
New Module: com.empower.epw:pcap-planning
Dependencies:
Retain all current dependencies.
Ensure compatibility with the pcap-fp-service repository structure.
Steps for Migration:-
 Analyze Dependencies
Identify all dependencies of `pcap-planning`
 Refactor Code
Remove any server-specific logic or dependencies.
Ensure the module is self-contained and reusable across applications.
 Create New Module in pcap-fp-service
Add a new directory pcap-planning in the pcap-fp-service repository.
Create a pom.xml for the new module with the existing dependencies.
 Migrate Code
Move all source files (`src/main/java` and `src/main/resources`) from pcap-server/pcap-planning to the new module in pcap-fp-service.
 Update Build Configuration
Add the new module to the pcap-fp-service parent pom.xml
  <modules>
      <module>pcap-planning</module>
  </modules>
 Update References
Update all references to pcap-planning in the pcap-fp-service repository to point to the new groupId.
- Note:- Will retire this module in pcap-server once all consumers are using com.empower.epw:pcap-planning.
 Test the Migration
Build and test the pcap-fp-service repository to ensure the new module works as expected.
Test the pcap-server repository to verify compatibility with the migrated module.
 Documentation
Update the documentation in both repositories to reflect the new module structure.


Validation carried out to verify migration of pcap-planning doesn't break the exsiting process of pcap-fp-service
1. Module Migration
Old Location: pcap-server
New Location: pcap-fp-service
Group ID Change:
                       Old: com.personalcapital:pcap-planning
                     New: com.empower.epw:pcap-planning

2. Parent POM Update
Verified that the pcap-planning module is added to the <modules> section of the parent POM (pcap-fp-repo/pom.xml).
Confirmed that the groupId in pcap-planning/pom.xml is updated to com.empower.epw.

3. Dependency Validation
Checked all modules in the repository (fp-service) that previously used com.personalcapital:pcap-planning to ensure they now reference com.empower.epw:pcap-planning.
Ran mvn dependency:tree to confirm proper dependency resolution.

4. Build Validation
Ran the following Maven commands:
mvn clean install -DskipTests
mvn test
Verified that the build completed successfully without errors.

5. Jenkins Pipeline Validation
Checked Jenkins pipelines for both develop and sandbox branches:
Develop: Build and tests passed (green status) - MR was Merged and reverted
Sandbox: Build and tests passed after merging (green status).

Sandbox MR - https://gitlab.retirementpartner.com/pwt-foundation-cdx/pcap-fp-service/-/merge_requests/5274 

6. Runtime Validation
After merging the updated repository sandbox deployed to devtrunk the environment.
Verified that the application runs without issues and all modules function correctly.

7. API Validation
Confirmed that APIs exposed by pcap-planning are accessible and functional in the sandbox environment.

To confirm that the APIs exposed by pcap-planning are accessible and functional in the sandbox environment, the following steps were performed:

a. API Accessibility
Swagger Documentation: Verified that the APIs are listed in the Swagger UI endpoint for the sandbox environment.
Swagger URL: https://pcsvc.dt.pcapqa.app/fp/swagger-ui.html

b. Functional Validation
Request-Response Validation: Sent sample requests to the endpoints and verified that the responses match the expected output (e.g., correct JSON structure, data values, etc.).
Integration Tests: Ran integration tests specific to pcap-planning to ensure the APIs interact correctly with other modules and services.

c. Error Handling
Verified that the APIs handle edge cases and return appropriate error codes (e.g., 400 Bad Request, 404 Not Found, 500 Internal Server Error) for invalid inputs or system errors.

*Screenshots attached in the Jira below to show the api endpoints hit after the sandbox image is deployed in devtrunk 
Project TaskPLAT-14826 - pcap-planning: validation with fp CLOSED

Project TaskPLAT-14828 - pcap-planning: QA validation CLOSED


Results of validation
Build Status: Successful.
Tests: Passed.
Jenkins Pipeline: Green for both develop (MR only) and sandbox.
Sandbox Deployment: Successful.
Dependencies: Updated and resolved correctly.


List of pcap-planning consumers:

GROUP	CONSUMER
PWT Foundation CDX	pcap-admin
epw-rp
epw-mcarlo
epw-ic
pcap-apps-common  
pcap-root  
pcap-fp-service  
epw-batch-fcdx  
PWT Retail Solutions	epw-batch-rs
pcap-custodian
epw-custodian-transfer  
pcap-agent
pcap-salesforce  
PWT Marketing and Communications	pcap-ace  
epw-batch-mc  


this is the document
