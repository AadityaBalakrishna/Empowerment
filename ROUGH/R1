public String encryptUsingAWSKey(String plainText, String keyId) throws SafePageException
	{
		if (StringUtils.isEmpty(plainText))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "plainText is required!");
		}
		if (StringUtils.isEmpty(keyId))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "keyId is required!");
		}
		try
		{
			EncryptRequest encryptRequest = new EncryptRequest().withKeyId(keyId)
					.withPlaintext(getByteBuffer(plainText));
			long start = System.currentTimeMillis();
			EncryptResult result = kmsClient.encrypt(encryptRequest);
			if (result != null && result.getCiphertextBlob() != null)
			{
				long end = System.currentTimeMillis();
				logger.info("[{}] encryptData took {} ", getAwsSdkVersion(), end - start);
				return Utils.encodeBase64(result.getCiphertextBlob()
						.array());
			}
			else
			{
				logger.error("[{}] encryptUsingAWSKey failed, EncryptResult is null for keyId: {}",
						getAwsSdkVersion(), keyId);
				throw AwsExceptionHandler.handleKMSException("encrypt", keyId,
						new IllegalStateException("EncryptResult or CiphertextBlob is null"));
			}
		}
		catch (DisabledException | KeyUnavailableException | UnsupportedEncodingException ex)
		{
			logger.error("[{}] Failed to encrypt, plainText:{}, keyId:{}, due to:{}",
					getAwsSdkVersion(), plainText, keyId, ExceptionUtils.getMessage(ex), ex);
			throw AwsExceptionHandler.handleKMSException("encrypt", keyId, ex);
		}
	}

it's using this: void error(String format, Object... args);
i want to use this: void error(String msg, Throwable thrown);

referenec: 
	private S3OperationException handleS3Exception(String message, String bucket, String key,
												   Exception e) {
		if (e instanceof AmazonServiceException ase) {
			logger.error(String.format("[%s] %s Bucket: %s, Key: %s. AWS Error Code: %s, Request ID: %s, HTTP Status: %d",
					getAwsSdkVersion(), message, bucket, key, ase.getErrorCode(), ase.getRequestId(), ase.getStatusCode()), ase);
		} else {
			logger.error(String.format("[%s] %s Bucket: %s, Key: %s. Error: %s",
					getAwsSdkVersion(), message, bucket, key, e.getMessage()), e);
		}
		return new S3OperationException(message, e);
	}
