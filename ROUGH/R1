package com.empower.epw.aws.kms.config;

import com.amazonaws.services.kms.AWSKMS;
import com.empower.epw.aws.api.kms.EpwKmsService;
import com.empower.epw.sdk.v1.adapter.kms.EpwKmsServiceImpl as EpwKmsServiceImplV1;
import com.empower.epw.sdk.v2.adapter.kms.EpwKmsServiceImpl as EpwKmsServiceImplV2;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.test.context.TestPropertySource;
import software.amazon.awssdk.services.kms.KmsClient;

import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;

class EpwKmsAutoConfigIT {

    @SpringBootApplication(exclude = DataSourceAutoConfiguration.class)
    static class TestApplication {}

    /**
     * SCENARIO 1: Consumer provides custom AWSKMS client. v1 service should use it.
     */
    @Nested
    @SpringBootTest(classes = { TestApplication.class, ConsumerProvidesClientTest.CustomClientConfig.class })
    class ConsumerProvidesClientTest {

        @TestConfiguration
        static class CustomClientConfig {
            @Bean
            public AWSKMS customAwsKmsClient() {
                return mock(AWSKMS.class, "consumerCustomClient");
            }
        }

        @Autowired
        private AWSKMS injectedClient;

        @Autowired
        private EpwKmsServiceImplV1 serviceImpl;

        @Test
        void serviceShouldUseConsumerProvidedClient() {
            // Uncomment after adding getKmsClient() to EpwKmsServiceImplV1 for test verification
            // assertSame(injectedClient, serviceImpl.getKmsClient());
        }
    }

    /**
     * SCENARIO 2: Property set to v2. Expect v2 adapter.
     */
    @Nested
    @SpringBootTest(classes = TestApplication.class)
    @TestPropertySource(properties = "epw.aws.kms.sdk.version=v2")
    class V2PropertySetTest {

        @Autowired
        private EpwKmsService kmsService;

        @Test
        void shouldUseV2Implementation() {
            assertTrue(kmsService instanceof EpwKmsServiceImplV2);
        }
    }

    /**
     * SCENARIO 3: No property â†’ fallback to v1 adapter.
     */
    @Nested
    @SpringBootTest(classes = TestApplication.class)
    class DefaultV1FallbackTest {

        @Autowired
        private EpwKmsService kmsService;

        @Test
        void shouldUseV1Implementation() {
            assertTrue(kmsService instanceof EpwKmsServiceImplV1);
        }
    }
}
