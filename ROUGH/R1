package com.safepage.security.service.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.amazonaws.services.kms.model.AliasListEntry;
import com.amazonaws.services.kms.model.DescribeKeyResult;
import com.amazonaws.services.kms.model.KeyMetadata;
import com.amazonaws.services.kms.model.ListAliasesResult;
import com.empower.epw.aws.api.kms.dto.DescribeKeyResponseDTO;
import com.empower.epw.aws.api.kms.dto.ListAliasesResponseDTO;
import com.empower.epw.aws.api.kms.exception.KMSOperationException;
import com.personalcapital.log.PcapLogger;
import com.personalcapital.log.PcapLoggerFactory;
import com.safepage.error.SafePageErrorType;
import com.safepage.exception.SafePageException;
import com.empower.epw.aws.api.kms.EpwKmsService;
import com.safepage.security.service.KMSService;

/**
 * @author dizadi
 */
public class KMSServiceImpl implements KMSService
{
	private static PcapLogger logger = PcapLoggerFactory.getPcapLogger(KMSServiceImpl.class);

	private final EpwKmsService epwKmsService;

	@Autowired
	public KMSServiceImpl(@Qualifier("epwKmsService") EpwKmsService epwKmsService)
	{
		this.epwKmsService = epwKmsService;
	}

	/**
	 * Encrypt data key (system secondary key) under AWS CMK Key using IAM role to access the key
	 * AWS CMK
	 *
	 * @throws SafePageException
	 */
	@Override
	// @Retryable(value =
	// {
	// Exception.class
	// }, maxAttempts = 3, backoff = @Backoff(delay = 1000))
	public String encryptUsingAWSKey(String plainText, String keyId) throws SafePageException
	{
		if (StringUtils.isEmpty(plainText))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "plainText is required!");
		}
		if (StringUtils.isEmpty(keyId))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "keyId is required!");
		}
		try
		{
			return epwKmsService.encryptUsingAWSKey(plainText, keyId);
		}
		catch (KMSOperationException ex)
		{
			logger.error("Failed to encryptUsingAWSKey, plainText:{}, keyId:{}, due to:{}",
					plainText, keyId, ExceptionUtils.getMessage(ex), ex);
			return null;
		}
	}

	/**
	 * Decrypt encrypted data key under AWS CMK Key using IAM role to access the key
	 */
	@Override
	// @Retryable(value =
	// {
	// Exception.class
	// }, maxAttempts = 3, backoff = @Backoff(delay = 1000))
	public String decryptUsingAWSKey(String cipherText) throws SafePageException
	{
		if (StringUtils.isEmpty(cipherText))
		{
			throw new SafePageException(SafePageErrorType.INVALID_INPUT, "cipherText is required!");
		}
		try
		{
			return epwKmsService.decryptUsingAWSKey(cipherText);
		}
		catch (KMSOperationException ex)
		{
			logger.error("Failed to decryptUsingAWSKey, cipherText:{}, due to:{}", cipherText,
					ExceptionUtils.getMessage(ex), ex);
			return null;
		}
	}

	/**
	 * Create a new customer master key. <br>
	 * Customer master key (CMK) is designed to encrypt and decrypt data keys (System Secondary
	 * Key). CMK cannot be used to encrypt/decrypt data more than 4 KB (4096 bytes) of data.
	 */
	// public void createCMK()
	// {
	// String desc = "PCAP Master Key for encrypting system secondary keys";
	// CreateKeyRequest req = new CreateKeyRequest().withDescription(desc);
	// CreateKeyResult result = getKMSClient().createKey(req);
	// }

	@Override
	@Deprecated
	public DescribeKeyResult describeKey(String keyId)
	{
		DescribeKeyResponseDTO dto = epwKmsService.describeKey(keyId);

		KeyMetadata metadata = new KeyMetadata().withKeyId(dto.getKeyId())
				.withArn(dto.getKeyArn())
				.withKeyState(dto.getKeyState())
				.withEnabled(dto.isEnabled());

		return new DescribeKeyResult().withKeyMetadata(metadata);
	}

	@Override
	@Deprecated
	public ListAliasesResult getKeyAliases(String keyId)
	{
		ListAliasesResponseDTO dto = epwKmsService.listAliases();

		List<AliasListEntry> aliasEntries = dto.getAliases()
				.stream()
				.map(alias -> new AliasListEntry().withAliasName(alias.getAliasName())
						.withTargetKeyId(alias.getTargetKeyId()))
				.collect(Collectors.toList());

		return new ListAliasesResult().withAliases(aliasEntries);
	}
}


i have been given this review comment:
Looks Good, 
 
for safety, we can catch general Exception along with KMSException
 
catch (Exception ex)
