# Aexp Config POC

This is a small Spring Boot POC project demonstrating how to integrate the **epw-starter-config-store** module into a Spring Boot 3.3 application. The project verifies loading configuration properties from the config-store, profile inference, and local profile fallbacks.

---

## Features

* Integration of **EpwConfigServiceBootstrapConfiguration** from the starter.
* REST endpoints to:

  * Check resolved config store URI, label, and profile.
  * Display values from injected properties.
  * Debug and confirm starter beans loaded.
* Profile-based configurations (`application.properties`, `application-local.properties`, `bootstrap.properties`, `bootstrap-local.properties`).
* Unit and integration tests covering:

  * Profile resolution
  * Local overrides
  * Config store bean loading
  * Exception scenarios when required properties are missing.

---

## Endpoints

* `GET /hello` → Returns value of `app.message`.
* `GET /config-store/info` → Returns URI, label, and profile used by config store.
* `GET /config-store/debug` → Returns the raw `ConfigClientProperties` object.
* `GET /starter/beans` → Verifies that `EpwConfigServiceBootstrapConfiguration` is loaded.

---

## Profiles & Properties

* **application.properties** → Default app configs.
* **application-local.properties** → Overrides for local profile.
* **bootstrap.properties** → Config store enabled by default, sets `aws.account` and `identity.stage`.
* **bootstrap-local.properties** → Config store disabled locally with `spring.cloud.config.enabled=false`.

`pcsvc.server.useLocalEKSUrl` controls whether the config client points to **internal** or **external** URLs:

* `true` → internal Kubernetes service URL.
* `false` → external URL.
* not set → defaults to `false` (external URL).

---

## Why `@ImportAutoConfiguration(EpwConfigServiceBootstrapConfiguration.class)` is Required

In the original **`epw-starter-config-store`** module, the auto-configuration class
`EpwConfigServiceBootstrapConfiguration` was registered using the **Spring Boot 2.2 mechanism**:

```
META-INF/spring.factories
```

with an entry like:

```properties
org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
com.empower.epw.starter.config.store.EpwConfigServiceBootstrapConfiguration
```

This worked in Spring Boot ≤2.6, where `spring.factories` was the standard way of loading auto-configurations.

### Change in Spring Boot 3.x

Starting from **Spring Boot 3.0+** (in alignment with Spring Framework 6 and JDK 17),
the `spring.factories` mechanism for auto-configuration is **deprecated and no longer used**.
Instead, Spring Boot introduced a new file-based registration system:

```
META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports
```

If the `epw-starter-config-store` module hasn’t been upgraded to this new format,
its auto-configuration class (`EpwConfigServiceBootstrapConfiguration`) will **not load automatically** in Boot 3.3.

### Solution in the POC

Because the `epw-starter-config-store` you’re using is still in the **old style (Spring Boot 2.2 era)**,
the class must be explicitly imported in your application to ensure it is loaded:

```java
@SpringBootApplication
@ImportAutoConfiguration({ EpwConfigServiceBootstrapConfiguration.class })
public class AexpConfigApplication {
    public static void main(String[] args) {
        SpringApplication.run(AexpConfigApplication.class, args);
    }
}
```

### Key Point

* In production, once the starter is **migrated to Spring Boot 3.x conventions**
  (by moving the auto-configuration class into `spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports`),
  this explicit import will **no longer be required**.
* In this POC, we used `@ImportAutoConfiguration` to **bridge the gap** so the module works under Boot 3.3.

---

## Running the Application

```bash
./mvnw spring-boot:run
```

To run with **local profile**:

```bash
./mvnw spring-boot:run -Dspring-boot.run.profiles=local
```

---

## Running Tests

```bash
./mvnw test
```

Tests cover:

* Default and local profile behaviors.
* Config store integration.
* Profile inference logic.
* Validation of bean creation/exceptions.

---

## Notes

* This POC does **not** spin up a local config store server.
* Instead, it simulates property resolution using `bootstrap*.properties` and test overrides.
* The goal is to validate that `epw-starter-config-store` wiring works in Spring Boot 3.3.
