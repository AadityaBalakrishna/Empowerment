
[2025-08-20T09:45:36.593Z] Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'epwKmsService': Unsatisfied dependency expressed through constructor parameter 0: Could not convert argument value of type [java.lang.String] to required type [java.lang.Class]: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Class'; Could not find class [com.empower.epw.aws.api.kms.EpwKmsService]

i seee this error in persistenceApplicationContext.xml, here i haven't directly declared the beans in the xml, because
persistenceApplicationContext.xml  -imports-> sp-base-test.xml -imports-> sp-data-test.xml -imports-> sp-security-test.xml where i have declared this:

	<bean id="awsKmsClient" class="com.amazonaws.services.kms.AWSKMSClientBuilder" factory-method="defaultClient" />
	<bean id="epwKmsService" class="com.empower.epw.aws.v1.kms.EpwKmsServiceImpl">
		<constructor-arg ref="awsKmsClient"/>
	</bean>

but sp-security-test.xml -imports-> sp-security-keystorage-test.xml which has 

<mockito:mock id="epwKmsService" class="com.empower.epw.aws.api.kms.EpwKmsService" />

the error explaination:
So now you have two competing bean definitions for the same id: epwKmsService.
Spring sees this conflict and when the mockito:mock tag is parsed, it fails because the schema for mockito: isn’t loaded and it falls back to treating it like a bean definition with a string "com.empower.epw.aws.api.kms.EpwKmsService" instead of an actual Class. That’s why you see:

Could not convert argument value of type [java.lang.String] to required type [java.lang.Class];
Could not find class [com.empower.epw.aws.api.kms.EpwKmsService]
