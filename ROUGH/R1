package com.empower.epw.aws.kms.config;

import com.amazonaws.services.kms.AWSKMS;
import com.amazonaws.services.kms.AWSKMSClientBuilder;
import com.empower.epw.aws.api.kms.EpwKmsService;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.condition.*;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.util.StringUtils;

import software.amazon.awssdk.services.kms.KmsClient;

/**
 * Auto-configuration for AWS KMS clients and services.
 * <p>
 * This configuration class provides beans for AWS Key Management Service (KMS) clients and
 * services, supporting both AWS SDK v1 and v2. The desired SDK version can be specified using the
 * property {@code epw.aws.kms.sdk-version}. If no version is specified, the v1 implementation is
 * used by default.
 * </p>
 * <p>
 * Beans are conditionally created based on the specified SDK version, and credentials are
 * configured using either the AWS profile or the default credentials provider chain.
 * </p>
 */
@Configuration
public class EpwKmsAutoConfig
{

	private static final Logger logger = LoggerFactory.getLogger(EpwKmsAutoConfig.class);
	private static final String DEFAULT_AWS_REGION = "us-west-2";
	public static final String AWS_REGION_KEY = "aws.region";
	public static final String AWS_PROFILE = "aws.profile";

	/**
	 * Creates a KMS client for AWS SDK v2.
	 * <p>
	 * This bean is created only if the property {@code epw.aws.kms.sdk-version} is set to
	 * {@code v2}. The client is configured with credentials from either the specified AWS profile
	 * or the default credentials provider chain, and the region is determined from the
	 * {@code aws.region} property.
	 * </p>
	 *
	 * @return A configured {@link KmsClient} instance for AWS SDK v2.
	 */
	@Bean("epwKmsClient")
	@ConditionalOnProperty(name = "epw.aws.kms.sdk-version", havingValue = "v2")
	public KmsClient kmsClient()
	{
		String awsProfile = System.getProperty(AWS_PROFILE);
		software.amazon.awssdk.auth.credentials.AwsCredentialsProvider credentialsProvider;
		if (StringUtils.hasText(awsProfile))
		{
			logger.info("Using AWS profile for AWS SDK v2: {}", awsProfile);
			credentialsProvider = software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider
					.builder()
					.profileName(awsProfile)
					.build();
		}
		else
		{
			logger.info("Using default AWS credentials provider chain for SDK v2.");
			credentialsProvider = software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider
					.create();
		}

		String awsRegion = System.getProperty(AWS_REGION_KEY, DEFAULT_AWS_REGION);
		logger.info("Creating KmsClient for AWS SDK v2 with region: {}", awsRegion);
		return KmsClient.builder()
				.credentialsProvider(credentialsProvider)
				.region(software.amazon.awssdk.regions.Region.of(awsRegion))
				.build();
	}

	/**
	 * Creates the primary EpwKmsService bean using the AWS SDK v2 implementation.
	 *
	 * @param kmsClient
	 *            The shared AWS SDK v2 client.
	 * @return The EpwKmsServiceImpl instance for AWS SDK v2.
	 */
	@Bean(name = "epwKmsService")
	@ConditionalOnProperty(name = "epw.aws.kms.sdk-version", havingValue = "v2")
	public EpwKmsService epwKmsServiceV2(@Qualifier("epwKmsClient") KmsClient kmsClient)
	{
		logger.info("Creating EpwKmsServiceImpl bean for AWS SDK v2");
		return new com.empower.epw.aws.v2.kms.EpwKmsServiceImpl(kmsClient);
	}

	/**
	 * Creates an AWS KMS client for AWS SDK v1.
	 * <p>
	 * This bean is created only if the property {@code epw.aws.kms.sdk-version} is set to
	 * {@code v1} or is not specified. The client is configured with credentials from either the
	 * specified AWS profile or the default credentials provider chain, and the region is determined
	 * from the {@code aws.region} property.
	 * </p>
	 *
	 * @return A configured {@link AWSKMS} instance for AWS SDK v1.
	 */
	@Bean(name = "epwAWSKMSClient")
	// Temporarily disable v1 bean loading; re-enable with matchIfMissing=true before refactoring consumers
	@ConditionalOnProperty(name = "epw.aws.kms.sdk-version", havingValue = "v1")
	public AWSKMS awsKmsClient()
	{
		String awsRegion = System.getProperty(AWS_REGION_KEY, DEFAULT_AWS_REGION);
		String awsProfile = System.getProperty(AWS_PROFILE);
		com.amazonaws.auth.AWSCredentialsProvider credentialsProvider;
		if (StringUtils.hasText(awsProfile))
		{
			logger.info("Using AWS profile for AWS SDK v1: {}", awsProfile);
			credentialsProvider = new com.amazonaws.auth.profile.ProfileCredentialsProvider(
					awsProfile);
		}
		else
		{
			logger.info("Using default AWS credentials provider chain.");
			credentialsProvider = com.amazonaws.auth.DefaultAWSCredentialsProviderChain
					.getInstance();
		}
		logger.info("Creating AWSKMS client with region for AWS SDK v1: {}", awsRegion);
		return AWSKMSClientBuilder.standard()
				.withCredentials(credentialsProvider)
				.withRegion(awsRegion)
				.build();
	}

	/**
	 * Creates the primary EpwKmsService bean using the AWS SDK v1 implementation.
	 *
	 * @param awsKmsClient
	 *            The shared AWS SDK v1 client.
	 * @return The EpwKmsServiceImpl instance for AWS SDK v1.
	 */
	@Bean(name = "epwKmsService")
	// Temporarily disable v1 bean loading; re-enable with matchIfMissing=true before refactoring consumers
	@ConditionalOnProperty(name = "epw.aws.kms.sdk-version", havingValue = "v1")
	public EpwKmsService epwKmsServiceV1(@Qualifier("epwAWSKMSClient") AWSKMS awsKmsClient)
	{
		logger.info("Creating EpwKmsService bean for AWS SDK v1.");
		return new com.empower.epw.aws.v1.kms.EpwKmsServiceImpl(awsKmsClient);
	}
}

tihs is the autoconfig clAss


and this is the service
package com.empower.epw.aws.api.kms;

import com.empower.epw.aws.api.kms.dto.DescribeKeyResponseDTO;
import com.empower.epw.aws.api.kms.dto.ListAliasesResponseDTO;
import com.safepage.exception.SafePageException;

/**
 * {@code EpwKmsService} provides an abstraction over AWS Key Management Service (KMS) operations,
 * supporting encryption, decryption, key description, and alias listing.
 * <p>
 * Implementations of this interface (e.g., using AWS SDK v1 or v2) allow consumers to securely
 * manage cryptographic keys and perform key-related operations in a version-agnostic way.
 */
public interface EpwKmsService
{

	/**
	 * Encrypts a plaintext string using an AWS KMS key identified by its keyId.
	 *
	 * @param plainText
	 *            the plaintext string to encrypt
	 * @param keyId
	 *            the identifier of the KMS key to use for encryption
	 * @return the encrypted ciphertext as a string
	 * @throws SafePageException
	 *             if encryption fails or the key cannot be accessed
	 */
	String encryptUsingAWSKey(String plainText, String keyId) throws SafePageException;

	/**
	 * Decrypts a ciphertext string using the default AWS KMS key.
	 *
	 * @param cipherText
	 *            the encrypted string to decrypt
	 * @return the decrypted plaintext string
	 * @throws SafePageException
	 *             if decryption fails or the key cannot be accessed
	 */
	String decryptUsingAWSKey(String cipherText) throws SafePageException;

	/**
	 * Describes a KMS key using its keyId or alias.
	 *
	 * @param keyId
	 *            the keyId or alias to describe
	 * @return metadata and status information about the KMS key
	 * @throws SafePageException
	 *             if the key cannot be found or described
	 */
	DescribeKeyResponseDTO describeKey(String keyId) throws SafePageException;

	/**
	 * Lists all KMS key aliases in the current AWS region.
	 *
	 * @return a response containing a list of key aliases and their associated key IDs
	 * @throws SafePageException
	 *             if alias listing fails
	 */
	ListAliasesResponseDTO listAliases() throws SafePageException;

	/**
	 * Returns the version of the AWS SDK being used by this service.
	 *
	 * @return the AWS SDK version as a string
	 */
	String getAwsSdkVersion();
}
