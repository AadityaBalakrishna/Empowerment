package com.personalcapital.cache.aop;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.Signature;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;

import com.personalcapital.cache.annotation.PcapMultiCacheable;

@ExtendWith(MockitoExtension.class)
class ExceptionTest {

    @Mock
    private ProceedingJoinPoint mockPjp;

    @Mock
    private Signature mockSignature;

    @Mock
    private PcapMultiCacheable mockAnnotation;

    @InjectMocks
    @Spy // Use a spy to track method calls
    private PcapMultiCacheableAdvice cacheAdvice;

    @BeforeEach
    void setUp() {
        // Mock method signature to avoid NullPointerException
        when(mockPjp.getSignature()).thenReturn(mockSignature);
        when(mockSignature.getName()).thenReturn("testMethod");

        // Mock class name retrieval
        when(mockPjp.getTarget()).thenReturn(this);
    }

    @Test
    void testCacheFailureAndEvictionFailureMetrics() throws Throwable {
        // Mock cache failure (simulate an exception in the first try block)
        when(mockPjp.proceed()).thenThrow(new RuntimeException("Cache retrieval failed"));

        // Mock eviction failure (simulate an exception when eviction is attempted)
        doThrow(new RuntimeException("Eviction failed")).when(mockPjp).proceed();

        // Execute the method and expect an exception
        assertThrows(RuntimeException.class, () -> cacheAdvice.doMultiCacheable(mockPjp, mockAnnotation));

        // Verify that "failure" metric was logged
        verify(cacheAdvice, times(1)).publishCacheMetrics(mockPjp, "failure");

        // Verify that "eviction_failure" metric was logged
        verify(cacheAdvice, times(1)).publishCacheMetrics(mockPjp, "eviction_failure");
    }
}
