package com.epw.aws.service.config;

import com.amazonaws.services.kms.AWSKMS;
import com.amazonaws.services.kms.AWSKMSClientBuilder;
import com.empower.epw.aws.api.kms.EpwKmsService;

import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;

import software.amazon.awssdk.services.kms.KmsClient;

/**
 * Configuration class for setting up AWS KMS clients and services.
 *
 * This class provides beans for both AWS SDK v1 and v2 KMS clients and their
 * corresponding service implementations. The configuration is conditional
 * based on the `aws.sdk.version` property, allowing the application to switch
 * between SDK versions dynamically.
 */
@Configuration
public class EpwAwsKmsAutoConfig {

	// AWS SDK v1: KMS Client
	@Bean
	@ConditionalOnProperty(name = "aws.sdk.version", havingValue = "v1", matchIfMissing = true)
	public AWSKMS awsKmsClient() {
		return AWSKMSClientBuilder.standard().build();
	}

	// AWS SDK v2: KMS Client
	@Bean
	@ConditionalOnProperty(name = "aws.sdk.version", havingValue = "v2")
	public KmsClient kmsClient() {
		return KmsClient.builder().build();
	}

	// AWS SDK v1: EpwKmsServiceImpl (v1)
	@Bean
	@Primary
	@ConditionalOnProperty(name = "aws.sdk.version", havingValue = "v1", matchIfMissing = true)
	public EpwKmsService epwKmsServiceV1(AWSKMS awsKmsClient) {
		return new com.empower.epw.sdk.v1.adapter.kms.EpwKmsServiceImpl(awsKmsClient);
	}

	// AWS SDK v2: EpwKmsServiceImpl (v2)
	@Bean
	@Primary
	@ConditionalOnProperty(name = "aws.sdk.version", havingValue = "v2")
	public EpwKmsService epwKmsServiceV2(KmsClient kmsClient) {
		return new com.empower.epw.sdk.v2.adapter.kms.EpwKmsServiceImpl(kmsClient);
	}
}


i think the same is necessary here
