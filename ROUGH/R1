@Test
void testDataStoreMetric() throws Throwable {
    ProceedingJoinPoint pjp = mockProceedingJoinPoint();

    try (MockedStatic<Metrics> mockedMetrics = mockStatic(Metrics.class)) {
        Counter mockCounter = mock(Counter.class);
        mockedMetrics.when(() -> Metrics.counter(anyString(), any(String[].class)))
                .thenReturn(mockCounter);

        // Simulate cache miss (value not found in Redis)
        when(redissonClient.getBucket(anyString()).get()).thenReturn(null);

        // Simulate DB fetch with multiple values
        List<String> dbFetchedValues = List.of("dbValue1", "dbValue2");
        when(pjp.proceed()).thenReturn(dbFetchedValues);

        // Mock Redis bucket storage operation
        RBucket<Object> mockBucket = mock(RBucket.class);
        when(redissonClient.getBucket(anyString())).thenReturn(mockBucket);
        doNothing().when(mockBucket).set(any(), anyLong(), any());

        // Execute the cache logic
        Object result = cacheAdvice.doMultiCacheable(pjp, mockAnnotation);
        ArgumentCaptor<String> outcomeCaptor = ArgumentCaptor.forClass(String.class);

        // Verify that the result is correctly fetched from DB and stored
        assertNotNull(result);
        assertEquals(dbFetchedValues, result);

        // Verify that the store metric was recorded
        mockedMetrics.verify(() -> Metrics.counter(eq("pcap.cache.event"), eq("class"),
                eq("PcapMultiCacheableAdvice"), eq("method"), eq("dummyMethod"), eq("outcome"),
                outcomeCaptor.capture()), atLeastOnce());

        List<String> capturedMetrics = outcomeCaptor.getAllValues();
        logger.info("Captured Metrics: {}", capturedMetrics);

        // Ensure "store" metric is triggered
        assertTrue(capturedMetrics.contains("store"), "Expected 'store' metric not found");

        // Verify that data is actually being stored in Redis
        verify(mockBucket, atLeastOnce()).set(any(), anyLong(), any());

        // Verify metric counter incremented
        verify(mockCounter, atLeastOnce()).increment();
    }
}
