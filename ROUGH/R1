ples use this as the reference:
package com.empower.epw.aws.a3.config;

import com.amazonaws.services.s3.AmazonS3;
import com.empower.epw.aws.api.s3.EpwS3Service;
import com.empower.epw.aws.v1.s3.EpwS3ServiceImpl;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.test.context.TestPropertySource;

import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;

class EpwS3AutoConfigIT
{

	@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)
	static class TestApplication
	{
	}

	/**
	 * SCENARIO 1: A consumer provides their own custom AmazonS3 bean. Our library should
	 * automatically use it.
	 */
	@Nested
	@SpringBootTest(classes =
	{
			TestApplication.class, ConsumerProvidesClientTest.CustomClientConfig.class
	})
	class ConsumerProvidesClientTest
	{

		@TestConfiguration
		static class CustomClientConfig
		{
			// This is the consumer's custom bean. It will be created first.
			@Bean
			public AmazonS3 customAmazonS3Client()
			{
				return mock(AmazonS3.class, "consumerCustomClient");
			}
		}

		@Autowired
		private AmazonS3 injectedClient; // The client bean in the context

		@Autowired
		private EpwS3ServiceImpl serviceImpl; // The concrete v1 implementation

		@Test
		@Disabled
		void serviceShouldUseTheConsumerProvidedClient()
		{
			// For testing add the getAmazonS3Client method in the service implementation and run
			// this test.
			// This proves that our service implementation was injected with
			// the exact same client instance that the consumer provided.
			// assertSame(injectedClient, serviceImpl.getAmazonS3Client());
		}
	}

	/**
	 * SCENARIO 2: No consumer bean is present, and the property is set to 'v2'. The v2 adapter
	 * should be loaded.
	 */
	@Nested
	@SpringBootTest(classes = TestApplication.class)
	@TestPropertySource(properties = "epw.aws.s3.sdk-version=v2")
	class V2PropertySetTest
	{
		@Autowired
		private EpwS3Service s3Service;

		@Test
		void shouldUseV2Implementation()
		{
			assertTrue(s3Service instanceof com.empower.epw.aws.v2.s3.EpwS3ServiceImpl);
		}
	}

	/**
	 * SCENARIO 3: No consumer bean and no property. The system should fall back to the default v1
	 * adapter.
	 */
	@Nested
	@SpringBootTest(classes = TestApplication.class)
	class DefaultV1FallbackTest
	{
		@Autowired
		private EpwS3Service s3Service;

		@Test
		void shouldUseV1Implementation()
		{
			assertTrue(s3Service instanceof EpwS3ServiceImpl);
		}
	}
}
\ No newline at end of file


to write a IT test class for this :
package com.empower.epw.aws.service.config;

import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.services.kms.AWSKMS;
import com.amazonaws.services.kms.AWSKMSClientBuilder;
import com.empower.epw.aws.api.kms.EpwKmsService;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.*;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.util.StringUtils;

import software.amazon.awssdk.services.kms.KmsClient;

@Configuration
public class EpwAwsKmsAutoConfig {

	@Value("${aws.region:us-west-2}")
	private String awsRegion;

	@Value("${aws.profile:}")
	private String awsProfile;

	@Bean
	@ConditionalOnProperty(name = "epw.aws.kms.sdk.version", havingValue = "v2")
	@ConditionalOnMissingBean(software.amazon.awssdk.auth.credentials.AwsCredentialsProvider.class)
	public software.amazon.awssdk.auth.credentials.AwsCredentialsProvider awsCredentialsProviderV2() {
		if (StringUtils.hasText(awsProfile)) {
			return software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider.builder()
					.profileName(awsProfile)
					.build();
		} else {
			return software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider.create();
		}
	}

	@Bean
	@ConditionalOnMissingBean(com.amazonaws.auth.AWSCredentialsProvider.class)
	public com.amazonaws.auth.AWSCredentialsProvider awsCredentialsProviderV1() {
		if (StringUtils.hasText(awsProfile)) {
			return new ProfileCredentialsProvider(awsProfile);
		} else {
			return DefaultAWSCredentialsProviderChain.getInstance();
		}
	}

	@Bean
	@ConditionalOnProperty(name = "epw.aws.kms.sdk.version", havingValue = "v2")
	@ConditionalOnMissingBean(KmsClient.class)
	public KmsClient kmsClient(software.amazon.awssdk.auth.credentials.AwsCredentialsProvider credentialsProvider) {
		return KmsClient.builder()
				.credentialsProvider(credentialsProvider)
				.region(software.amazon.awssdk.regions.Region.of(awsRegion))
				.build();
	}

	@Bean
	@ConditionalOnProperty(name = "epw.aws.kms.sdk.version", havingValue = "v1", matchIfMissing = true)
	@ConditionalOnMissingBean(AWSKMS.class)
	public AWSKMS awsKmsClient(com.amazonaws.auth.AWSCredentialsProvider credentialsProvider) {
		return AWSKMSClientBuilder.standard()
				.withCredentials(credentialsProvider)
				.withRegion(awsRegion)
				.build();
	}

	@Bean
	@Primary
	@ConditionalOnProperty(name = "epw.aws.kms.sdk.version", havingValue = "v1", matchIfMissing = true)
	public EpwKmsService epwKmsServiceV1(AWSKMS awsKmsClient) {
		return new com.empower.epw.sdk.v1.adapter.kms.EpwKmsServiceImpl(awsKmsClient);
	}

	@Bean
	@Primary
	@ConditionalOnProperty(name = "epw.aws.kms.sdk.version", havingValue = "v2")
	public EpwKmsService epwKmsServiceV2(KmsClient kmsClient) {
		return new com.empower.epw.sdk.v2.adapter.kms.EpwKmsServiceImpl(kmsClient);
	}
}
