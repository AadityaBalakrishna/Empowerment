package com.example.demo.config;

import com.empower.epw.starter.config.store.EpwConfigServiceBootstrapConfiguration;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.runner.ApplicationContextRunner;
import org.springframework.cloud.config.client.ConfigClientProperties;

import static org.assertj.core.api.Assertions.assertThat;

class EpwConfigServiceBootstrapConfigurationTest {

    private final ApplicationContextRunner contextRunner =
            new ApplicationContextRunner()
                    .withUserConfiguration(EpwConfigServiceBootstrapConfiguration.class)
                    .withPropertyValues(
                            "spring.cloud.config.enabled=true",
                            "aws.account=dev",
                            "identity.stage=devtrunk",
                            "pcsvc.server.useLocalEKSUrl=false"
                    );

    @Test
    void shouldCreateConfigClientProperties_withExternalUrl_andNoParentStage() {
        contextRunner.run(context -> {
            ConfigClientProperties props = context.getBean(ConfigClientProperties.class);
            assertThat(props).isNotNull();
            assertThat(props.getProfile()).isEqualTo("devshared,devtrunk");
            assertThat(props.getUri()[0]).isEqualTo("https://pcsvc.dt.pcapqa.app/cfg-store/");
            assertThat(props.getLabel()).isEqualTo("pcapeks");
        });
    }
@Test
void shouldIncludeParentStageInProfile() {
    new ApplicationContextRunner()
            .withUserConfiguration(EpwConfigServiceBootstrapConfiguration.class)
            .withPropertyValues(
                    "spring.cloud.config.enabled=true",
                    "aws.account=dev",
                    "identity.stage=devstaging",
                    "identity.parentStage=devparent",
                    "pcsvc.server.useLocalEKSUrl=false"
            )
            .run(context -> {
                ConfigClientProperties props = context.getBean(ConfigClientProperties.class);
                assertThat(props.getProfile()).isEqualTo("devshared,devparent,devstaging");
            });
}
@Test
void shouldUseInternalUrlWhenLocalEksFlagIsTrue() {
    new ApplicationContextRunner()
            .withUserConfiguration(EpwConfigServiceBootstrapConfiguration.class)
            .withPropertyValues(
                    "spring.cloud.config.enabled=true",
                    "aws.account=dev",
                    "identity.stage=devtrunk",
                    "pcsvc.server.useLocalEKSUrl=true"
            )
            .run(context -> {
                ConfigClientProperties props = context.getBean(ConfigClientProperties.class);
                assertThat(props.getUri()[0])
                        .isEqualTo("http://cfg-store-service.cfg-store-app.svc.cluster.local:8080/cfg-store/");
            });
}
import static org.assertj.core.api.Assertions.assertThatThrownBy;

@Test
void shouldThrowExceptionWhenAwsAccountOrStageMissing() {
    new ApplicationContextRunner()
            .withUserConfiguration(EpwConfigServiceBootstrapConfiguration.class)
            .withPropertyValues(
                    "spring.cloud.config.enabled=true"
                    // no aws.account, no identity.stage
            )
            .run(context -> {
                assertThatThrownBy(() -> context.getBean(ConfigClientProperties.class))
                        .isInstanceOf(IllegalStateException.class)
                        .hasMessageContaining("Unable to infer profiles");
            });
}
@Test
void shouldNotLoadWhenConfigDisabled() {
    new ApplicationContextRunner()
            .withUserConfiguration(EpwConfigServiceBootstrapConfiguration.class)
            .withPropertyValues("spring.cloud.config.enabled=false")
            .run(context -> {
                assertThat(context).doesNotHaveBean(ConfigClientProperties.class);
            });
}

}
