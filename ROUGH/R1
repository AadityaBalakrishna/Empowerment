	@Test
	public void testEncryptDecryptUsingSystemPrimaryKey_AWS() throws Exception
	{
		when(keyManager.isSystmePrimaryKeyMigratedToAWS()).thenReturn(true);
		when(keyManager.getSystemPrimaryAliasName())
				.thenReturn("alias/app/pcap/pcap/system_primary/v1");
		String plainSeedValue = rawSystemSecondaryKeySeed;
		String encryptedSeedValue = CryptType.SYSTEM_PRIMARY.getVersion() + "_encrypted_dummy";
		stubAwsKmsEncryption(plainSeedValue, encryptedSeedValue);
		// Encrypt using system primary key
		String encryptedSystemSecondaryKeySeed = cryptEngine
				.encryptUsingSystemPrimaryKey(plainSeedValue);
		assertNotNull(encryptedSystemSecondaryKeySeed);
		assertTrue(
				encryptedSystemSecondaryKeySeed.startsWith(CryptType.SYSTEM_PRIMARY.getVersion()));

		// Decrypt using system primary key
		String decryptedSystemSecondaryKeySeed = cryptEngine
				.decryptUsingSystemPrimaryKey(encryptedSystemSecondaryKeySeed);
		assertNotNull(decryptedSystemSecondaryKeySeed);
		assertEquals(decryptedSystemSecondaryKeySeed, plainSeedValue);
	}

private void stubAwsKmsEncryption(String plaintext, String ciphertext) throws SafePageException {
		EncryptResponseDTO encryptResponse = new EncryptResponseDTO();
		encryptResponse.setCiphertext(ciphertext);
		when(epwKmsService.encrypt(any(EncryptRequestDTO.class))).thenReturn(encryptResponse);

		DecryptResponseDTO decryptResponse = new DecryptResponseDTO();
		decryptResponse.setPlaintext(plaintext);
		when(epwKmsService.decrypt(any(DecryptRequestDTO.class))).thenReturn(decryptResponse);
	}
