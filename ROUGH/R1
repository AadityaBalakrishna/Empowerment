package com.safepage.helper;
import java.math.BigDecimal;
import java.util.Date;
import com.personalcapital.agent.data.Proposal;
import com.personalcapital.salesforce.data.ServiceRequestStatus;
import com.personalcapital.salesforce.data.ServiceRequestType;
import com.personalcapital.salesforce.data.TaskRequest;
import com.safepage.aggregation.data.QueueCommandType;
import com.safepage.aggregation.data.QueuePriority;
import com.safepage.user.data.UserStatus;
import com.safepage.util.DateTimeUtils;
import com.safepage.util.Utils;
import org.apache.commons.lang.math.RandomUtils;
import org.assertj.core.api.Assertions;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.runners.MockitoJUnitRunner;
import com.personalcapital.advisor.data.UserAdvisorRole;
import com.personalcapital.command.QueueCommandDispatcher;
import com.personalcapital.command.QueueCommandRequest;
import com.personalcapital.et.service.ExactTargetConstants;
import com.safepage.aggregation.data.PayLoad;
import com.safepage.exception.SafePageException;
import com.safepage.json.JSONObject;
import com.safepage.user.data.ClientType;
import com.safepage.user.data.InitiatedType;
import com.safepage.user.data.User;
import com.safepage.user.data.impl.UserImpl;
import static com.safepage.aggregation.data.QueueCommandType.SALESFORCE_ACTIVITY_CREATE_OR_UPDATE;
import static com.safepage.helper.SalesForceHelper.*;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

@RunWith(MockitoJUnitRunner.class)
public class SalesForceHelperMockedTest
{
	@InjectMocks
	@Spy
	SalesForceHelper salesForceHelper;
	@Mock
	private QueueCommandRequest queueCommandRequest;
	@Mock
	private QueueCommandDispatcher queueCommandDispatcher;
	@Captor
	private ArgumentCaptor<QueueCommandRequest> queueCommandRequestArgumentCaptor;
	private final static Long USER_ID = 0l;
	private final static String USER_NAME = "donya.izadi.pcb@personalcapital.com";
	private User user;
	@Before
	public void setUp()
	{
		user = new UserImpl();
		user.setId(USER_ID);
		user.setUsername(USER_NAME);
	}
	@Test
	public void syncExactTargetWithAdvisorAssignment()
	{
		JSONObject userDataRecord = new JSONObject();
		userDataRecord.put(ExactTargetConstants.PERSON_EMAIL, USER_NAME);
		userDataRecord.put(ExactTargetConstants.PFA_USER_GUID, "aLongGuid");

		doNothing().when(salesForceHelper)
				.syncExactTargetDataExtension(eq(userDataRecord));

		salesForceHelper.syncExactTargetWithAdvisorAssignment(userDataRecord);

		verify(salesForceHelper, times(1)).syncExactTargetDataExtension(eq(userDataRecord));
	}
	@Test
	public void testTriggerOnusBankSyncNoData()
	{
		salesForceHelper.triggerOnusBankSync(user, null, null, null, InitiatedType.TEST.name(),
				InitiatedType.TEST);
		verify(queueCommandDispatcher, times(0)).sendQueueCommand(Mockito.any());
	}
	@Test
	public void testTriggerOnusBankSync()
	{
		Boolean IS_ONUS_BANK_HOLDER = true;
		Date ACCOUNT_OPEN_DATE = new Date();
		Double AUD_BALANCE = null;
		salesForceHelper.triggerOnusBankSync(user, IS_ONUS_BANK_HOLDER, ACCOUNT_OPEN_DATE,
				AUD_BALANCE, InitiatedType.TEST.name(), InitiatedType.TEST);
		verify(queueCommandDispatcher).sendQueueCommand(Mockito.any());
	}
	@Test
	public void getSmsActivityTypeOutboundSales()
	{
		String activityType = salesForceHelper.getSmsActivityType(true, UserAdvisorRole.SALES);
		assertEquals(SMS_FROM_ADVISOR_OUTBOUND_TYPE, activityType);
	}
	@Test
	public void getSmsActivityTypeInboundSales()
	{
		String activityType = salesForceHelper.getSmsActivityType(false, UserAdvisorRole.SALES);
		assertEquals(SMS_FROM_ADVISOR_INBOUND_TYPE, activityType);
	}
	@Test
	public void getSmsActivityTypeOutboundService()
	{
		String activityType = salesForceHelper.getSmsActivityType(true, UserAdvisorRole.SERVICE);
		assertEquals(SMS_FROM_ADVISOR_SERVICE_OUTBOUND_TYPE, activityType);
	}
	@Test
	public void getSmsActivityTypeInboundService()
	{
		String activityType = salesForceHelper.getSmsActivityType(false, UserAdvisorRole.SERVICE);
		assertEquals(SMS_FROM_ADVISOR_SERVICE_INBOUND_TYPE, activityType);
	}
	@Test
	public void createOrUpdateActivity()
	{
		String ACTIVITY_TYPE = SMS_FROM_ADVISOR_OUTBOUND_TYPE;
		String SUBJECT = "Chat sent";
		String MESSAGE_BODY = "blah blah";
		Integer delayInSeconds = null;
		QueueCommandRequest queueCommandRequest = new QueueCommandRequest();
		doReturn(queueCommandRequest).when(salesForceHelper)
				.createQueueCommandRequest(eq(user), any(ClientType.class));

		salesForceHelper.createOrUpdateActivity(user, ACTIVITY_TYPE, SUBJECT, MESSAGE_BODY,
				delayInSeconds, null);

		Assertions.assertThat(queueCommandRequest.getQueueCommandType())
				.isEqualTo(SALESFORCE_ACTIVITY_CREATE_OR_UPDATE);
		PayLoad payload = queueCommandRequest.getPayLoad();
		assertThat(payload.toString()).contains(ACTIVITY_TYPE);
		assertThat(payload.toString()).contains(DEFAULT_CALL_STATUS);
		assertThat(payload.toString()).contains(DEFAULT_PRIORITY_LEVEL);
		verify(queueCommandDispatcher, times(1)).sendQueueCommand(eq(queueCommandRequest));
	}
	@Test
	public void testCreateServiceRequestForProfileChange() throws SafePageException
	{
		user.setMyVestHouseholdId("myVestHouseholdId");
		long personId = RandomUtils.nextLong();
		JSONObject profileUpdateRequest = new JSONObject();
		profileUpdateRequest.put("PROFILE_NAME_CHANGE", true);
		profileUpdateRequest.put("PROFILE_SSN_CHANGE", true);
		boolean isCashUser = true;
		ArgumentCaptor<QueueCommandRequest> queueCommandRequestArgument = ArgumentCaptor
				.forClass(QueueCommandRequest.class);
		salesForceHelper.createServiceRequestForProfileChange(user, personId, ClientType.WEB,
				InitiatedType.TEST, profileUpdateRequest, isCashUser);
		verify(queueCommandDispatcher, times(1))
				.sendQueueCommand(queueCommandRequestArgument.capture());
		assertNotNull(queueCommandRequestArgument);
		PayLoad payLoad = queueCommandRequestArgument.getValue()
				.getPayLoad();
		assertNotNull(payLoad);
		assertTrue(payLoad.getJsonObject()
				.containsKey(SalesForceHelper.PERSON_ID));
		assertTrue(payLoad.getJsonObject()
				.containsKey(SalesForceHelper.IS_CASH_USRE));
		assertTrue(Long.compare(payLoad.getJsonObject()
				.getLong(SalesForceHelper.PERSON_ID), personId) == 0);
		assertEquals(isCashUser, payLoad.getJsonObject()
				.getBoolean(SalesForceHelper.IS_CASH_USRE));
	}
	@Test
	public void triggerSyncUserTermsVersionToSalesforce_withValidInputs_shouldSubmitCommand()
			throws Exception
	{
		User user = getUser(100L, Utils.generateGuid());
		salesForceHelper.triggerSyncUserTermsVersionToSalesforceCommand(user, InitiatedType.USER,
				QueuePriority.TOP);
		verify(queueCommandDispatcher, times(1)).sendQueueCommand(Mockito.any());
	}
	@Test
	public void testRetryRegistrationWithAffiliatedUserOn11Run()
	{
		User user = getUser(232l, "ABC");
		user.setTenantName("EMPOWER");
		user.setTenantUserId("ep");
		salesForceHelper.retryRegistration(user, ClientType.WEB, "ownerId", 11);
		Mockito.verify(queueCommandDispatcher, times(1))
				.sendQueueCommand(queueCommandRequestArgumentCaptor.capture());
		QueueCommandRequest queueCommandRequest = queueCommandRequestArgumentCaptor.getValue();
		Assert.assertNotNull(queueCommandRequest);
		Assert.assertEquals(QueueCommandType.PS_NIGO_ALERT_COMMAND,
				queueCommandRequest.getQueueCommandType());
		JSONObject jsonObject = queueCommandRequest.getPayLoad()
				.getJsonObject();
		Assert.assertEquals("ABC", jsonObject.getString(User.USER_GUID));
		Assert.assertNotNull(jsonObject.getString(PsNigoHelper.ISSUE_DETAILS));
		Assert.assertNotNull(jsonObject.getString(PsNigoHelper.ISSUE_SUMMARY));
		Assert.assertEquals(ClientType.WEB, queueCommandRequest.getClientType());
	}
	@Test
	public void testRetryRegistrationWithAffiliatedUserOn7Run()
	{
		User user = getUser(232l, "ABC");
		user.setTenantName("EMPOWER");
		user.setTenantUserId("ep");
		salesForceHelper.retryRegistration(user, ClientType.WEB, "ownerId", 7);
		Mockito.verify(queueCommandDispatcher, times(1))
				.sendQueueCommand(queueCommandRequestArgumentCaptor.capture());
		QueueCommandRequest queueCommandRequest = queueCommandRequestArgumentCaptor.getValue();
		Assert.assertNotNull(queueCommandRequest);
		Assert.assertEquals(QueueCommandType.SALESFORCE_REGISTRATION,
				queueCommandRequest.getQueueCommandType());
		Assert.assertEquals(ClientType.WEB, queueCommandRequest.getClientType());
	}
	@Test
	public void testRetryRegistrationWithD2CUserOn7Run()
	{
		User user = getUser(232l, "ABC");
		salesForceHelper.retryRegistration(user, ClientType.WEB, "ownerId", 7);
		Mockito.verify(queueCommandDispatcher, times(1))
				.sendQueueCommand(queueCommandRequestArgumentCaptor.capture());
		QueueCommandRequest queueCommandRequest = queueCommandRequestArgumentCaptor.getValue();
		Assert.assertNotNull(queueCommandRequest);
		Assert.assertEquals(QueueCommandType.SALESFORCE_REGISTRATION,
				queueCommandRequest.getQueueCommandType());
		Assert.assertEquals(ClientType.WEB, queueCommandRequest.getClientType());
	}
	@Test
	public void testRetryRegistrationWithD2CUserOn11Run()
	{
		User user = getUser(232l, "ABC");
		salesForceHelper.retryRegistration(user, ClientType.WEB, "ownerId", 11);
		Mockito.verify(queueCommandDispatcher, times(0))
				.sendQueueCommand(any());
	}
	@Test
	public void testExecuteServiceRequestForCashRaiseFailure()
	{
		User user = getUser(232L, "ABC");
		user.setTenantName("EMPOWER");
		user.setTenantUserId("ep");

		String userAccountId = "test";
		BigDecimal withdrawableAmount = new BigDecimal("100.1");

		QueueCommandRequest queueCommandRequest = new QueueCommandRequest();
		queueCommandRequest.setQueueCommandType(QueueCommandType.SALESFORCE_CREATE_SERVICE_REQUEST);
		queueCommandRequest.setClientType(ClientType.WEB);

		doReturn(queueCommandRequest).when(salesForceHelper)
				.createQueueCommandRequest(any(), any());

		salesForceHelper.executeServiceRequestForCashRaiseFailure(user, ClientType.WEB,
				InitiatedType.USER, userAccountId, withdrawableAmount);

		Assert.assertNotNull(queueCommandRequest);
		Assert.assertEquals(QueueCommandType.SALESFORCE_CREATE_SERVICE_REQUEST,
				queueCommandRequest.getQueueCommandType());
		Assert.assertEquals(ClientType.WEB, queueCommandRequest.getClientType());
	}
	@Test
	public void testPayloadForExecuteServiceRequestForCashRaiseFailure()
	{
		User user = getUser(232L, "ABC");
		user.setTenantName("EMPOWER");
		user.setTenantUserId("ep");
		String userAccountId = "test";
		BigDecimal withdrawableAmount = new BigDecimal("100.1");
		JSONObject taskRequest = new JSONObject();
		taskRequest.put("type", "AUTOMATED_WITHDRAWAL_FAILURE");
		taskRequest.put("subject", CASH_RAISE_FAILURE_SUBJECT);
		taskRequest.put("comments", NOT_APPLICABLE);
		taskRequest.put("activityDate", DateTimeUtils.getCurrentTimePlusOneDay());
		taskRequest.put("status", ServiceRequestStatus.OPEN_NO_ACTION_TAKEN.getValue());
		taskRequest.put("userGuid", user.getUserGuid());
		taskRequest.put("priority", DEFAULT_PRIORITY_LEVEL);
		taskRequest.put("userAccountId", userAccountId);
		taskRequest.put("withdrawableAmount", withdrawableAmount);
		PayLoad payLoad = new PayLoad();
		JSONObject json = new JSONObject();
		json.put(Proposal.TASK_REQUEST, taskRequest);
		json.put(SALESFORCE_SERVICE_REQUEST_TYPE, "AUTOMATED_WITHDRAWAL_FAILURE");
		payLoad.setJsonObject(json);
		Mockito.when(queueCommandRequest.getPayLoad())
				.thenReturn(payLoad);
		QueueCommandRequest queueCommandRequest = new QueueCommandRequest();
		queueCommandRequest.setQueueCommandType(QueueCommandType.SALESFORCE_CREATE_SERVICE_REQUEST);
		queueCommandRequest.setClientType(ClientType.WEB);
		Mockito.when(salesForceHelper.createQueueCommandRequest(any(), any()))
				.thenReturn(queueCommandRequest);
		salesForceHelper.executeServiceRequestForCashRaiseFailure(user, ClientType.WEB,
				InitiatedType.USER, userAccountId, withdrawableAmount);
		Assert.assertNotNull(queueCommandRequest);
		Assert.assertEquals(QueueCommandType.SALESFORCE_CREATE_SERVICE_REQUEST,
				queueCommandRequest.getQueueCommandType());
		Assert.assertNotNull(queueCommandRequest.getPayLoad());
		System.out.println(queueCommandRequest.getPayLoad());
		Assert.assertEquals(ClientType.WEB, queueCommandRequest.getClientType());
	}
	private User getUser(Long userId, String userGuid)
	{
		UserImpl user = new UserImpl();
		user.setUsername("testuser@test.com_");
		user.setUserGuid(userGuid);
		user.setId(userId);
		user.setStatus(UserStatus.ACTIVE);
		return user;
	}
}


error:
23:41:10  [ERROR] testExecuteServiceRequestForCashRaiseFailure(com.safepage.helper.SalesForceHelperMockedTest)  Time elapsed: 0 s  <<< ERROR!
23:41:10  org.mockito.exceptions.misusing.RedundantListenerException: 
23:41:10  Problems adding Mockito listener.
23:41:10  Listener of type 'MismatchReportingTestListener' has already been added and not removed.
23:41:10  It indicates that previous listener was not removed according to the API.
23:41:10  When you add a listener, don't forget to remove the listener afterwards:
23:41:10    Mockito.framework().removeListener(myListener);
23:41:10  For more information, see the javadoc for RedundantListenerException class.

for all the test classes, in jenkins, pls give solution

this is the code
