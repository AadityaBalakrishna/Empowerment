I would like to answer this review comment:
"throews removed, wont it impact consumer handling of the error?" and "if not throwing exception how consumers get error scenario communicated?"

the context:
in the new EpwKmsServiceImpl 
	@Override
	public DescribeKeyResponseDTO describeKey(String keyId)
	{
		try
		{
			DescribeKeyResult result = kmsClient
					.describeKey(new DescribeKeyRequest().withKeyId(keyId));

			return new DescribeKeyResponseDTO(result.getKeyMetadata()
					.getKeyId(),
					result.getKeyMetadata()
							.getArn(),
					result.getKeyMetadata()
							.getKeyState(),
					result.getKeyMetadata()
							.getEnabled());
		}
		catch (Exception ex)
		{
			logger.error(String.format("[%s] Failed to describeKey, keyId:%s, due to:%s",
					getAwsSdkVersion(), keyId, ExceptionUtils.getMessage(ex)), ex);
			return new DescribeKeyResponseDTO();
		}
	}

	@Override
	public ListAliasesResponseDTO listAliases()
	{
		try
		{
			ListAliasesResult result = kmsClient
					.listAliases(new ListAliasesRequest().withLimit(100));
			List<ListAliasesResponseDTO.AliasEntry> aliasEntries = result.getAliases()
					.stream()
					.map(alias -> new ListAliasesResponseDTO.AliasEntry(alias.getAliasName(),
							alias.getTargetKeyId()))
					.collect(Collectors.toList());
			return new ListAliasesResponseDTO(aliasEntries);
		}
		catch (Exception ex)
		{
			logger.error(String.format("[%s] Failed to listAliases, due to:%s", getAwsSdkVersion(),
					ExceptionUtils.getMessage(ex)), ex);
			return new ListAliasesResponseDTO();
		}
	}



previously:
in the KMSServiceImpl:
	@Override
	public DescribeKeyResult describeKey(String keyId)
	{
		DescribeKeyRequest describeKeyRequest = new DescribeKeyRequest().withKeyId(keyId);
		DescribeKeyResult result = getKMSClient().describeKey(describeKeyRequest);
		return result;
	}

	@Override
	public ListAliasesResult getKeyAliases(String keyId)
	{
		ListAliasesRequest listAliasesRequest = new ListAliasesRequest().withLimit(10);
		ListAliasesResult result = getKMSClient().listAliases(listAliasesRequest);
		return result;
	}

refactored KMSServiceImpl which delegates to the new one:
	@Override
	@Deprecated
	public DescribeKeyResult describeKey(String keyId)
	{
		DescribeKeyResponseDTO dto = epwKmsService.describeKey(keyId);

		KeyMetadata metadata = new KeyMetadata().withKeyId(dto.getKeyId())
				.withArn(dto.getKeyArn())
				.withKeyState(dto.getKeyState())
				.withEnabled(dto.isEnabled());

		return new DescribeKeyResult().withKeyMetadata(metadata);
	}

	@Override
	@Deprecated
	public ListAliasesResult getKeyAliases(String keyId)
	{
		ListAliasesResponseDTO dto = epwKmsService.listAliases();

		List<AliasListEntry> aliasEntries = dto.getAliases()
				.stream()
				.map(alias -> new AliasListEntry().withAliasName(alias.getAliasName())
						.withTargetKeyId(alias.getTargetKeyId()))
				.collect(Collectors.toList());

		return new ListAliasesResult().withAliases(aliasEntries);
	}


can you give me a valid answer for both the review comment?
