package com.safepage.security.epw.v2;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.net.URI;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.testcontainers.containers.localstack.LocalStackContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.kms.KmsClient;
import software.amazon.awssdk.services.kms.model.*;

import com.safepage.security.epw.EpwKmsService;
import com.safepage.security.epw.dto.*;

@Testcontainers
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class EpwKmsServiceV2ImplIT {

    @Container
    static LocalStackContainer localstack = new LocalStackContainer(LocalStackContainer.DEFAULT_IMAGE)
            .withServices(LocalStackContainer.Service.KMS);

    private static final String KEY_ALIAS = "alias/test-key";
    private EpwKmsService kmsService;

    private String keyId;

    @BeforeEach
    void setUp() {
        KmsClient kmsClient = KmsClient.builder()
                .credentialsProvider(
                        StaticCredentialsProvider.create(AwsBasicCredentials.create("accessKey", "secretKey")))
                .endpointOverride(localstack.getEndpointOverride(LocalStackContainer.Service.KMS))
                .region(Region.of(localstack.getRegion()))
                .build();

        // Create a key and alias
        CreateKeyResponse createKeyResponse = kmsClient.createKey();
        keyId = createKeyResponse.keyMetadata().keyId();

        kmsClient.createAlias(CreateAliasRequest.builder()
                .aliasName(KEY_ALIAS)
                .targetKeyId(keyId)
                .build());

        kmsService = new EpwKmsServiceV2Impl(kmsClient);
    }

    @Test
    void testEncryptAndDecrypt() {
        String plainText = "kms-v2-test";

        EncryptRequestDTO encryptRequest = new EncryptRequestDTO();
        encryptRequest.setPlainText(plainText);
        encryptRequest.setKeyId(KEY_ALIAS);

        EncryptResponseDTO encryptResponse = kmsService.encrypt(encryptRequest);
        assertNotNull(encryptResponse);
        assertNotNull(encryptResponse.getCipherText());

        DecryptRequestDTO decryptRequest = new DecryptRequestDTO();
        decryptRequest.setCipherText(encryptResponse.getCipherText());
        decryptRequest.setKeyId(KEY_ALIAS);

        DecryptResponseDTO decryptResponse = kmsService.decrypt(decryptRequest);
        assertNotNull(decryptResponse);
        assertEquals(plainText, decryptResponse.getPlainText());
    }
}
