--> pcap-wsod/src/main/java/com/personalcapital/quote/invest/wsod/services/classify/
WsodClassifiedSecurityCacheService.java
code:
package com.personalcapital.quote.invest.wsod.services.classify;

import com.personalcapital.cache.annotation.PcapMultiCachePut;
import com.personalcapital.cache.annotation.PcapMultiCacheable;
import com.personalcapital.cache.utils.CacheConstants;
import com.personalcapital.log.PcapLogger;
import com.personalcapital.log.PcapLoggerFactory;

import com.personalcapital.quote.invest.SecurityInfoService;
import com.safepage.invest.data.SecurityId;
import com.safepage.invest.data.SecurityInfo;
import com.safepage.util.Utils;
import org.redisson.api.RBatch;
import org.redisson.api.RedissonClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import java.util.stream.Collectors;

public class WsodClassifiedSecurityCacheService
{
	private static final PcapLogger logger = PcapLoggerFactory
			.getPcapLogger(WsodClassifiedSecurityCacheService.class);

	private final String WSOD_CLASSIFIED_SECURITY_CACHE = "WsodClassifiedSecurityCache";

	@Autowired
	@Qualifier(CacheConstants.REDISSON_HIGH_AVAILABILITY)
	private RedissonClient redissonClient;

	private final boolean isCacheWsodClassificationEnabled = true;

	@Deprecated
	public Map<SecurityInfoService.SecurityIdInput, SecurityInfo> getClassifiedSecurities(
			final List<SecurityInfoService.SecurityIdInput> securityIdInputs)
	{
		long startTime = System.nanoTime();
		try
		{
			if (Utils.isCollectionEmpty(securityIdInputs) || !isCacheWsodClassificationEnabled)
			{
				return Collections.EMPTY_MAP;
			}
			final RBatch rBatch = redissonClient.createBatch();
			for (SecurityInfoService.SecurityIdInput sii : securityIdInputs)
			{
				if (sii.getSecurityId() != null && sii.getSecurityId()
						.getSourceAssetId() != null)
				{
					rBatch.getBucket(WSOD_CLASSIFIED_SECURITY_CACHE + ":" + sii.getSecurityId()
							.getSourceAssetId())
							.getAsync();
				}
			}
			final Map<SecurityId, SecurityInfoService.SecurityIdInput> securityIdToSecurityIdInput = securityIdInputs
					.stream()
					.filter(Objects::nonNull)
					.filter(securityIdInput -> securityIdInput.getSecurityId() != null)
					.collect(Collectors.toMap(SecurityInfoService.SecurityIdInput::getSecurityId,
							Function.identity(), (s1, s2) -> s1.getSecurityId() != null ? s1 : s2));
			final List<SecurityInfo> secInfosFromCache = (List<SecurityInfo>) rBatch.execute()
					.getResponses();
			List<String> sourceAssetIds = secInfosFromCache.stream()
					.filter(Objects::nonNull)
					.map(SecurityInfo::getSecurityId)
					.filter(Objects::nonNull)
					.map(SecurityId::getSourceAssetId)
					.collect(Collectors.toList());

			logger.info(
					"getClassifiedSecurities [ WsodClassifiedSecurityCache return sourceAssetIds: {} ]",
					sourceAssetIds);
			Map<SecurityInfoService.SecurityIdInput, SecurityInfo> classifiedSecurities = new HashMap<>();
			if (secInfosFromCache != null)
			{
				classifiedSecurities = secInfosFromCache.stream()
						.filter(Objects::nonNull)
						.filter(sc -> sc.getSecurityId() != null)
						.collect(Collectors.toMap(
								cs -> securityIdToSecurityIdInput.get(cs.getSecurityId()),
								Function.identity(),
								(s1, s2) -> s1.getSecurityId() != null ? s1 : s2));
			}
			return classifiedSecurities;
		}
		catch (Exception e)
		{
			List<String> symbols = securityIdInputs.stream()
					.map(SecurityInfoService.SecurityIdInput::getSecurityId)
					.map(SecurityId::getSymbol)
					.collect(Collectors.toList());
			logger.error("Error fetching WSOD from cache, securityIdInputs: {}, exception: {}",
					symbols, e);
		}
		finally
		{
			long executionTime = System.nanoTime() - startTime;
			long timeElapsedMilliSeconds = TimeUnit.MILLISECONDS.convert(executionTime,
					TimeUnit.NANOSECONDS);
			logger.debug(" Time consumption for [methodName:{},responseTime:{}]",
					"getClassifiedSecurities", timeElapsedMilliSeconds);
		}
		return Collections.EMPTY_MAP;
	}

	@Deprecated
	public boolean putClassifiedSecurity(List<SecurityInfo> securityInfosToBeCached)
	{
		if (Utils.isCollectionEmpty(securityInfosToBeCached) || !isCacheWsodClassificationEnabled)
		{
			return true;
		}
		List<String> sourceAssetIds = securityInfosToBeCached.stream()
				.filter(Objects::nonNull)
				.map(SecurityInfo::getSecurityId)
				.filter(Objects::nonNull)
				.map(SecurityId::getSourceAssetId)
				.collect(Collectors.toList());
		logger.info(
				"putClassifiedSecurity [ Put {} number of securities with sourceAssetIds: {} into WsodClassifiedSecurityCache ]",
				securityInfosToBeCached.size(), sourceAssetIds);

		final RBatch rBatch = redissonClient.createBatch();
		for (SecurityInfo secInfo : securityInfosToBeCached)
		{
			if (secInfo.getSecurityId() != null && secInfo.getSecurityId()
					.getSourceAssetId() != null)
			{
				rBatch.getBucket(WSOD_CLASSIFIED_SECURITY_CACHE + ":" + secInfo.getSecurityId()
						.getSourceAssetId())
						.setAsync(secInfo, 12, TimeUnit.HOURS);
			}
		}
		rBatch.execute()
				.getResponses();
		return true;
	}

	@PcapMultiCacheable(value = WSOD_CLASSIFIED_SECURITY_CACHE, keyProvider = SecurityIdInputCacheProvider.class, ttlSeconds = 43200)
	public Map<SecurityInfoService.SecurityIdInput, SecurityInfo> getClassifiedSecuritiesFromCache(
			final List<SecurityInfoService.SecurityIdInput> securityIdInputs)
	{
		List<String> sourceAssetIds = securityIdInputs.stream()
				.map(SecurityInfoService.SecurityIdInput::getSecurityId)
				.filter(Objects::nonNull)
				.map(SecurityId::getSourceAssetId)
				.collect(Collectors.toList());
		logger.info(
				"getClassifiedSecuritiesFromCache [ WsodClassifiedSecurityCache returns empty for total number of {} securities with sourceAssetIds: {} ]",
				sourceAssetIds.size(), sourceAssetIds);
		return Collections.EMPTY_MAP;
	}

	@PcapMultiCachePut(value = WSOD_CLASSIFIED_SECURITY_CACHE, keyProvider = SecurityIdInputCacheProvider.class)
	public List<SecurityInfo> putClassifiedSecurityIntoCache(
			final List<SecurityInfo> securityInfosToBeCached)
	{
		List<String> sourceAssetIds = securityInfosToBeCached.stream()
				.filter(Objects::nonNull)
				.map(SecurityInfo::getSecurityId)
				.filter(Objects::nonNull)
				.map(SecurityId::getSourceAssetId)
				.collect(Collectors.toList());
		logger.info(
				"putClassifiedSecurityIntoCache [ Put {} number of securities with sourceAssetIds: {} into WsodClassifiedSecurityCache ]",
				securityInfosToBeCached.size(), sourceAssetIds);
		return securityInfosToBeCached;
	}
}

only method:
@PcapMultiCacheable(value = WSOD_CLASSIFIED_SECURITY_CACHE, keyProvider = SecurityIdInputCacheProvider.class, ttlSeconds = 43200)
	public Map<SecurityInfoService.SecurityIdInput, SecurityInfo> getClassifiedSecuritiesFromCache(
			final List<SecurityInfoService.SecurityIdInput> securityIdInputs)
	{
		List<String> sourceAssetIds = securityIdInputs.stream()
				.map(SecurityInfoService.SecurityIdInput::getSecurityId)
				.filter(Objects::nonNull)
				.map(SecurityId::getSourceAssetId)
				.collect(Collectors.toList());
		logger.info(
				"getClassifiedSecuritiesFromCache [ WsodClassifiedSecurityCache returns empty for total number of {} securities with sourceAssetIds: {} ]",
				sourceAssetIds.size(), sourceAssetIds);
		return Collections.EMPTY_MAP;
	}

-->pcap-quote-client/src/main/java/com/personalcapital/invest/quote/
ApiQuoteService.java (3)

	@Override
	@PcapMultiCacheable(value = "quote", keyProvider = QuoteCacheKeyProvider.class)
	public Map<SecurityId, Quote> getQuotes(List<SecurityId> securityIds)
	{
		return getQuotes(securityIds, false);
	}

	@Override
	@PcapMultiCacheable(value = "historicalQuote", keyProvider = QuoteCacheKeyProvider.class)
	public Map<SecurityId, Quote> getHistoricalQuotes(List<SecurityId> securityIds, Date date)
	{
		if (CollectionUtils.isEmpty(securityIds))
		{
			return new HashMap<SecurityId, Quote>();
		}

		QuoteArrayApiRequest request = new QuoteArrayApiRequest();
		List<String> quoteSecurityId = QuoteClientUtils
				.getSymbolsOrCusipsFromSecurityIds(securityIds);

		String dateStr = DateTimeUtils.format(date, DateTimeUtils.DATE_DB_FORMAT);
		request.setSecurityIds(quoteSecurityId);
		request.setPriceDate(dateStr);
		Map<SecurityId, Quote> returnMap = new HashMap<>();
		log("getHistoricalQuotes", quoteSecurityId.toString(), dateStr, null, null);
		try
		{
			PcapApiResponse response = quoteServiceDelegate.getHistoricalQuotes(request);
			if (response.isSuccess())
			{
				JSONObject data = response.getData();
				JSONObject quotes = (JSONObject) data.getJSONObject(QUOTE_HISTORY_KEY);
				if (quotes == null)
				{
					logger.warn(logErrorMessage(
							"ApiQuoteService/getHistoricalQuotes did not return expected quote for request (quotesStr empty): ",
							securityIds));
					return returnMap;
				}
				String quotesStr = quotes.toString();
				if (quotesStr == null)
				{
					logger.warn(logErrorMessage(
							"ApiQuoteService/getHistoricalQuotes did not return expected quote for request (quotesStr empty): ",
							securityIds));
					return returnMap;
				}
				Map<String, List<com.safepage.invest.quote.QuoteInfo>> map = com.safepage.invest.quote.QuoteInfo
						.readValueAsMap(quotesStr);
				if (Utils.isMapEmpty(map))
				{
					return returnMap;
				}
				for (SecurityId secId : securityIds)
				{
					if (map.containsKey(secId.getTicker()))
					{
						List<com.safepage.invest.quote.QuoteInfo> quoteInfos = map
								.get(secId.getTicker());
						if (CollectionUtils.isNotEmpty(quoteInfos))
						{
							Quote constructedQuote = quoteInfos.getFirst()
									.getQuote(secId);
							returnMap.put(secId, constructedQuote);
						}
						else
						{
							logger.warn(
									"ApiQuoteService/getHistoricalQuotes list did not return expected quote for request(quoteInfos empty): "
											+ secId);
						}
					}
					else
					{
						logger.warn(
								"ApiQuoteService/getHistoricalQuotes did not return expected quote for request:"
										+ secId);
					}
				}
				return returnMap;
			}
			else
			{
				throw new Exception("Unsuccessful Quote Service response: " + response);
			}

		}
		catch (Exception e)
		{
			logger.error(logErrorMessage(
					"ApiQuoteService error communicating with quoteService/getHistoricalQuotes - securityIds: ",
					securityIds), e);
			return returnMap;
		}
	}

@Override
	@PcapMultiCacheable(value = "historicalQuote", keyProvider = QuoteCacheKeyProvider.class)
	public Map<SecurityId, List<Quote>> getHistoricalValuesAsOf(List<SecurityId> securityIds,
			Date endDate, String periodType, Long periods)
	{
		QuoteArrayApiRequest request = new QuoteArrayApiRequest();
		Map<SecurityId, List<Quote>> returnMap = new HashMap<>();
		if (CollectionUtils.isEmpty(securityIds))
		{
			return returnMap;
		}
		String dateStr = DateTimeUtils.format(endDate, DateTimeUtils.DATE_DB_FORMAT);

		List<String> quoteSecurityId = QuoteClientUtils
				.getSymbolsOrCusipsFromSecurityIds(securityIds);
		if (quoteSecurityId.isEmpty())
		{
			log("getHistoricalValuesAsOf", quoteSecurityId.toString(), dateStr, periodType,
					periods);
			logger.warn(
					"ApiQuoteService/getHistoricalValuesAsOf input of tickers/symbols are empty");
			return returnMap;
		}

		request.setSecurityIds(quoteSecurityId);
		request.setToDate(dateStr);
		request.setPeriods(periods);

		log("getHistoricalValuesAsOf", quoteSecurityId.toString(), dateStr, periodType, periods);
		try
		{
			PcapApiResponse response = quoteServiceDelegate.getHistoricalQuotesAsOf(request);
			if (response.isSuccess())
			{
				JSONObject data = response.getData();
				JSONObject quotes = (JSONObject) data.getJSONObject(QUOTE_HISTORY_KEY);
				if (quotes == null)
				{
					logger.warn(logErrorMessage(
							"ApiQuoteService/getHistoricalValuesAsOf list did not return expected quote for request(quotes empty): ",
							securityIds));
					return returnMap;
				}
				String quotesStr = quotes.toString();
				if (quotesStr == null)
				{
					logger.warn(logErrorMessage(
							"ApiQuoteService/getHistoricalValuesAsOf list did not return expected quote for request (quotesStr empty): ",
							securityIds));
					return returnMap;
				}
				Map<String, List<com.safepage.invest.quote.QuoteInfo>> map = com.safepage.invest.quote.QuoteInfo
						.readValueAsMap(quotesStr);
				if (Utils.isMapEmpty(map))
				{
					return returnMap;
				}
				for (SecurityId secId : securityIds)
				{
					if (map.containsKey(secId.getTicker()))
					{
						List<com.safepage.invest.quote.QuoteInfo> quoteInfos = map
								.get(secId.getTicker());

						if (CollectionUtils.isNotEmpty(quoteInfos))
						{
							List<Quote> quotesList = quoteInfos.stream()
									.map(q -> q.getQuote(secId))
									.collect(Collectors.toList());
							returnMap.put(secId, quotesList);

							// logging for PFM-11304
							log("getHistoricalValuesAsOf QuoteInfos", securityIds,
									secId.getTicker(), quoteInfos, quotesList, endDate, periods);
						}
						else
						{
							logger.warn(
									"ApiQuoteService/getHistoricalValuesAsOf did not return expected quote for secId:{},(quoteInfos empty)",
									secId.getTicker());
						}
					}
					else
					{
						logger.warn(
								"ApiQuoteService/getHistoricalValuesAsOf did not return expected quote for secId:{}",
								secId.getTicker());
					}
				}
				return returnMap;
			}
			else
			{
				throw new Exception("Unsuccessful Quote Service response: " + response);
			}

		}
		catch (Exception e)
		{
			logger.error(logErrorMessage(
					"ApiQuoteService error communicating with quoteService/getHistoricalQuotesAsOf - securityIds: ",
					securityIds), e);
			return returnMap;
		}
	}

-->pcap-quote-manager/src/main/java/com/safepage/invest/quote/caching/
AnnotatedCachingQuoteService.java (3)

	@Override
	@PcapMultiCacheable(value = "quote", keyProvider = QuoteCacheKeyProvider.class)
	public Map<SecurityId, Quote> getQuotes(List<SecurityId> securityIds)
	{
		Map<SecurityId, Quote> results = new HashMap<SecurityId, Quote>();

		List<SecurityId> pcapIndexList = new ArrayList<SecurityId>();
		List<SecurityId> securityIdListExcludingPCAPIndex = new ArrayList<SecurityId>();

		for (SecurityId securityId : securityIds)
		{
			if (securityId == null)
				continue;

			if (Utils.isNotNull(securityId.getSymbol())
					&& QuoteService.PCAP_CUSTOM_INDICES_MAP.containsKey(securityId.getSymbol()))
			{
				pcapIndexList.add(securityId);
			}
			else if (CryptoCurrencyUtils.isCryptoHolding(securityId.getSymbol()))
			{
				log(securityId, null, true, "quotes");
				if (!cryptoCacheUtils.isCryptoSymbolSupported(securityId))
				{
					log(securityId, "getQuotes");
					continue;
				}
				Quote quote = this.cryptoCompareQuoteService.getQuote(securityId);
				log(securityId, null, false, "quotes");
				if (quote != null)
				{
					results.put(securityId, quote);
				}
			}
			else
			{
				Quote quote = getLastClosingQuoteIfValidAndMarketClosed(securityId);
				if (quote != null)
				{
					results.put(securityId, quote);
					continue;
				}
				securityIdListExcludingPCAPIndex.add(securityId);
			}
		}

		Map<SecurityId, Quote> pcapIndexResults = null;
		if (!pcapIndexList.isEmpty())
			pcapIndexResults = this.getPCAPIndexQuotes(pcapIndexList, null);
		Map<SecurityId, Quote> resultsExcludingPCAPIndex = null;
		if (!securityIdListExcludingPCAPIndex.isEmpty())
			resultsExcludingPCAPIndex = backingQuoteService
					.getQuotes(securityIdListExcludingPCAPIndex);

		if (pcapIndexResults != null)
			results.putAll(pcapIndexResults);

		if (resultsExcludingPCAPIndex != null)
			results.putAll(resultsExcludingPCAPIndex);

		return results;
	}

	@Override
	@PcapMultiCacheable(value = "historicalQuote", keyProvider = QuoteCacheKeyProvider.class)
	public Map<SecurityId, Quote> getHistoricalQuotes(List<SecurityId> securityIds, Date date)
	{
		Map<SecurityId, Quote> results = new HashMap<SecurityId, Quote>();

		List<SecurityId> pcapIndexList = new ArrayList<SecurityId>();
		List<SecurityId> securityIdListExcludingPCAPIndex = new ArrayList<SecurityId>();

		for (SecurityId securityId : securityIds)
		{
			if (securityId == null)
				continue;

			if (Utils.isNotNull(securityId.getSymbol())
					&& QuoteService.PCAP_CUSTOM_INDICES_MAP.containsKey(securityId.getSymbol()))
			{
				pcapIndexList.add(securityId);
			}
			else if (CryptoCurrencyUtils.isCryptoHolding(securityId.getSymbol()))
			{
				log(securityId, date, true, "historicalQuotes");
				if (!cryptoCacheUtils.isCryptoSymbolSupported(securityId))
				{
					log(securityId, "getHistoricalQuotes");
					return null;
				}
				Quote quote = this.cryptoCompareQuoteService.getHistoricalQuote(securityId, date);
				log(securityId, date, false, "historicalQuotes");
				if (quote != null)
				{
					results.put(securityId, quote);
					continue;
				}
			}
			else
			{
				securityIdListExcludingPCAPIndex.add(securityId);
			}
		}

		Map<SecurityId, Quote> pcapIndexResults = null;
		if (!pcapIndexList.isEmpty())
			pcapIndexResults = this.getPCAPIndexQuotes(pcapIndexList, date);
		Map<SecurityId, Quote> resultsExcludingPCAPIndex = null;
		if (!securityIdListExcludingPCAPIndex.isEmpty())
			resultsExcludingPCAPIndex = backingQuoteService
					.getHistoricalQuotes(securityIdListExcludingPCAPIndex, date);

		if (pcapIndexResults != null)
			results.putAll(pcapIndexResults);

		if (resultsExcludingPCAPIndex != null)
			results.putAll(resultsExcludingPCAPIndex);

		return results;
	}

	@Override
	@PcapMultiCacheable(value = "historicalQuote", keyProvider = QuoteCacheKeyProvider.class)
	public Map<SecurityId, List<Quote>> getHistoricalValuesAsOf(List<SecurityId> securityIds,
			Date endDate, String periodType, Long periods)
	{
		return super.getHistoricalValuesAsOf(securityIds, endDate, periodType, periods);
	}

--> pcap-quote-manager/src/main/java/com/safepage/invest/quote/caching/
GlobalCachingQuoteService.java

	@Override
	@PcapMultiCacheable(value = "quote", keyProvider = QuoteCacheKeyProvider.class)
	public Map<SecurityId, List<Quote>> getHistoricalValuesAsOf(List<SecurityId> securityIds,
			Date endDate, String periodType, Long periods)
	{
		log("getHistoricalValuesAsOf", securityIds.toString(), endDate, periodType, periods);
		return super.getHistoricalValuesAsOf(securityIds, endDate, periodType, periods);
	}


-->pcap-xignite/src/main/java/com/personalcapital/invest/quote/cryptocompare/
CryptoCompareQuoteService.java
	@Override
	@XigniteQueryRetry
	@PcapMultiCacheable(value = "crypto", keyProvider = QuoteCacheKeyProvider.class, ttlSeconds = 28800)
	public Map<SecurityId, Quote> getQuotes(List<SecurityId> securityIds)
	{
		if (isStaging())
			return new HashMap<>();
		return getQuotesBySecurityIds(securityIds, true);
	}
