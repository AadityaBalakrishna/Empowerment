package com.empower.epw.crm.gateway.sqs;

import java.util.concurrent.TimeUnit;

import io.awspring.cloud.sqs.config.SqsBootstrapConfiguration;
import io.awspring.cloud.sqs.operations.SqsTemplate;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.testcontainers.containers.localstack.LocalStackContainer;
import org.testcontainers.containers.output.Slf4jLogConsumer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import org.testcontainers.utility.DockerImageName;

import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.sqs.SqsClient;

import static org.assertj.core.api.Assertions.assertThat;
import static org.awaitility.Awaitility.await;

@SpringBootTest
@Testcontainers
@ActiveProfiles("test")
@Import(
{
		CrmGatewayMessageListener.class
})
@ImportAutoConfiguration(SqsBootstrapConfiguration.class)
class CrmGatewayMessageListenerTest
{

	private static final Logger LOG = LoggerFactory.getLogger("LocalStackContainer");

	private static final String DRY_RUN_QUEUE = "DEVTRUNK_CRM_GATEWAY_DRY_RUN";
	private static final String INTERMEDIATE_QUEUE = "DEVTRUNK_CRM_GATEWAY_INTERMEDIATE";
	private static final String NORMAL_QUEUE = "DEVTRUNK_CRM_GATEWAY_NORMAL";
	private static final String TOP_QUEUE = "DEVTRUNK_CRM_GATEWAY_TOP";

	@Container
	static final LocalStackContainer localstack = new LocalStackContainer(
			DockerImageName.parse("localstack/localstack:3.0"))
					.withServices(LocalStackContainer.Service.SQS)
					.withLogConsumer(new Slf4jLogConsumer(LOG));

	private static SqsClient sqsClient;

	@BeforeAll
	static void setupQueues()
	{
		sqsClient = SqsClient.builder()
				.endpointOverride(localstack.getEndpointOverride(LocalStackContainer.Service.SQS))
				.region(Region.of(localstack.getRegion()))
				.credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials
						.create(localstack.getAccessKey(), localstack.getSecretKey())))
				.build();

		for (String queueName : new String[]
		{
				DRY_RUN_QUEUE, INTERMEDIATE_QUEUE, NORMAL_QUEUE, TOP_QUEUE
		})
		{
			sqsClient.createQueue(r -> r.queueName(queueName));
		}
	}

	@DynamicPropertySource
	static void registerProperties(DynamicPropertyRegistry registry)
	{
		String sqsEndpoint = localstack.getEndpointOverride(LocalStackContainer.Service.SQS)
				.toString();
		registry.add("spring.cloud.aws.region.static", localstack::getRegion);
		registry.add("spring.cloud.aws.credentials.access-key", localstack::getAccessKey);
		registry.add("spring.cloud.aws.credentials.secret-key", localstack::getSecretKey);
		registry.add("spring.cloud.aws.sqs.endpoint",
				() -> localstack.getEndpointOverride(LocalStackContainer.Service.SQS)
						.toString());

		// crm gateway queue names
		registry.add("crm.gateway.sqs.queue.dryrun", () -> DRY_RUN_QUEUE);
		registry.add("crm.gateway.sqs.queue.intermediate", () -> INTERMEDIATE_QUEUE);
		registry.add("crm.gateway.sqs.queue.normal", () -> NORMAL_QUEUE);
		registry.add("crm.gateway.sqs.queue.top", () -> TOP_QUEUE);
	}

	@Autowired
	private SqsTemplate sqsTemplate;

	@Autowired
	private CrmGatewayMessageListener listener;

	@Test
	void testMessageIsConsumedSuccessfully() throws Exception
	{
		String payload = "{\"event\":\"CustomerUpdated\",\"id\":123}";
		sqsTemplate.send(DRY_RUN_QUEUE, payload);

		await().atMost(5, TimeUnit.SECONDS)
				.untilAsserted(() -> assertThat(listener).isNotNull());
	}

	@Test
	void testMessageRetriesOnFailure()
	{
		sqsTemplate.send(DRY_RUN_QUEUE, "FAIL_MESSAGE");
	}
}
