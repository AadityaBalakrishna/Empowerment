This is a new task and before jumping into the coding, i want to be able to understand each and every concept

 I want to implement and test a proof-of-concept for AWS SQS/EventBridge integration so that the CRM Event Hub can publish and consume platform events through AWS-managed queues in a reliable and observable manner.
Description:

Create AWS SQS queue and EventBridge rule to capture mock CRM platform events.
Configure EKS service IAM roles and policies for send/receive permissions.
Implement a simple SQS producer and consumer module within crm-ihub-app for event routing validation.
Validate dead-letter queue (DLQ) behavior and message retention policies.
Establish observability hooks (Datadog logs, metrics) for SQS operations.
Update Helm values to include environment variables and AWS ARNs.
Acceptance Criteria:

crm-ihub-app successfully sends messages to AWS SQS queue using IAM permissions.
EventBridge rule correctly routes mock platform events to SQS target.
Consumer reads and acknowledges messages without duplication.
DLQ behavior verified through intentional processing failure.
Datadog/Splunk logs show successful message flow and error traces.
Helm/Kustomize deployment includes tested config for all environments (dev/qa/stage).
Dependencies:

AWS SQS and EventBridge infrastructure readiness.
DevOps support for IAM policy and role mapping.
AWS Config Store entries for service.
Shared epw-crm-core library for JSON schema mapping (if applicable).
Validation Steps:

Local simulation using AWS CLI and SDK mock testing for send/receive.
Integration test in EKS (dev) with real EventBridge and SQS resources.
Automated pipeline test verifying message publish, receive, and DLQ routing.
Monitoring validation via Datadog dashboards and Splunk queries.
