package com.empower.epw.crm.gateway.sqs;

import jakarta.annotation.PostConstruct;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.testcontainers.containers.localstack.LocalStackContainer;
import org.testcontainers.containers.output.Slf4jLogConsumer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.utility.DockerImageName;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.sqs.SqsClient;
import software.amazon.awssdk.services.sqs.model.CreateQueueRequest;

import java.util.List;

@TestConfiguration
public class CrmGatewaySqsTestConfig {

	private static final Logger LOG = LoggerFactory.getLogger(CrmGatewaySqsTestConfig.class);

	static final String DRY_RUN_QUEUE = "DEVTRUNK_CRM_GATEWAY_DRY_RUN";
	private static final String INTERMEDIATE_QUEUE = "DEVTRUNK_CRM_GATEWAY_INTERMEDIATE";
	private static final String NORMAL_QUEUE = "DEVTRUNK_CRM_GATEWAY_NORMAL";
	private static final String TOP_QUEUE = "DEVTRUNK_CRM_GATEWAY_TOP";

	@Container
	static final LocalStackContainer localstack = new LocalStackContainer(
			DockerImageName.parse("localstack/localstack:3.0"))
			.withServices(LocalStackContainer.Service.SQS)
			.withLogConsumer(new Slf4jLogConsumer(LOG));

	@Bean
	public SqsClient sqsClient() {
		return SqsClient.builder()
				.endpointOverride(localstack.getEndpointOverride(LocalStackContainer.Service.SQS))
				.region(Region.of(localstack.getRegion()))
				.credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials
						.create(localstack.getAccessKey(), localstack.getSecretKey())))
				.build();
	}

	@DynamicPropertySource
	static void registerProperties(DynamicPropertyRegistry registry) {
		registry.add("spring.cloud.aws.region.static", localstack::getRegion);
		registry.add("spring.cloud.aws.credentials.access-key", localstack::getAccessKey);
		registry.add("spring.cloud.aws.credentials.secret-key", localstack::getSecretKey);
		registry.add("spring.cloud.aws.sqs.endpoint",
				() -> localstack.getEndpointOverride(LocalStackContainer.Service.SQS).toString());

		// CRM queue names
		registry.add("crm.gateway.sqs.queue.dryrun", () -> DRY_RUN_QUEUE);
		registry.add("crm.gateway.sqs.queue.intermediate", () -> INTERMEDIATE_QUEUE);
		registry.add("crm.gateway.sqs.queue.normal", () -> NORMAL_QUEUE);
		registry.add("crm.gateway.sqs.queue.top", () -> TOP_QUEUE);
	}

	// âœ… Inject the bean instead of calling sqsClient() directly
	private final SqsClient sqsClient;

	public CrmGatewaySqsTestConfig(SqsClient sqsClient) {
		this.sqsClient = sqsClient;
	}

	@PostConstruct
	public void createQueues() {
		LOG.info("Creating test queues in LocalStack...");
		for (String name : List.of(DRY_RUN_QUEUE, INTERMEDIATE_QUEUE, NORMAL_QUEUE, TOP_QUEUE)) {
			sqsClient.createQueue(CreateQueueRequest.builder().queueName(name).build());
			LOG.info("Created SQS queue: {}", name);
		}
	}
}
