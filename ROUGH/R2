package com.empower.epw.crm.gateway.sqs;

import org.junit.jupiter.api.BeforeAll;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.testcontainers.containers.localstack.LocalStackContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import software.amazon.awssdk.services.sqs.SqsClient;

import java.net.URI;

import static org.testcontainers.containers.localstack.LocalStackContainer.Service.SQS;

@Testcontainers
public abstract class CrmGatewaySQSContainerIT {

    // List of CRM Gateway queues
    protected static final String[] QUEUE_NAMES = {
            "DEV_CRM_GATEWAY_NORMAL",
            "DEV_CRM_GATEWAY_DRY_RUN",
            "DEV_CRM_GATEWAY_INTERMEDIATE",
            "DEV_CRM_GATEWAY_TOP"
    };

    // Start LocalStack container automatically
    @Container
    protected static final LocalStackContainer localStack = new LocalStackContainer("localstack/localstack:3.0")
            .withServices(SQS);

    // Inject container properties dynamically into Spring Boot
    @DynamicPropertySource
    static void configureProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.cloud.aws.region.static", localStack::getRegion);
        registry.add("spring.cloud.aws.credentials.access-key", localStack::getAccessKey);
        registry.add("spring.cloud.aws.credentials.secret-key", localStack::getSecretKey);
        registry.add("spring.cloud.aws.sqs.endpoint",
                () -> localStack.getEndpointOverride(SQS).toString());
    }

    // Create all queues before any tests run
    @BeforeAll
    static void createQueues() {
        SqsClient sqsClient = SqsClient.builder()
                .endpointOverride(URI.create(localStack.getEndpointOverride(SQS).toString()))
                .region(software.amazon.awssdk.regions.Region.of(localStack.getRegion()))
                .credentialsProvider(localStack.getDefaultCredentialsProvider())
                .build();

        for (String queueName : QUEUE_NAMES) {
            sqsClient.createQueue(builder -> builder.queueName(queueName));
            System.out.println("Queue created: " + queueName);
        }
    }
}


package com.empower.epw.crm.gateway.sqs;

import com.empower.epw.sqs.EmpowerSQSService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.retry.annotation.Backoff;
import org.springframework.retry.annotation.EnableRetry;
import org.springframework.retry.annotation.Retryable;
import org.springframework.test.context.ActiveProfiles;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest
@ActiveProfiles("test")
public class CrmGatewaySqsIntegrationTest extends CrmGatewaySQSContainerIT {

    @Autowired
    private EmpowerSQSService empowerSQSService;

    /**
     * Sends and receives a normal message on all queues.
     */
    @Test
    void shouldSendAndReceiveMessageOnAllQueues() {
        for (String queueName : QUEUE_NAMES) {
            String expectedMessage = "Hello from CRM Gateway - " + queueName;

            empowerSQSService.sendMessage(queueName, expectedMessage);
            String actualMessage = empowerSQSService.reciveMessage(queueName, String.class);

            assertThat(actualMessage)
                    .as("Verify message for queue: " + queueName)
                    .isEqualTo(expectedMessage);

            System.out.println("Message verified for queue: " + queueName);
        }
    }

    /**
     * Simulates failure and retries on all queues.
     */
    @Test
    void shouldRetryOnFailureForAllQueues() {
        TestListener listener = new TestListener(empowerSQSService);

        for (String queueName : QUEUE_NAMES) {
            String failMessage = "SIMULATE_FAIL_" + queueName;
            empowerSQSService.sendMessage(queueName, failMessage);

            String result = listener.processMessageWithRetry(queueName, failMessage);

            assertThat(result)
                    .as("Retry verified for queue: " + queueName)
                    .isEqualTo(failMessage);

            System.out.println("Retry verified for queue: " + queueName);
        }
    }

    /**
     * Test listener with retryable method.
     */
    @Configuration
    @EnableRetry
    static class TestListenerConfig {
        @Bean
        TestListener testListener(EmpowerSQSService service) {
            return new TestListener(service);
        }
    }

    static class TestListener {
        private final EmpowerSQSService empowerSQSService;

        // Keep independent attempt counter per instance
        private int attempt = 0;

        TestListener(EmpowerSQSService empowerSQSService) {
            this.empowerSQSService = empowerSQSService;
        }

        @Retryable(
                value = { RuntimeException.class },
                maxAttemptsExpression = "#{3}",
                backoff = @Backoff(delayExpression = "#{500}")
        )
        public String processMessageWithRetry(String queueName, String expectedFailMessage) {
            String msg = empowerSQSService.reciveMessage(queueName, String.class);

            // Fail first 2 attempts, succeed on 3rd
            attempt++;
            if (expectedFailMessage.equals(msg) && attempt < 3) {
                System.out.println("Simulated failure attempt " + attempt + " for queue " + queueName);
                throw new RuntimeException("Simulated failure");
            }

            System.out.println("Message processed successfully on attempt " + attempt + " for queue " + queueName);
            return msg;
        }
    }
}
