package com.empower.epw.crm.gateway.sqs;

import io.awspring.cloud.sqs.annotation.SqsListener;
import org.springframework.retry.annotation.Backoff;
import org.springframework.retry.annotation.Retryable;
import org.springframework.stereotype.Component;
import com.personalcapital.log.PcapLogger;
import com.personalcapital.log.PcapLoggerFactory;

@Component
public class CrmGatewayMessageListener {

    private static final PcapLogger logger = PcapLoggerFactory.getPcapLogger(CrmGatewayMessageListener.class);

    @SqsListener("${crm.gateway.sqs.queue.dryrun:}")
    @Retryable(
            value = { Exception.class },
            maxAttemptsExpression = "#{${crm-gateway.sqs.retry.max-attempts:3}}",
            backoff = @Backoff(delayExpression = "#{${crm-gateway.sqs.retry.backoff-delay:1000}}")
    )
    public void handleDryRunMessage(String message) {
        processMessage("DRY_RUN", message);
    }

    @SqsListener("${crm.gateway.sqs.queue.intermediate:}")
    @Retryable(
            value = { Exception.class },
            maxAttemptsExpression = "#{${crm-gateway.sqs.retry.max-attempts:3}}",
            backoff = @Backoff(delayExpression = "#{${crm-gateway.sqs.retry.backoff-delay:1000}}")
    )
    public void handleIntermediateMessage(String message) {
        processMessage("INTERMEDIATE", message);
    }

    @SqsListener("${crm.gateway.sqs.queue.normal:}")
    @Retryable(
            value = { Exception.class },
            maxAttemptsExpression = "#{${crm-gateway.sqs.retry.max-attempts:3}}",
            backoff = @Backoff(delayExpression = "#{${crm-gateway.sqs.retry.backoff-delay:1000}}")
    )
    public void handleNormalMessage(String message) {
        processMessage("NORMAL", message);
    }

    @SqsListener("${crm.gateway.sqs.queue.top:}")
    @Retryable(
            value = { Exception.class },
            maxAttemptsExpression = "#{${crm-gateway.sqs.retry.max-attempts:3}}",
            backoff = @Backoff(delayExpression = "#{${crm-gateway.sqs.retry.backoff-delay:1000}}")
    )
    public void handleTopMessage(String message) {
        processMessage("TOP", message);
    }

    private void processMessage(String type, String message) {
        logger.info("Received [{}] message: {}", type, message);

        try {
            // TODO: handle domain logic here
            logger.info("Message [{}] processed successfully.", type);
        } catch (Exception ex) {
            logger.error("Error processing [{}] message: {}", type, ex.getMessage(), ex);
            throw ex; // triggers @Retryable
        }
    }
}

what is the point of the listener class?
