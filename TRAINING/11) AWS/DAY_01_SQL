# 19/08/2024

DDL
- CREATE TABLE table_name (column1 data_type, column2 data_type, ...);
           CHAR(size), NCHAR, VARCHAR2(size), BLOB, CLOB, NUMBER(p, s), INT, NUMERIC, BINARY_FLOAT, BINARY_DOUBLE, 
           DATE, DATETIME, TIMESTAMP, TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH LOCAL TIME ZONE, YEAR TO MONTH, HOUR TO MINUTE
           INTERVAL YEAR TO MONTH, INTERVAL DAY TO SECOND, BLOB, RAW(size), LONG RAW, ROWID, UROWID(size), XMLTYPE, BFILE
           
- DROP TABLE table_name;

- ALTER TABLE table_name ADD COLUMN column_name data_type;
           ALTER TABLE table_name ADD column_name data_type;
           ALTER TABLE table_name MODIFY column_name new_data_type [NOT NULL];
           ALTER TABLE table_name RENAME COLUMN old_column_name TO new_column_name;
           ALTER TABLE table_name DROP COLUMN column_name;
           --
           ALTER TABLE table_name ADD CONSTRAINT constraint_name PRIMARY KEY (column_name);
           ALTER TABLE table_name ADD CONSTRAINT constraint_name FOREIGN KEY (column_name) REFERENCES other_table_name (other_column_name);
           RENAME old_table_name TO new_table_name;
           ALTER TABLE table_name DROP CONSTRAINT constraint_name;

- TRUNCATE TABLE table_name;

- COMMENT 'comment_text' ON TABLE table_name;
- RENAME TABLE old_table_name TO new_table_name;

DQL
- SELECT <COL_N> FROM <TABLE_NAME> [WHERE CONDITION];

DML
1) INSERT
- INSERT INTO <TABLE NAME> VALUES (VALUES);
- INSERT INTO <TABLE NAME> (COLUMN_NAMES) VALUES (VALUES);
- INSERT ALL 
           INTO <TABLE NAME>(COL_N) VALUES (VALUES);
           INTO <TABLE NAME>(COL_N) VALUES (VALUES); 
   SELECT * FROM DUAL; (SUB QUERY is DUMMY TABLE)
 - INSERT INTO <NEW TABLE> SELECT * FROM <OLD TABLE>
- TO_DATE, TO_CHAR

2) UPDATE
- UPDATE <TABLE NAME> SET <COL_1> = <VALUE>, 
                          <COL_2> = <VALUE>, ....
                         [ WHERE <CONDITION>] ;

3) DELETE
- DELETE [FROM] <TABLE_NAME>[WHERE <CONDITION>];

TCL
1) COMMIT
2) SAVEPOINT
- SAVEPOINT <name>;

3) ROLLBACK
- ROLLBACK (SAVEPOINT_NAME);

DCL
1) GRANT
- GRANT <PRIVILEGE> TO <USER/ROLES>;

2) REVOKE
- REVOKE <PRIVILEGE> FROM <USER/ROLES>;

=================================================================================================
NOTES:

- DELETE allows us to specify a condition so that only those rows meeting the condition are removed
  TRUNCATE does not allow us to specify condition, so it always remove all rows.
  DELETE can be rolled back.
  TRUNCATE cannot be rolled back.
  DML statements can be rolled back.
  rollback reverts the changes done (which are yet to be committed).

- What is a transaction?
	a transaction is a set of statements executed together as a single unit.
	if transaction is successful, then all the statements are executed successfully.
	if transaction is failure, then all statements are rolled back.
  a batch execution can be considered as a transaction, if it posses
	ACID 
           Atomicity          	All otherwise None
           Consistency         	transaction should leave the data in a consistent state, no matter, the transcation is 
           		successful or failure
           Isolation            	lock
           Durability           	log

- In oracle, the privileges are categorized into
           System privileges 
           	are used to login, logout, create objects, etc
           	GRANT with admin option
           Object privileges
           	are specific to particular object
           	like INSERT ON EMPLOYEES table
           	GRANT with grant option

- CONSTRAINTS
	Limitations
	Restrictions
	Conditions that needs to be met
	constraints enforce integrity

- Integrity
-------------
	means correctness

types of data integrity?
	Entity Integrity
	Domain Integrity
	Referential Integrity
	User defined data integrity

What is entity integrity?
	is the ability to identify a row uniquely
	is implemented using PRIMARY KEY

what is a primary key?
	a column or columns which is/are used to identify a row uniquely is a primary key
	primary key column(s) will not allow
		NULL
		Duplicates
	primary key can be composite also

We can add primary key 
	while creating a table		CREATE
	after creating a table		ALTER

PRIMARY KEY WHILE CREATE TABLE 
	at column level
	at row level
	and we can also mention constraint id while creating a constraint. It will be useful while removing the constraint
	if we do not name the constraint id, then system gives an id. we can find that id and use it to remove the constraint
----------------------------------------------------------------------------------------------------------------------------------
Task:
1) create a table and introduce primary key at column level
2) drop the table and create again and introduce primary key at table level
3) create primary key with constraint id of your choice and check data dictionary
4) alter table and drop constraint primary key
5) alter table and add primary key

dictionary tables can be
	USER_
	ALL_
	DBA_

USER_TABLES
USER_VIEWS
USER_CONSTRAINTS
USER_CONS_COLUMNS

These are some of the dictionary tables, 
	use SELECT statement on these tables
	like
		SELECT * FROM USER_TABLES;
---------------------------------------------------------
ALTER TABLE PRODUCT ADD CONSTRAINT pkpid1 PRIMARY KEY(ID, PID);
This way, we can create composite primary key

Every primary key uses a clustered index

------------------------------
DEFAULT
CHECK
NOT NULL
UNIQUE


CREATE TABLE TABLE1
(
    NAME VARCHAR2(20) UNIQUE
);
Table created.

INSERT INTO TABLE1 VALUES(NULL);


CREATE TABLE TABLE1
(
    NAME VARCHAR2(20) NOT NULL
);
Table created.

insert into table1 values (null);
ORA-01400: cannot insert NULL into ("SQL_XAILRSLZDFLQFNZSHSKOOEJMB"."TABLE1"."NAME") ORA-06512: at "SYS.DBMS_SQL", line 1721
==============================================================================================================


CHECK
----------
DROP TABLE TABLE1;
Table dropped

create table table1
(
    price int CHECK (price>100)
);
Table created

insert into table1 values(10);
ORA-02290: check constraint (SQL_XAILRSLZDFLQFNZSHSKOOEJMB.SYS_C00164433864) violated ORA-06512: at "SYS.DBMS_SQL", line 1721

insert into table1 values(101);
1 row(s) inserted.

DEFAULT
----------------
some columns can have default values
when user does not provide value for these columns, the default value can be taken


create table EMP
(
    ID INT,
    NAME VARCHAR2(20),
    NATIONALITY VARCHAR2(20) DEFAULT 'INDIAN'
)
Table created.


INSERT INTO EMP VALUES (1, 'Jag', DEFAULT);
1 row inserted

INSERT INTO EMP (ID, NAME) VALUES (2, 'Nitin');
1 row inserted

insert into emp values (3, 'Satish', 'USA');
1 row inserted

--------------------
Activity:
Identify what is FOREIGN KEY and how to use it

FOREIGN KEY enforces referential integrity.

example:
	PRODUCT table contains product id as follows
	1
	2
	3
	4
	5


	SALES
	ID, PID, CID,...
in sales table, PID cannot be 6 or 7 or 8 
only the ids present in PRODUCT.ID are allowed in SALES table PID


what are the foreign key constraints?
	RESTRICT
	SET NULL
	CASCADE
